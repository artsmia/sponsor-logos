%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Staff ) (Northern Trust Bank)%%Title: (NTIL342.EPS)%%CreationDate: (2/11/00) (2:25 PM)%%BoundingBox: 21 -73 370 7%%HiResBoundingBox: 21.3345 -72.5029 369.7988 6.625%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%DocumentCustomColors: (PANTONE 342 CVC)%%CMYKCustomColor: 1 0 0.69 0.43 (PANTONE 342 CVC)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 258.8555 -58.3311 258.8555 -58.3311%AI3_TileBox: -125.6445 -353.8311 645.3555 224.1689%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 792 612%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -128.6445 213.1689 1.25 1137 822 18 1 1 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-125.6445 -353.8311%%AI3_PaperRect:-12 588 780 -24%%AI3_Margin:12 -10 -9 24%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 32 8%%BeginData: 4860 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD09FFA8592E2E2D0B0B2E2E5984FD73FF840B347DAFA82E2D0BA8%FF7D2E0B84FD6FFFA8582EA8FFFFFF832D0B2E34AEFFFFFF2E34A8FD6CFF%A80B59FD05FFA82E59582E592E59FFFF7D2E83FD6AFFA82EA8FD04FFA82E%5805FF2E582EA83484FFFFA82E84FD68FFA80BA8FD04FFA82EA85958FF59%58A82E592EFFFFFFA82EA8FD67FF347DFD06FF592E340BFF0B2E2E348358%FFFFFFA8842EFD66FF842EFFFFA8052EA8FFFF2EA80BFF0BFFA82E0B052E%592E58592E7DFD65FF2DA8FFFF59832E84FFA858FF0BFF05AE0B832EA859%0B0B340BAF0BFD06FF83598384FFFFFF838359A8FD11FF845983FD1CFFAE%835983598359835983A8FD18FF7D34FFFFFF597D5859FF2E84FF0BFF0B59%585958FFFF58A884FFFF587DFD05FF590B050B84FFFF84050B84FD0EFF84%FFFF842E05FD1CFFA8050B2E7D050B7D34057DFD15FFA8FFFF597DFFFFFF%A8340BA8AE2EFFFF05FF05AF84FFFFFFA858FD04FF8459FD06FF2E0B052E%FFFFFF3459FD0FFF0BFFFFFF2E0BFD1CFF840B7DFF840B05FFFF5959FD15%FF0BFFFF2DAFFD04FF2E0BA8A82EFFFF0BFF0BFD06FF05FD05FF0BFD06FF%34590B0558FFFF59A8FD0BFFA8A8AF0B0BFFFFFF3405FD08FFAF84FD06FF%AFA8FD05FFA8FD04FFA82EFFFFA8050BFFFFA884FFFFA8A8FD10FF2D0BFF%FF2EFD05FF7D0B845983FFFF05FF0BFD06FF5959FD04FF34FD06FF2EFF2E%0C0B84FF83A8FF592E592E59FF2D0B05832D592E0C0B5859FF2E0BA8590B%59FFFFFF592E840BAF7D0C0B592E0C590B05A8590B2EFD07FFA80C0BFFFF%FF0B0B597D0B59050C59AF0B0C2EFFFF5959580B832E0B0558592EFD05FF%05592D0B59FFFF0BFF0BFD06FF840BA8FFFFFF2EA8FD05FF34FFFF0B0B05%A859A8590B7DFF7D0B7DFF050B7D0B58FF050BFFFFFF340558FF2E0559FF%5905AFFF2E0BFF590B0B8305FF2E0B2EFF0B0B59FD06FFA8050BFFFFFF7D%050B590B837D057DFFA80534FF5958FFFF5859FF050BFFFF58FD04FF592E%FFFF582E7DFF05FF05FFFFFF59AFFFFF2E7DFFFFFF58A8FD05FF2EFFFFAF%050B2E83842E05FFFFFF0534FF0B05FF84FFFF0B05FFFFFF2E0B84FF590B%2EFF052EFFFF2E0BA8830559FFA8FF580583FF7D0559FD06FFA80B05FFFF%FF590B2EFF84FF590B59FFA80B2EFF2E0B58A8A8A8FF0B05FFFF2EFD04FF%0B84FFFFA8050B7D0BFF0BFFFF2D2E2EFFFF7D2EFFFFFF2EA8FD05FF2EFF%FFFF7D050B05A8050BFFFFFF0B05FF050BFD04FF050BFFFFFF2E05A8FFA8%0534840B05342E2E2EA8590B59FFFFFF2E0B59FF590B2EFD06FFA8050BFF%FFFF59057DFFFFFF7D0559FFA8052EFF7D050B050B83FF050BFFFF2EFFFF%FFA82EFD04FF587D0C0BFF05FFA82EFF84FFFF8458FFFFFF34FD06FF2EFD%04FF580B0BA80C0BFFFFFF0B2EFF0C0BFD04FF0B05FFAEFF2E0CA8FFA80C%2EA80534FD05FF830583FFFFFF580B83FF830B58FD06FFA80B05FFFFFF59%0C59FFFFFF590B59FFA80B2EFFA8A8592E0B58FF0C0BFFA80BFFFFFF2E84%FF7DA8FFA82E0B0BFF0B59A82E592E59FF592EFFFFFF05FD05FFA80B7DFF%FFFFA80B05A80B0BA8FF840B58FF050BFD04FF050BFF2EFF2E05A8FFA805%34FF0B05FFFFFF2EFF590B59FFFFFF2E0B59FF590B2EFD06FFA8050BA8FF%FF7D057DFFFFFF7D052EFF83052EFF7D59FFFF582EFF050BA82E597DFFFF%2EAEFF0B2E84FFA82E05FF0559580B0B2E05840BFFFFFF8459FD05FF5905%2E84FFFFFF840BA8AF057DFF5905FF590B0583FFFFFF2E052E0BA80B0B2E%FF580B05A8840B59FF7D59A834052EA8FFA82E0534A834052EA8FD04FF83%050B052E83AF2E0B2EAFFFFF840B0584590B0BA8590B83A80583FF2E0534%0B8358FFFF05FFFF0BA858597D7D0BFF0B2E2E2E34A82E2EA8FFFFFF597D%FD05FF84A884AFFD04FFA8FFFFAF585859FFFFA884A884FFFFFFA8592EA8%A8A884A8A8A884A8A8FFA8595984FFAF84A884AFFFFF84A884FF84A884FD%05FFA8A884A884AFA8A884A8A8FFFFFF847D83FF597DA8A8A8845984FFFF%A8592EA8FF0BFFFF2EFFFF2DFF84582D830BFF2E2E2E587DFF05FD05FF0B%FD65FF842EFF2EA8FF58050B0B342EA8FFAE2E2E0B2E052EFD04FF2E7DFD%66FF2E83AE2EFF59587D0B59FD05FF7D0B59AEA8FFFFFF842EAEFD66FFA8%2EA8A8595884FFA80B0559A859052EA8FD05FFA80BA8FD68FF842EA8FD05%FF0B83340B2E8359FD05FFA82E83FD6AFF7D2E83FD04FF7D05FF2DAF0BAE%FD04FF840B7DFD6CFFA83434FD04FF59050B0584FD04FF582EA8FD6FFF7D%05597DFFFF2E052EFFFF7D590559A8FD72FF7D592D340B0C2D340B5983FD%79FFA884A8FDFCFFFD73FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Brick)(Brick) 0 0 72 72 [%AI3_Tile(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR0 0 m0 72 L72 72 L72 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR0 68.4097 m72 68.4097 lS0 61.209 m72 61.209 LS0 54.0088 m72 54.0088 LS0 46.8076 m72 46.8076 LS0 39.6084 m72 39.6084 LS0 32.4072 m72 32.4072 LS0 25.207 m72 25.207 LS0 18.0059 m72 18.0059 LS0 10.8057 m72 10.8057 LS0 3.6064 m72 3.6064 LS68.4102 68.4097 m68.4102 61.2217 lS54.0098 68.4097 m54.0098 61.2217 LS39.6094 68.4097 m39.6094 61.2217 LS25.21 68.4097 m25.21 61.2217 LS10.8105 68.4097 m10.8105 61.2217 LS68.4102 53.9717 m68.4102 46.7842 lS54.0098 53.9717 m54.0098 46.7842 LS39.6094 53.9717 m39.6094 46.7842 LS25.21 53.9717 m25.21 46.7842 LS10.8105 53.9717 m10.8105 46.7842 LS68.4102 39.5967 m68.4102 32.4092 lS54.0098 39.5967 m54.0098 32.4092 LS39.6094 39.5967 m39.6094 32.4092 LS25.21 39.5967 m25.21 32.4092 LS10.8105 39.5967 m10.8105 32.4092 LS68.4102 25.2217 m68.4102 18.0342 lS54.0098 25.2217 m54.0098 18.0342 LS39.6094 25.2217 m39.6094 18.0342 LS25.21 25.2217 m25.21 18.0342 LS10.8105 25.2217 m10.8105 18.0342 LS68.4102 10.7842 m68.4102 3.5967 lS54.0098 10.7842 m54.0098 3.5967 LS39.6094 10.7842 m39.6094 3.5967 LS25.21 10.7842 m25.21 3.5967 LS10.8105 10.7842 m10.8105 3.5967 LS61.1973 3.5967 m61.1973 0 LS46.7969 3.5967 m46.7969 0 LS32.3965 3.5967 m32.3965 0 LS17.9971 3.5967 m17.9971 0 LS3.5967 3.5967 m3.5967 0 lS61.1973 18.0342 m61.1973 10.8467 LS46.7969 18.0342 m46.7969 10.8467 LS32.3965 18.0342 m32.3965 10.8467 LS17.9971 18.0342 m17.9971 10.8467 LS3.5967 18.0342 m3.5967 10.8467 lS61.1973 32.4092 m61.1973 25.2217 LS46.7969 32.4092 m46.7969 25.2217 LS17.9971 32.4092 m17.9971 25.2217 LS3.5967 32.4092 m3.5967 25.2217 lS61.1973 46.7842 m61.1973 39.5967 LS46.7969 46.7842 m46.7969 39.5967 LS32.3965 46.7842 m32.3965 39.5967 LS17.9971 46.7842 m17.9971 39.5967 LS3.5967 46.7842 m3.5967 39.5967 lS61.1973 61.2217 m61.1973 54.0347 LS46.7969 61.2217 m46.7969 54.0347 LS32.3965 61.2217 m32.3965 54.0347 LS17.9971 61.2217 m17.9971 54.0347 LS3.5967 61.2217 m3.5967 54.0347 lS61.1973 71.959 m61.1973 68.4717 LS46.7969 71.959 m46.7969 68.4717 LS32.3965 71.959 m32.3965 68.4717 LS17.9971 71.959 m17.9971 68.4717 LS3.5967 71.959 m3.5967 68.4717 lS32.3965 32.4092 m32.3965 25.2217 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR4.85 3.617 m4.85 75.617 L76.85 75.617 L76.85 3.617 L4.85 3.617 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Leaves - Fall )(Leaves - Fall ) 0 0 64.0781 78.9336 [%AI3_Tile(0 O 0 R 0.05 0.2 1 0 k 0.05 0.2 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR64.0781 78.9336 m64.0781 0 L0 0 L0 78.9336 L64.0781 78.9336 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.83 0 1 0 k 0.83 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D0 XR29.7578 0.9902 m30.4346 1.1914 30.7246 1.3428 V29.2559 4.0547 33.707 8.3359 34.627 9.0762 C35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 Cf13.8525 29.9844 m13.3281 29.5127 13.1309 29.25 V15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C7.2256 14.5 9.2598 15.6133 10.166 15.5645 C10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C8.1875 11.041 9.207 9.5107 10.166 7.0947 C10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C15.373 24.3779 15.373 27.2959 13.8525 29.9844 Cf41.2324 26.0742 m41.5518 26.7021 41.7549 26.959 V44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C46.3408 31.123 45.4395 33.084 44.2402 34.126 C45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C49.749 24.9766 50.584 26.9941 50.25 28.4609 C45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 Cf27.7578 38.7324 m28.4346 38.9316 28.7246 39.084 V27.2559 41.7969 31.707 46.0776 32.627 46.8169 C33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C38.002 44.582 37.3359 46.0547 36.5742 47.5039 C37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C30.7373 55.5146 30.166 54.314 29.2969 53.0366 C30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C30.9775 50.46 29.2852 51.2036 28.793 52.1958 C28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 Cf13.5195 70.3916 m12.9941 69.9209 12.7988 69.6587 V15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C7.8545 51.4497 8.873 49.9189 9.832 47.5039 C10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C15.041 64.7856 15.041 67.7046 13.5195 70.3916 Cf41.2324 64.4824 m41.5518 65.1113 41.7549 65.3682 V44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C51.2881 60.583 50.4268 61.8882 48.5645 62.333 C49.749 63.3862 50.584 65.4033 50.25 66.8691 C45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 Cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Stripes)(Stripes) 8.45 4.6001 80.45 76.6001 [%AI3_Tile(0 O 0 R 1 0.07 1 0 k 1 0.07 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.2 8.2 m80.7 8.2 LS8.2 22.6001 m80.7 22.6001 LS8.2 37.0002 m80.7 37.0002 LS8.2 51.4 m80.7 51.4 LS8.2 65.8001 m80.7 65.8001 LS8.2 15.4 m80.7 15.4 LS8.2 29.8001 m80.7 29.8001 LS8.2 44.2 m80.7 44.2 LS8.2 58.6001 m80.7 58.6001 LS8.2 73.0002 m80.7 73.0002 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Black, White)(Black, White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Chrome)(Chrome) 0 6 Bd[0<464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3B3A3A3A393939393838383837373736363636353535353434343333333332323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A2929292828282827272726262626252525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A0909090908080807070707060606050505050404040403030302020202010101010000><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515151515151514141414141414141313131313131313121212121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909090808080808080808070707070707070706060606060606060605050505050505050404040404040404030303030303030303020202020202020201010101010101010000000000>1 %_Br00.2751<6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F>1 %_Br0<00000101010102020202030303040404040505050506060607070707080808090909090A0A0A0A0B0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101011111112121212131313141414141515151516161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021212122222222232323232424242525252526262626272727282828282929292A2A2A2A2B2B2B2B2C2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313132323233333333343434353535353636363637373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F40404040414141414242424343434344444444454545464646><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F1010101111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F30303131323232333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243434444444545464647474748484949494A4A4B4B4C4C4C4D4D4E4E4F4F4F5050515151525253535454545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F6060616161626263636464646565666666676768686969696A6A6B6B>1 %_Br10 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A3939393838383837373736363635353535343434333333323232323131313030302F2F2F2E2E2E2E2D2D2D2C2C2C2B2B2B2B2A2A2A292929282828282727272626262525252524242423232322222222212121202020201F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1A1A1A1A1919191818181717171616161615151514141413131313121212111111101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A0909090808080707070706060605050504040404030303020202010101010000>001 %_Br[1 0 50 92 %_BS%_1 0 50 92 Bs0 0.275 1 0.12 1 50 59 %_BS%_0 0.275 1 0.12 1 50 59 Bs0 0.275 1 0.42 1 50 50 %_BS%_0 0.275 1 0.42 1 50 50 Bs1 0 50 49 %_BS%_1 0 50 49 Bs1 0 50 41 %_BS%_1 0 50 41 Bs1 0.3 0 0 1 50 0 %_BS%_1 0.3 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_BS%_0 1 0 0 1 50 100 Bs1 1 0 0 1 50 80 %_BS%_1 1 0 0 1 50 80 Bs1 0.0279 0 0 1 50 60 %_BS%_1 0.0279 0 0 1 50 60 Bs1 0 1 0 1 50 40 %_BS%_1 0 1 0 1 50 40 Bs0 0 1 0 1 50 20 %_BS%_0 0 1 0 1 50 20 Bs0 1 1 0 1 50 0 %_BS%_0 1 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6>01 %_Br[0 0 1 0 1 52 19 %_BS%_0 0 1 0 1 52 19 Bs0 0.55 0.9 0 1 50 100 %_BS%_0 0.55 0.9 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k([Registration]) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0 0 1 k(C=0 M=0 Y=0 K=100) Pc0 0.1 1 0 k(C=0 M=10 Y=100 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc1 0.55 1 0 k(C=100 M=55 Y=100 K=0) Pc1 0.9 0.1 0 k(C=100 M=90 Y=10 K=0) Pc0.15 1 1 0 k(C=15 M=100 Y=100 K=0) Pc0.45 0.9 0 0 k(C=45 M=90 Y=0 K=0) Pc0.5 0.4 0.3 0 k(C=50 M=40 Y=30 K=0) Pc0.5 0.85 1 0 k(C=50 M=85 Y=100 K=0) Pc0.75 0.05 1 0 k(C=75 M=5 Y=100 K=0) Pc0.75 0.9 0 0 k(C=75 M=90 Y=0 K=0) Pc0.8 0.05 0 0 k(C=80 M=5 Y=0 K=0) PcBb2 (Black, White) -7932.6445 8133.1689 0 0 1 0 0 1 0 0 Bg0 BB(Black, White) PcBb2 (Chrome) -7932.6445 8133.1689 0 0 1 0 0 1 0 0 Bg0 BB(Chrome) PcBb2 (Rainbow) -7932.6445 8133.1689 0 0 1 0 0 1 0 0 Bg0 BB(Rainbow) PcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -7932.6445 8133.1689 0 0 1 0 0 1 0 0 Bg0 BB(Yellow & Orange Radial) Pc(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Brick) Pc(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Confetti) Pc(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Leaves - Fall ) Pc(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Stripes) Pc1 0 0.69 0.43 (PANTONE 342 CVC) 0 x(PANTONE 342 CVC) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 Au*u1 O1 0 0.69 0.43 (PANTONE 342 CVC) 0 x800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D0 XR60.8999 2.3154 m59.5122 2.2871 58.3687 1.1533 58.3687 -0.2422 c58.3687 -1.6533 59.5132 -2.7988 60.9272 -2.7988 c62.3364 -2.7988 63.4839 -1.6533 63.4839 -0.2422 c63.4839 1.1699 62.312 2.3154 60.8999 2.3154 cf0 D60.9272 -1.3721 m60.3022 -1.3721 59.7974 -0.8662 59.7974 -0.2422 c59.7974 0.3701 60.3022 0.8662 60.9077 0.8857 c61.5308 0.8857 62.0532 0.3799 62.0532 -0.2422 c62.0532 -0.8662 61.5493 -1.3721 60.9272 -1.3721 cf*Uu*u1 D60.9956 6.625 m39.145 6.625 21.3345 -11.0898 21.3345 -32.9404 c21.3345 -54.7891 39.0464 -72.5029 60.8999 -72.5029 c82.7485 -72.5029 100.4634 -54.7891 100.4634 -32.9404 c100.4634 -11.1523 82.7563 6.5195 60.9956 6.625 cf0 D69.9136 -14.1875 m66.9087 -15.9473 65.8765 -19.333 67.2241 -21.2891 c68.9429 -23.7852 72.6597 -21.6758 74.2114 -19.709 c75.2876 -18.3457 76.1831 -16.5576 76.7437 -14.6377 C76.8999 -14.6709 77.0532 -14.7031 77.2075 -14.7412 c78.9282 -15.1855 80.2524 -15.9971 81.6401 -16.7559 C80.9536 -18.6846 81.2173 -20.0596 81.1753 -20.374 C81.146 -22.6191 81.5327 -24.5264 83.1997 -28.835 c84.5298 -32.2715 86.2222 -34.5752 86.1948 -37.9316 C85.9644 -41.8076 83.9302 -44.5146 81.2036 -45.6035 C81.2612 -44.3184 81.1899 -43.0352 80.9927 -41.8418 C80.4819 -39.3184 80.0933 -39.4287 79.1021 -40.8936 C77.6343 -42.8945 75.4263 -44.3633 73.9204 -45.2432 C73.5122 -45.0166 73.145 -44.7227 72.8335 -44.3711 C74.3599 -43.667 75.7964 -42.6143 76.7368 -41.2324 c78.0396 -39.3184 79.0942 -36.4912 77.4028 -33.8262 c76.5425 -32.4756 74.8521 -32.5234 73.7417 -33.2998 C72.4937 -33.9932 70.2729 -36.0449 69.9136 -39.624 C69.7915 -41.4248 70.0396 -42.832 70.5366 -43.9258 C70.2104 -44.002 69.8755 -44.0654 69.5239 -44.1035 c69.2026 -44.1387 68.9058 -44.209 68.6216 -44.292 C68.1235 -43.4375 67.5083 -42.8086 67.1665 -42.5352 c66.5024 -41.9824 65.7271 -41.2578 64.4897 -40.7158 C64.4888 -25.2275 L64.4888 -12.1973 L70.7173 -12.1572 L72.603 -12.1572 74.1313 -10.6279 74.1313 -8.7422 c74.1313 -6.8574 72.603 -5.3301 70.7173 -5.3301 C68.4302 -5.3301 L64.4351 -5.3301 L63.9224 -5.3203 64.1147 -4.7422 64.3677 -4.5352 c65.02 -3.9951 65.5454 -3.3105 65.894 -2.5254 C66.0405 -2.4697 66.23 -2.416 66.3794 -2.3633 C67.9995 -1.8711 70.0669 -2.1104 71.2163 -2.5371 c72.0581 -2.8516 76.4897 -5.4014 75.437 -12.502 C73.6284 -12.5566 71.7759 -13.0996 69.9136 -14.1875 cf75.0405 -14.4355 m74.9019 -14.9619 74.7397 -15.5049 74.5454 -16.0732 c73.7808 -18.2979 72.604 -19.4854 71.8823 -20.0684 c70.7036 -21.0215 69.4634 -21.3027 68.6089 -20.1533 c68.0542 -19.4023 68.3315 -18.1543 69.2202 -17.0723 C70.7241 -15.3545 72.6753 -14.3848 75.0405 -14.4355 Cf72.1157 -49.3496 m71.106 -51.2471 67.5552 -51.6895 65.9448 -50.0244 C65.4458 -49.6924 64.4487 -48.917 64.4937 -44.6348 C64.4927 -43.0898 L64.4927 -42.3086 L64.6646 -42.3916 64.8188 -42.4707 64.9683 -42.5498 C66.1333 -43.2725 66.9565 -44.04 67.4985 -44.79 C66.6118 -45.3486 66.0308 -46.1855 65.8364 -47.1123 c65.5835 -48.3057 65.9946 -49.541 67.1958 -49.8027 C68.8608 -50.0537 69.1646 -48.3877 69.3579 -47.5293 C69.4595 -46.8037 69.3608 -46.1133 69.1587 -45.4873 C69.3872 -45.4023 69.6235 -45.3379 69.8706 -45.2959 c70.2935 -45.2275 70.7339 -45.123 71.1763 -44.9951 C71.5171 -45.4375 71.9106 -45.8086 72.3501 -46.1094 C70.0308 -46.8066 70.9097 -49.3193 72.1157 -49.3496 Cf68.1538 -46.0244 m68.3032 -46.459 68.3589 -46.873 68.3315 -47.252 c68.2769 -48.1133 67.856 -48.9404 67.3608 -48.5293 c67.0288 -48.251 66.9468 -47.501 67.4165 -46.7803 c67.5903 -46.5127 67.8462 -46.2529 68.1538 -46.0244 Cf72.187 -43.3525 m71.9448 -42.7979 71.8052 -42.1357 71.8003 -41.3428 C71.5845 -37.9082 73.311 -36.252 73.8521 -35.5732 c74.7397 -34.4658 76.9683 -33.9111 76.8491 -36.5732 c76.7915 -37.7939 76.6538 -38.5977 76.0435 -39.8447 c75.5132 -40.9297 74.1548 -42.4395 72.187 -43.3525 Cf65.3843 -7.0488 m68.4302 -7.042 L70.8374 -7.0371 L71.8237 -7.0371 72.6216 -7.8359 72.6216 -8.8193 c72.6216 -9.8047 71.8237 -10.6035 70.8374 -10.6035 C65.437 -10.6113 L65.6382 -10.0771 65.7417 -9.5039 65.7417 -8.8994 c65.7417 -8.25 65.6118 -7.6172 65.3843 -7.0488 Cf63.0776 -3.1748 m62.2007 -3.8701 62.2856 -5.8369 63.0142 -6.4248 C63.6958 -7.0234 64.1382 -7.9102 64.1382 -8.8887 c64.1382 -9.9951 63.5933 -10.9678 62.7476 -11.5586 C62.7505 -25.2891 L62.7544 -43.0352 L62.7544 -47.1123 L62.7544 -52.2451 69.7466 -54.6035 74.0493 -50.1377 C74.7671 -49.249 74.7671 -47.918 73.4067 -47.9424 C72.564 -47.9219 72.1597 -47.5293 73.4829 -47.1328 C76.7661 -45.7549 78.8247 -43.6982 V79.5659 -42.6748 79.5962 -42.3848 79.7573 -44.1377 c79.9263 -46.2529 79.4839 -48.917 78.8042 -50.5 c78.2612 -51.7461 77.8198 -52.6895 77.3989 -50.9219 C77.2075 -49.6924 76.0317 -49.7686 75.3257 -50.9307 C74.6216 -52.2051 70.2729 -55.1855 68.6665 -55.5947 c67.8462 -55.8037 63.4224 -56.96 60.9272 -60.1016 C58.4292 -56.96 54.0073 -55.8037 53.186 -55.5947 c51.5776 -55.1855 47.229 -52.2051 46.5249 -50.9307 C45.8208 -49.7686 44.644 -49.6924 44.4536 -50.9219 C44.0327 -52.6895 43.5884 -51.7461 43.0464 -50.5 c42.3696 -48.917 41.9253 -46.2529 42.0952 -44.1377 c42.2554 -42.3848 42.2856 -42.6748 43.0259 -43.6982 C45.0884 -45.7549 48.3667 -47.1328 Y49.6909 -47.5293 49.2866 -47.9219 48.4448 -47.9424 C47.0845 -47.918 47.0845 -49.249 47.8032 -50.1377 C52.104 -54.6035 59.0962 -52.2451 59.0962 -47.1123 C59.0962 -43.4785 L59.1001 -29.2217 L59.1021 -11.5586 L58.2593 -10.9678 57.7144 -9.9951 57.7144 -8.8887 c57.7144 -7.9102 58.1567 -7.0234 58.8374 -6.4248 C59.5679 -5.8369 59.6499 -3.8701 58.7749 -3.1748 c57.9028 -2.5117 57.353 -1.4688 57.353 -0.29 c57.353 1.7002 58.9194 3.3174 60.9048 3.3398 c62.9097 3.3398 64.4995 1.7139 64.4995 -0.29 c64.4995 -1.4688 63.9487 -2.5117 63.0776 -3.1748 cf60.6782 -69.4326 m59.2397 -69.4326 58.4116 -68.6348 58.3647 -67.2305 C59.1196 -67.5176 59.9312 -67.6943 60.7036 -67.6943 c61.5083 -67.6982 62.2739 -67.5176 62.9849 -67.2314 C62.9233 -68.4561 61.9185 -69.4326 60.6782 -69.4326 cf58.8745 -65.6719 m59.3052 -65.1396 59.9565 -64.7939 60.689 -64.7939 c61.4448 -64.8008 62.1099 -65.1758 62.5308 -65.7383 C61.9409 -65.9482 61.3218 -66.0576 60.6782 -66.0313 c59.9634 -66.0098 59.3726 -65.8633 58.8745 -65.6719 Cf60.6929 -63.1729 m59.3433 -63.1729 58.145 -63.8564 57.4312 -64.8936 C57.3638 -64.8477 57.2974 -64.8037 57.2397 -64.7646 C54.6694 -62.585 53.6655 -60.2266 53.3198 -57.6074 C56.6274 -58.5166 58.4771 -59.9258 60.9272 -62.5908 C63.1353 -60.1895 64.894 -58.8311 67.6421 -57.9199 C67.6421 -57.9434 67.6372 -57.9648 67.6382 -57.9854 C67.7573 -58.5029 67.2964 -61.1826 66.0288 -62.8965 c65.4185 -63.7236 64.729 -64.4365 63.9731 -64.9727 C63.2729 -63.9023 62.063 -63.1865 60.6929 -63.1729 cf41.2603 -29.165 m41.3745 -28.9287 41.4829 -28.6826 41.5923 -28.4365 C41.9302 -28.7598 42.2651 -29.0449 42.5913 -29.2764 c43.8853 -30.1953 45.6636 -31.5254 47.8374 -32.835 C48.4253 -36.2227 49.9126 -39.2568 51.4673 -41.1787 c52.3823 -42.3086 53.4351 -42.917 54.3735 -43.1992 C52.814 -45.2344 51.9761 -47.9619 51.6079 -50.4404 C50.8784 -50.1875 50.2036 -49.8213 49.7349 -49.3496 C50.9409 -49.3193 52.022 -46.918 49.7026 -46.2227 C45.2915 -44.3594 42.7485 -40.8936 V41.7593 -39.4287 41.3706 -39.3184 40.8579 -41.8418 C40.1499 -46.1436 41.4253 -51.8018 42.2866 -53.3359 c42.3276 -53.4121 42.3677 -53.4824 42.4097 -53.5537 C42.4155 -53.5723 42.4155 -53.585 42.4233 -53.6035 C43.311 -54.8799 43.1763 -56.4053 42.2563 -56.9053 c41.2856 -57.4316 40.4819 -57.0996 39.5386 -56.7939 c37.5688 -56.1582 33.7964 -51.9951 34.269 -46.918 c35.0132 -38.9014 38.0972 -35.7686 41.2603 -29.165 cf39.9272 -23.6191 m38.9341 -21.8848 37.8745 -20.4307 37.7095 -17.7383 c37.6382 -16.583 38.1226 -14.3447 40.0952 -14.2988 c41.2856 -14.2695 41.8892 -15.6328 42.0366 -17.2939 c42.2085 -19.2549 41.5015 -21.959 40.5356 -24.543 C40.3149 -24.2422 40.1089 -23.9346 39.9272 -23.6191 cf56.4126 -10.6113 m51.0132 -10.6035 L50.0288 -10.6035 49.2319 -9.8047 49.2319 -8.8193 c49.2319 -7.8359 50.0288 -7.0371 51.0132 -7.0371 C53.4233 -7.042 L56.4702 -7.0488 L56.2388 -7.6172 56.1089 -8.25 56.1089 -8.8994 c56.1089 -9.5039 56.2114 -10.0771 56.4126 -10.6113 Cf57.3638 -12.1973 m57.3599 -29.1943 L57.3452 -40.4834 L57.2437 -39.9883 57.0522 -39.4482 56.8208 -38.9023 c55.8892 -36.7148 54.1987 -34.6475 49.5698 -31.4717 C49.4683 -30.501 49.4302 -29.5635 49.4683 -28.7207 C49.855 -24.6143 51.2544 -17.9521 54.8091 -12.1807 C57.3638 -12.1973 Lf57.3677 -42.6162 m57.3638 -43.4727 L57.3569 -44.6348 L57.3472 -48.917 56.3491 -49.6924 55.9048 -50.0244 C55.0181 -50.8027 54.2397 -50.8574 53.3911 -50.7598 C53.8188 -47.7227 54.9565 -44.3057 57.3677 -42.6162 Cf51.2446 -37.71 m50.7056 -36.5918 50.2954 -35.3311 50.0005 -34.0459 C50.0376 -34.0654 50.0718 -34.085 50.1079 -34.1035 c51.0786 -34.6045 54.7954 -38.043 55.2397 -39.5684 c55.3599 -39.9824 55.6274 -40.9561 55.1011 -41.3721 c54.4204 -41.9072 52.8267 -40.9834 51.2446 -37.71 cf23.0376 -32.9404 m23.0376 -12.6748 39.0503 3.873 59.0728 4.8721 C56.9712 4.1025 55.4829 2.0859 55.4829 -0.29 c55.4829 -1.999 56.2622 -3.5254 57.4839 -4.5352 c57.7358 -4.7422 57.9312 -5.3203 57.4175 -5.3301 C53.4233 -5.3301 L51.1333 -5.3301 L49.2485 -5.3301 47.7212 -6.8574 47.7212 -8.7422 c47.7212 -10.6279 49.2485 -12.1572 51.1333 -12.1572 C53.4214 -12.1709 L49.937 -17.5664 47.8442 -23.9688 47.5835 -29.2217 c47.5718 -29.5332 47.5698 -29.8408 47.5767 -30.1514 C46.7642 -29.6299 45.8823 -29.083 44.9185 -28.501 c44.105 -28.0078 43.186 -27.332 42.3218 -26.5293 C43.4868 -23.1309 44.0562 -19.5225 44.0327 -18.21 c44.0063 -16.542 43.3394 -12.8848 40.1782 -12.8848 c36.2095 -12.8848 35.9604 -17.3506 36.4614 -19.5127 c36.9751 -21.7471 38.2983 -24.3281 39.8052 -26.3711 C39.5874 -26.874 39.3706 -27.3662 39.1519 -27.834 c38.4419 -29.3555 37.4048 -32.0225 35.8579 -35.1074 c33.686 -39.2363 32.6587 -43.2471 32.606 -46.8633 c32.522 -52.3281 34.9175 -55.0664 35.8774 -56.1289 c37.1802 -57.5684 40.6255 -59.5732 42.9507 -58.125 c44.7544 -57.0039 44.6147 -55.1855 44.6782 -54.2969 C44.6831 -54.2783 44.6821 -54.2617 44.687 -54.2422 C44.8403 -53.9912 45.0015 -53.6836 45.1743 -53.3047 c45.5581 -52.3828 45.9204 -52.7422 46.228 -53.1299 C47.4487 -54.4443 49.519 -56.0947 51.4868 -57.0205 C51.769 -60.0137 52.814 -63.4883 56.6685 -66.3223 c56.7114 -66.3555 56.7593 -66.3818 56.8032 -66.415 C56.7642 -66.6426 56.7378 -66.874 56.7378 -67.1104 c56.7378 -68.9482 57.5073 -70.2061 58.9038 -70.748 C38.9204 -69.709 23.0376 -53.1797 23.0376 -32.9404 cf62.1343 -70.7715 m63.5874 -70.1865 64.6138 -68.7715 64.6138 -67.1104 c64.6138 -66.8643 64.5884 -66.624 64.5444 -66.3887 C65.7466 -65.5723 66.6987 -64.5361 67.2778 -63.7852 c68.3872 -62.3408 69.3579 -60.2061 69.3872 -57.6807 c69.3872 -57.5801 69.3696 -57.4961 69.3462 -57.4199 C71.6509 -56.6592 74.1694 -54.6934 75.6226 -53.1299 C75.9331 -52.7422 76.2925 -52.3828 76.6792 -53.3047 c77.7524 -55.6563 78.3657 -55.5273 79.5659 -53.3359 c80.0884 -52.4023 80.811 -49.9189 81.1021 -47.1699 C85.2358 -46.0244 88.5854 -42.042 88.6099 -37.2373 C88.4946 -33.8838 86.4438 -29.8877 84.7817 -27.1689 c83.6431 -25.3115 81.6997 -21.1289 82.8999 -17.3984 C84.2144 -18.0156 85.6909 -18.4932 87.6665 -18.5166 c91.2183 -18.5547 92.1655 -16.3252 92.186 -15.4072 c92.2427 -13.0234 89.9683 -11.7461 88.1362 -11.7188 c86.5288 -11.6953 84.2554 -12.2451 82.6733 -14.6885 c82.6606 -14.707 82.6519 -14.7227 82.6392 -14.7412 C82.0747 -14.4355 81.4604 -14.1006 80.7583 -13.7432 c79.6099 -13.1602 78.4214 -12.7754 77.2056 -12.6035 C77.2974 -12.0205 77.356 -11.4375 77.3755 -10.8604 c77.4849 -7.5869 76.3188 -3.9521 72.9634 -2.0664 c70.8735 -0.8906 67.4302 -1.0332 66.2915 -1.3887 c66.2544 -1.4004 66.2739 -1.3955 66.2915 -1.3887 C66.3657 -1.0244 66.3687 -0.6748 66.3687 -0.29 c66.3687 2.0791 64.8862 4.0957 62.7935 4.8682 C82.7817 3.8301 98.7593 -12.6973 98.7593 -32.9404 c98.7593 -53.4346 82.4712 -70.1143 62.1343 -70.7715 Cf83.9067 -15.4072 m84.144 -15.0762 84.4136 -14.751 84.7251 -14.4365 c85.4751 -13.6885 87.1655 -12.9668 88.1929 -12.9668 c89.2192 -12.9668 90.4126 -13.5781 90.5239 -14.8535 c90.6069 -15.8203 90.1079 -16.5176 88.3032 -16.5176 c86.5083 -16.5176 85.2769 -16.0908 83.9067 -15.4072 Cf*U66.2915 -1.3887 m66.2915 -1.3887 L66.3276 -1.377 66.3081 -1.3828 66.2915 -1.3887 CfU66.2915 -1.3887 m66.2915 -1.3887 L66.3276 -1.377 66.3081 -1.3828 66.2915 -1.3887 CfU*u0 O138.688 -25.541 m138.688 -45.7588 L137.1353 -45.7588 L119.1528 -21.5566 L119.1528 -36.9854 L119.1528 -40.7725 120.8276 -43.8037 122.9429 -44.3604 c123.8179 -44.6406 123.4985 -45.7588 122.9429 -45.7588 c114.3687 -45.7588 L113.8101 -45.7588 113.0942 -44.5986 114.3687 -44.3203 c116.4829 -43.8438 117.7173 -40.4922 117.7173 -36.9854 c117.7173 -20.0391 L117.7173 -18.3252 116.4829 -18.0479 114.3687 -18.0479 c113.2925 -18.0479 113.4517 -16.7715 114.3687 -16.7715 c119.6313 -16.7715 122.4233 -16.7715 y123.1382 -16.7715 123.5396 -17.3711 123.9771 -18.0479 c137.2144 -36.3486 L137.2935 -25.541 L137.2935 -22.0342 136.0591 -18.6855 133.9458 -18.2051 c132.6675 -17.9268 132.5923 -16.7715 133.9458 -16.7715 c135.939 -16.7715 140.5259 -16.7715 142.519 -16.7715 c143.0757 -16.7715 143.1167 -17.9668 142.519 -18.1279 c140.4028 -18.7246 138.688 -21.71 138.688 -25.541 cf*U*u154.9146 -36.3887 m154.9146 -40.375 154.397 -45.5557 150.4507 -45.5557 c146.5044 -45.5557 146.0259 -40.375 146.0259 -36.3887 c146.0259 -32.4004 146.4634 -27.1777 150.4507 -27.1777 c154.436 -27.1777 154.9146 -32.4004 154.9146 -36.3887 cf159.6978 -36.625 m159.6978 -30.4863 155.9536 -26.1006 150.4507 -26.0605 c144.9888 -26.0195 141.1216 -31.1631 141.1216 -36.625 c141.1216 -41.9277 145.187 -46.5547 150.4507 -46.5146 c155.7114 -46.4766 159.6978 -41.9277 159.6978 -36.625 cf*U*u173.1226 -32.2021 m171.7671 -32.1611 171.0884 -31.2021 171.0884 -29.7695 c171.0884 -27.8936 173.0845 -27.8936 173.0845 -27.1777 c173.0845 -26.6992 172.5649 -26.7373 171.9272 -26.7373 c169.0171 -26.7373 168.0161 -32.2813 167.939 -36.3066 c167.8208 -43.4854 L167.7808 -44.6406 169.7739 -44.7197 170.6509 -44.7197 c171.0483 -44.7197 171.1675 -45.7588 170.6509 -45.7588 c160.3237 -45.7588 L159.7661 -45.7588 159.9263 -44.7197 160.3237 -44.7197 c161.1636 -44.7197 162.9956 -44.5615 162.9956 -43.4023 c162.9956 -28.7734 L162.9956 -27.6152 161.6001 -27.4561 160.7632 -27.4561 c160.3628 -27.4561 160.2036 -26.4219 160.7632 -26.4219 c167.6997 -26.4219 L167.6997 -29.8877 L168.4204 -27.4561 169.4956 -25.6611 172.0874 -25.6611 c174.8364 -25.6611 175.7964 -27.376 175.7964 -29.4092 c175.7964 -31.4434 174.5991 -32.2412 173.1226 -32.2021 cf*U*u185.2134 -46.5146 m182.8237 -46.5146 179.2339 -45.2803 179.3569 -40.2939 c179.5991 -27.5371 L176.7632 -27.5371 L176.7632 -26.4219 L179.5991 -26.4219 183.3022 -22.3115 183.3022 -19.6426 c184.5776 -19.6426 L184.5776 -26.4219 L188.9243 -26.4219 L188.9243 -27.5371 L184.5776 -27.5371 L184.5776 -42.248 L184.5776 -44.4795 185.0151 -45.1572 186.2114 -45.1572 c188.3677 -45.1572 188.9243 -41.6504 188.9243 -39.376 c190.0396 -39.376 l190.0396 -44.125 188.2056 -46.5146 185.2134 -46.5146 cf*U*u204.1675 -45.7588 m203.6519 -45.7588 203.769 -44.7197 204.1675 -44.7197 c205.0444 -44.7197 206.0005 -44.5615 206.0005 -43.4023 c206.0005 -33.3574 L206.0005 -30.8047 205.6851 -27.4561 203.1323 -27.4561 c199.6606 -27.4561 198.5054 -32.4004 198.5054 -36.3066 c198.5054 -43.4023 L198.5054 -44.5615 200.3403 -44.7197 201.2163 -44.7197 c201.6157 -44.7197 201.7378 -45.7588 201.2163 -45.7588 c190.8921 -45.7588 L190.3335 -45.7588 190.4927 -44.7197 190.8921 -44.7197 c191.731 -44.7197 193.5649 -44.5615 193.5649 -43.4023 c193.5649 -19.1221 L193.5649 -17.9668 192.1675 -17.8086 191.3267 -17.8086 c190.9312 -17.8086 190.77 -16.7715 191.3267 -16.7715 c198.2651 -16.7715 L198.2651 -29.8877 L199.062 -27.7354 201.0581 -26.3408 203.2876 -26.3408 c208.7925 -26.3408 210.9458 -29.293 210.9458 -33.3574 c210.9458 -43.4023 L210.9458 -44.5615 212.4604 -44.7197 213.2983 -44.7197 c213.6948 -44.7197 213.8579 -45.7588 213.2983 -45.7588 C204.1675 -45.7588 lf*U*u226.7847 -34.5947 m219.2896 -34.5947 l219.5288 -29.4482 220.8481 -26.5811 223.7163 -26.5811 c225.6704 -26.5811 226.7847 -29.1309 226.7847 -34.5947 cf231.2515 -35.9072 m231.2515 -28.8896 227.8218 -25.8584 223.7163 -25.8584 c218.1753 -25.8584 214.228 -31.085 214.228 -36.5469 c214.228 -41.8486 218.1353 -46.3555 223.7163 -46.3555 c227.7446 -46.3555 230.5728 -43.5615 231.1323 -39.0996 C229.855 -39.0996 l229.4956 -42.6455 227.3433 -45.3174 223.7163 -45.3174 c219.73 -45.3174 219.2896 -41.6113 219.2896 -35.9072 c231.2515 -35.9072 Lf*U*u245.2993 -32.2021 m243.9429 -32.1611 243.2632 -31.2021 243.2632 -29.7695 c243.2632 -27.8936 245.2603 -27.8936 245.2603 -27.1777 c245.2603 -26.6992 244.7407 -26.7373 244.103 -26.7373 c241.1909 -26.7373 240.1978 -32.2813 240.1157 -36.3066 c239.9946 -43.4854 L239.9546 -44.6406 241.9507 -44.7197 242.8267 -44.7197 c243.2251 -44.7197 243.3442 -45.7588 242.8267 -45.7588 c232.5005 -45.7588 L231.9429 -45.7588 232.103 -44.7197 232.5005 -44.7197 c233.3384 -44.7197 235.1704 -44.5615 235.1704 -43.4023 c235.1704 -28.7734 L235.1704 -27.6152 233.7759 -27.4561 232.937 -27.4561 c232.5415 -27.4561 232.3804 -26.4219 232.937 -26.4219 c239.8784 -26.4219 L239.8784 -29.8877 L240.5942 -27.4561 241.6714 -25.6611 244.2642 -25.6611 c247.0132 -25.6611 247.9722 -27.376 247.9722 -29.4092 c247.9722 -31.4434 246.7729 -32.2412 245.2993 -32.2021 cf*U*u260.9805 -45.7588 m260.4219 -45.7588 260.582 -44.7197 260.9805 -44.7197 c261.8555 -44.7197 262.7734 -44.5615 262.7734 -43.4023 c262.7734 -33.3574 L262.7734 -30.8047 263.3301 -27.1377 260.7793 -27.1377 c257.311 -27.1377 256.1958 -30.8047 256.1958 -33.9941 c256.1958 -43.4023 L256.1958 -44.5615 257.9907 -44.7197 258.8667 -44.7197 c259.2661 -44.7197 259.4277 -45.7588 258.8667 -45.7588 c249.2202 -45.7588 L248.6606 -45.7588 248.8208 -44.7197 249.2202 -44.7197 c250.0552 -44.7197 251.2104 -44.5615 251.2104 -43.4023 c251.2104 -28.8115 L251.2104 -27.6152 250.0552 -27.4971 249.2202 -27.4971 c248.8208 -27.4971 248.6606 -26.498 249.2202 -26.498 c255.8003 -26.4219 L255.9575 -29.8877 L256.7544 -27.7354 258.7476 -26.0195 260.9805 -26.0195 c266.4453 -26.0195 267.7578 -29.4482 267.7578 -33.3574 c267.7578 -43.4023 L267.7578 -44.5615 269.2344 -44.7197 270.1094 -44.7197 c270.5098 -44.7197 270.668 -45.7588 270.1094 -45.7588 C260.9805 -45.7588 lf*U*u331.8164 -45.8369 m331.6953 -42.3672 L330.8965 -44.5215 328.666 -46.2744 326.4316 -46.2744 c320.9707 -46.2744 319.5352 -43.8037 319.6582 -38.8984 c319.8535 -28.9727 L319.8926 -27.8145 318.1797 -27.5771 317.3008 -27.5771 c316.9063 -27.5771 316.7441 -26.6182 317.3008 -26.6182 c324.5977 -26.458 L324.5977 -38.8984 L324.5977 -41.4521 324.0801 -45.1572 326.5938 -45.1572 c330.0996 -45.1572 331.4141 -40.9326 331.4141 -37.7021 c331.4141 -28.8496 L331.4141 -27.6943 329.623 -27.5771 328.7461 -27.5771 c328.3477 -27.5771 328.1855 -26.6182 328.7461 -26.6182 c336.4004 -26.458 L336.4004 -43.4854 L336.4004 -44.6406 337.9941 -44.7578 338.8711 -44.7578 c339.2695 -44.7578 339.3906 -45.7588 338.8711 -45.7588 C331.8164 -45.8369 lf*U*u349.0391 -46.3555 m346.6875 -46.3555 344.6543 -44.918 343.375 -44.918 c342.4219 -44.918 341.9824 -45.9541 y341.2246 -45.9541 L341.2246 -38.4199 L342.1387 -38.4199 L342.7754 -40.7334 345.5313 -45.3984 349 -45.3984 c351.1895 -45.3984 352.666 -43.3652 352.666 -42.0088 c352.666 -40.0137 350.5547 -39.2168 347.7227 -38.3818 c343.0566 -37.0225 340.9043 -36.1064 340.9043 -32.5195 c340.9043 -29.0508 344.293 -26.1396 347.4395 -26.1396 c349.875 -26.1396 350.4727 -27.1377 351.9473 -27.1377 c352.7031 -27.1377 353.7813 -26.2178 y354.2617 -26.2178 L354.2617 -32.1211 354.2617 -32.5996 v354.2617 -33.0752 353.3828 -32.958 353.2637 -32.5605 c352.8262 -31.2021 351.0703 -27.0557 347.3633 -27.0557 c344.1719 -27.0557 343.6563 -29.3311 343.6563 -30.4863 c343.6563 -32.082 345.1328 -32.6396 348.041 -33.3965 c352.8672 -34.6709 355.5 -35.9482 355.5 -39.9775 c355.5 -44.6406 351.3516 -46.3555 349.0391 -46.3555 cf*U*u364.9727 -46.5146 m362.5801 -46.5146 358.9922 -45.2803 359.1113 -40.2939 c359.3477 -27.5371 L356.5176 -27.5371 L356.5176 -26.4219 L359.3477 -26.4219 363.0586 -22.3115 363.0586 -19.6426 c364.3359 -19.6426 L364.3359 -26.4219 L368.6777 -26.4219 L368.6777 -27.5371 L364.3359 -27.5371 L364.3359 -42.248 L364.3359 -44.4795 364.7715 -45.1572 365.9688 -45.1572 c368.1211 -45.1572 368.6777 -41.6504 368.6777 -39.376 c369.7988 -39.376 l369.7988 -44.125 367.9648 -46.5146 364.9727 -46.5146 cf*U*u301.8398 -24.9844 m301.1191 -20.6387 297.6094 -18.8428 294.5391 -18.0889 c293.4629 -17.8467 293.4238 -18.0889 293.4238 -18.8428 c293.4238 -42.0488 L293.4238 -43.9229 295.5 -44.2793 297.6094 -44.2793 c297.9707 -44.2793 297.9707 -45.7588 297.6094 -45.7588 c293.6641 -45.7588 288.6406 -45.7588 283.377 -45.7588 c283.0215 -45.7588 283.0215 -44.2793 283.377 -44.2793 c285.4922 -44.2793 287.4844 -43.7646 287.4844 -42.0488 c287.4844 -18.8428 L287.4844 -18.0889 287.4063 -17.8467 286.3281 -18.0889 c283.2598 -18.8428 279.0352 -22.2734 278.3164 -26.6182 c278.1953 -27.2559 277.0801 -27.2559 277.0801 -26.6182 c277.0801 -25.9795 277.0801 -16.7715 y303.0723 -16.7715 L303.0723 -24.3457 303.0723 -24.9844 v303.0723 -25.6221 301.957 -25.6221 301.8398 -24.9844 cf313.5586 -32.2021 m312.2051 -32.1611 311.5273 -31.2021 311.5273 -29.7695 c311.5273 -27.8936 313.5195 -27.8936 313.5195 -27.1777 c313.5195 -26.6992 313 -26.7373 312.3633 -26.7373 c309.4512 -26.7373 308.4961 -32.2813 308.418 -36.3066 c308.2578 -43.4854 L308.2168 -44.6406 310.2109 -44.7197 311.0879 -44.7197 c311.4863 -44.7197 311.6465 -45.7588 311.0879 -45.7588 c300.7617 -45.7588 L300.2441 -45.7588 300.3594 -44.7197 300.7617 -44.7197 c301.6367 -44.7197 303.4316 -44.5615 303.4316 -43.4023 c303.4316 -28.7734 L303.4316 -27.6152 302.0801 -27.4561 301.1992 -27.4561 c300.8008 -27.4561 300.6406 -26.4219 301.1992 -26.4219 c308.1777 -26.4219 L308.1777 -29.8877 L308.8945 -27.4561 309.9277 -25.6611 312.5645 -25.6611 c315.3125 -25.6611 316.2305 -27.376 316.2305 -29.4092 c316.2305 -31.4434 315.0371 -32.2412 313.5586 -32.2021 cf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF