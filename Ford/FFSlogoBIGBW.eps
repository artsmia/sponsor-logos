%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: FFS logo BIG BW.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: R. Patrick Atherton%%CreationDate: 4/5/06%%BoundingBox: 0 0 106 146%%HiResBoundingBox: 0 0 105.2037 145.2295%%CropBox: 0 0 105.2037 145.2295%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: (PANTONE 2766 CVC)%%+ (PANTONE 121 CVC)%%CMYKCustomColor: 1 0.8700 0 0.3400 (PANTONE 2766 CVC)%%+ 0 0.0900 0.6900 0 (PANTONE 121 CVC)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2006-04-05T07:11:31-05:00</xap:CreateDate>
         <xap:ModifyDate>2006-04-05T11:51:37-05:00</xap:ModifyDate>
         <xap:MetadataDate>2006-04-05T11:51:37-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>188</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXyt+&#xA;Yf5/fmd5d8+65pFnd25srK6kitopLeNqR1qlWADE8T3OKaSq3/5ys/M6Irzh02fj1ElvIOXz4Sp+&#xA;GK0jh/zlz599Eg6TpRn7OEuAn/AetX/hsVpS/wChtvzH/wCrbo//ACJuv+ynFad/0Nt+Y/8A1bdH&#xA;/wCRN1/2U4rSrB/zlz59Un19J0qQfs+mlwlPnWZ64rSr/wBDd+c/+rLp3/Jf/qpitIK7/wCcsvzH&#xA;lJEFlpdsv7PGGZ2+ktMR+GK0k91/zkv+bswIj1OC26bxWtuen/GRJMVpLD+fn5uk/wDKRzf8irf/&#xA;AKp4rStD/wA5C/nDCpCeYmIJqedtaOfveFsVp9LfkH5q8yeaPIK6v5hvBe30l3NGkwjjipGnEKpW&#xA;JI1617Yoej4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXxD/zkHam2/N/zCtNne3lBpQH1LWJzT6SRXFI&#xA;SX8tvKOmebvM9v5eu76bT7i+5LZXEcKzoJERnPqKZIjSi7UOKqt95c8hWy6xBH5gvm1LTlkFvb3G&#xA;nxW8c80cgQosqXlyfE7oMVU7LyVa22gW3mHzPfPpen35YaXawwie8uxHs8iRs8KJECac3f5A4qj/&#xA;AC/5P8lea7tdK0TWbnTtcm+GwtdVhT0LmQ1pGtxAzemx7co6HxriqWaD5N9Xz1B5R8wvPpV5PdLp&#xA;5ZIlmaO5lcRx8lLoChLdVbpuMVZHaflf5X1Lzfe+TNO8w3EfmKzmuLSA3tksdpdXFsWVkWWO4leK&#xA;vptTkhr89sVYfo2h2snmmLQ9bllsQ1z9SnlhjWZ4pfU9LdSyAqrdaH5YqyXzL5P/AC88u+Yr3y7f&#xA;65qpu7F/RnvYtOt3h9TYkiM3ivxofGvtiqH8zflddab5cj81aJqUPmDyw7iKS/tleKSCQmnG5gf4&#xA;o9yB1PUeIqrbCMUvtn/nHW0Nt+UGhcvtTfWZiKg/aupeNKf5IGLF6TirsVdirsVdirsVdirsVdir&#xA;sVdirsVfHH/OUVt6P5qzSUp9YsraTr1opj/40xSEj/IT/wAm75c/4zS/9Q8mKlQ813v5fSP5ihg0&#xA;q+tddW4f6pdz3q3MTv8AWh6v7uO3t+H7vlxqW++hxVkX/ORVvx1fytdWgroc+gWi6Uy/3fBCxKrT&#xA;aoDqT8xioeVWb3SXcD2hYXSyKbcp9r1Aw4cffl0xV7n+Zc9rL/zk15d9LgbmO90ZNQMe6/WBNGSP&#xA;oQqMVCrpXl/RG/OfzPqejalJfea9MvNRvtO8v3Nv9VSe79SSsa3HqvzEZbkBxXmB+zvRQ8d0uW+m&#xA;862ct/zF9JqUb3YkBV/VacGTkppQ8q1GKU7/ADs/8mt5m/5jG/4iuKhkn5IXvpeWvzEhvSToh0KV&#xA;7hD9n6xRkgpXbm3JgvvipeS4pfeH5NwLB+VnlhF6Gwik6U3kHM/i2LFmWKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV8j/wDOWcKp+ZNi6g/vdJgZj7i4uF/UoxSHnv5b+cLLyd5rtfMNxpr6pJZBzbW63Atl&#xA;EjoY+Tt6UxYBWNBtviqU+Yb+x1TXLu+0+0ls4byV5hayzC4ZXkYsQHWOGoqdvhr7nFWTaL+Zir5Z&#xA;j8qeadLTzBoNu5ksAZWt7u0Y9fQuAH+Hf7DKR9GK0i/Lt1Z2N2uo+S/J+palqkZLWN5fsb+OB60W&#xA;RLe3t4UeRDurOxHL9nFUBYv5l8s+d9P8zebtC1Oe8F4t9FFdiWykuLlJBIrepLDIWHOlQF3xVNtW&#xA;03z55q86S+bfKvlbV9Nurif64JB6kypcFqlop/Rt1UV/ZNfnTFWYeYdE82XV/bed/Mn5czwajpfC&#xA;+1W9tNRt7S3uBbASepNbyRXDK1E+Li1T88UML8x+YvLPnrzNd64vlLVxfXjK1xBp1/HKjOAqbA2D&#xA;shYCp679sUr9ds/zCn8u/oTR/JOpaH5aLLc3MaWl3LJcuu6SXVy8Y9QJ+yAFUdaYq87+q3X1f6x6&#xA;L/V609bieFfDlSnbFX3h+Uf/AJLDyv8A9s22/wCTYxQy3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+W&#xA;f+cuUKecNBnIVkNiyhDXcpOxNaU2PLFIYjon5kjVdVt7CPyh5OtLm6cRRXFzp0oi9RzxWoWSRBUn&#xA;unEe2KswvNa/Nuy8wt5bh82+XtC1KN1ibTbSJLcB3UFU5fVDyLBhRQxr0ArhQxeT8/fPOt6hbC4/&#xA;Qtld0EKatPYrI0Y6qWd1uCoDeC03wJpPdft/zym8wny1e+e7dNfcL6elwXslm0hdQyIhSKCGrA7L&#xA;y36YoYQn5p/m95Xe70KTW7y2nt5mW5guuE8sci/CyrJMsjqNuitQ9cUo3RD+Zn5gWmp3Leb3MelQ&#xA;Pd6hb3t5dRiO2UEvKI0Royopvx39umKpXbr5l8lqnmvQfMtpNcSymyeawkkllq6+owlSeJBxPD9r&#xA;qenTZVk/lPzp+dPn2+m0vT/NwtLqKJphAzCy5RpQuYzbQhfh8KjFUsGufmHosEnmaw8+JqMthIiv&#xA;Gl5c3L8p+SgtBdxcHFK/aB+/FWO+ZfzN89+Z7P6lrusTX1pzWX0HCKnNQQrcUVRUcjitPs78o/8A&#xA;yWHlf/tm23/JsYoZbirsVdirsVdirsVdirsVdirsVdirsVfLv/OX7ofMPl5ABzFpMWau5BlFBT6D&#xA;ikPEfLP/ACkmk/8AMZb/APJ1cVL1H84dE8nXv5p+ZGvvMMlhegNMbdrIvGZIrRXSITCXrJxAB4dT&#xA;irxzFL6L/MjyPfa/+f4ls760R4BZ3clt6w+t+naxo7iKH7TuVX4QOvthYvFfzD8ySeZfO2sa49u1&#xA;oby4YrbP9uNUAjVX/wAoKg5e+BLN/wAhkt3tPP6XMhht28s3ommVfUZEK0ZglV5EDelRXFSwXXdI&#xA;8r2ml2l3pGtvqVzPNLHcWklqbZ4UjVCrn95KGDlyB8jirLf+cdwp/M22Dkqhs77kwFSB9WepptXF&#xA;SxbVNF8ow6FJf6Zr8l9fpcxQDT5bT6s3pSJIzTBvVl5KpjCmndhirHcUvvP8n5Ek/K/yuyGoGnQK&#xA;T7qvE/iMWLL8VdirsVdirsVdirsVdirsVdirsVdir5O/5y4uOXn7Sren93pSPyr3e4mFPo4YpDyD&#xA;y3PY2/mDTrm/laGzt7iOaeSNPUcLGwc8UqtSaU64qyH83PMHl7zJ53vvMGiTzSW+olHeG4i9J42S&#xA;NIyNmYMDxqMVDErKO1ku4ku5jBbMwE0yp6jKvchKryPtXFXpH5necLfzN+YqebfJU16bsCBkT0Ck&#xA;0MsChQy8DIGB4/wpiq38w9S8reZobbXNRs73y35vnXjqsTWpNleOop68ZLI6O37Q4n+JVRX5KtFa&#xA;WXmaO7sdWuf09pk2kwfoywkvOIuF+KUlSo+Hsvf2xUoPzB+Ud9pHlm6u4dM1m7vkkEslxcWBs7a2&#xA;tIUdpndjLLyZjxp0CgH2xW0H+SvmTy75b83tqutm4aJbaa3ggtIvVld51KEirKBxUnxxUqd/5J0W&#xA;y0HUby3XWtQuiETTzJpclpBGRIrySzS+pKDSFWXiO5r2xW2C4pfbf/OO98bv8odCJ+3ALiBv+edz&#xA;IF7n9mmLF6PirsVdirsVdirsVdirsVdirsVdirsVfHv/ADlJPy/NShQEQ2NstDWjCrvvSh/apikL&#xA;dG1nT9Xsjqlj+XOgohnFpFPdXbwwy3RUN6MUU08Yd+JrxHTbxFShDr+ZX5hR+XJPMGi6VoOiaNBO&#xA;to01haWCOs7gsqCKdppmYqGP2TtU+OBNI/XfzW80XVvpOrS+UvLXqalyi0++eGC7nZlYK59P1W9I&#xA;8m35RjChK7v8zPzvm8wDyuNQfS9TM4tE02BLXT1WZvhVOYWJRyrsS++1D0wJRei+ffzumt9VsYb+&#xA;2vm0WQy391qM2nztbGoh5JLduU4B9qpUVPviqU+bPOf52LZw3ur67e/o68YrDd2N1GbV3UVMfqWL&#xA;elyAO6Vr7YqlXl/zd+ZGj20/mawvbmWwSQafdy3J+swM1wjP6UkU3NW5LHXpirIbz80/zlg8vW+t&#xA;wXlvp+jXczWqT6fDYRkzqvJkkEKmaNuO9GpUb4rSvpfmf897PX3nbXJnmsLVby8S81CGSzhgmA4N&#xA;cJ6piVj6i8Ub4+m2Ksa87/mD5/1OOby7r9zAtrbTBnsbWC0SISRghSslsnxj4jQhyN8VfRP/ADil&#xA;eif8s54K/FaalPHTbo0cUgP/AA+KC9lxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvkD/AJyrt/S/M+KT&#xA;jx9fTbeSv81JJY6/8JTFISfyBZSXvlk6R5g0t5vKGo3E81vr0QPLTL2GECSZnAI9MoqeojdVAI3G&#xA;KlLtCt7jV/yq1fR9Nia61O21iz1F7OIF5mtvq1xCzoi1ZwjuvKnQGpxVUayurObyLpFxG0eqQ3DS&#xA;3FkQfWiE16OCyJ9pHIj5cTvSh74UMrS8tvNPnT9A+YZlsPN2h6kV0PVpaoLqGK55LZXDGnxBf955&#xA;D/qntirGfJml397H+YjWkElwV0qWPhErOxZ9RtnAAUH9mJj9GBKjp8Oo6N+XHmHT9Yhkt21yaxGi&#xA;2E6ssrzwTF5biKIjlxWKsZelCWA3psqyzSLCzt7KP8qr6GeDV9W01pnWTisSarOFvbbktOfMJFFA&#xA;d9qkHChj/wCUMd2+r6x5b1HT2u7J7Oa9uNNnR6JeaapuLdmQUYHmpiYbVVyuBJQfkbUPMc99rmo3&#xA;WjyeZ9LvSkXmeyCs0zC4lLpKnAc45EkjqrgbHbvirGPNmmadpfmbVNO024N1YWlzLDbTtTkyIxA5&#xA;U2JHQkbHtir6d/5xJtWj/L7Urhqj19UkCjsVSCEVH0kjFBe34q7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXyl/wA5dW4Xzxo9zQ1k0wR1/Z/d3Ep29/3m+KQ8MEsojaMOwjYgsgJ4kjpUYpaR3R1dGKupBVga&#xA;EEdCDirWKtxxySSLHGpeRyFRFFSSdgAB1JxV6Dp/5Q+Yrazi1fzLqVp5QtZfit21OVo7uQEbmK2j&#xA;DTfPlxxRalrf5Q+bltH1fR5oPNml9ZNQ0mU3TJQf7ti2mU0G/wAO1MVtgTKVJVhRhsQeoOKXYquj&#xA;llj5em7JyUq3EkVU9Qadjiq3FX2X/wA4xWvo/lPZyUp9ZurqX50k9P8A5l4sXq+KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV8vf85fhP0/5dIJ9T6pPyHanqLT+OKQ+fsUuVSxCqKsdgB1JxV6BpX5Q38WnR&#xA;615zv4vKmhuOUTXYLXs42NLe0X94xp/NTx6YotEt+ZXlzysrW/5daQLW6AKN5m1MJcag1RQmFKGG&#xA;AH2BxWmG3cXmzX7uTUbqO+1S6mo0l06yzswPT4qNt4YqidHtPPui3qXuk2+p2F2n2ZreOeNvkSoF&#xA;R7HbFWWy/mRpGulbb8y/Lou7lgKa/p6LY6mAducgAWGenYMoxVQuPyjj1iB778vtYg8y26gu+mNS&#xA;21SJR15W0hHMD+ZDv2GK28+u7O7srmS1vIJLa6hPGWCZWjkRvBlYAg/PFKlir7j/ACEtltvyi8uR&#xA;r0aGWXrXeW4kkP8AxLFiz/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+Wv8AnL10PmbQIwfjWykYj2aW&#xA;g/4icUh4FilPvI3mO48veabDU4br6kI5VE90sEVy8cRYeoyRzBl5cenQ++KHu2ufmb5ftJrefWta&#xA;uJLy8t4riC5by7ZiaW2kBMb85nYNGw+zTCikLd/m1o2mRW87655hs7e7j9SyFroek2vNCSpliklX&#xA;4lqCCVbritIC/wDzb0MRw3N35i89rFcgyWxCadaJKAeJKOlQQD4Kd8C0pP8AmloUdnFfvq/5gJZT&#xA;u0cF011ZiJ3joXVXMXFivIVAO2Ko2D839EktBKfNXmdbBpDCzappmmXsDOQCU5AHdVO4rWhwrTD/&#xA;ADBa/l3qd1d+aLTzfeWV9yrGYdGe3hadYvgjiaCVUiYhN/nXFXmmoahfajey31/cSXV5O3Oe4mYv&#xA;I7eLMaknAyQ+Kvt3/nHq59f8n/LzGnJFuYyB29O7lUV96AHFi9FxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KvlT/AJy7/wCUz0X/ALZ3/M+TFIeEYpdir0X80LW5vpvIFtbx+rd3XljTIYkFAXczTRRrU08F&#xA;XfFCv5osY9X8j+U7Czu0uNQ0O21COZxFcJDcATvcenaztEsUrQxD4hy3/Z5YVQfncs/5WflxKTyp&#xA;Fq0Rcmpql9UL/sVdcCt6iRcfkTo0nX6lr95bGvUerbRS0Ht3xVoAyfkE1Af9G81AsRvtNp9KnwoY&#xA;vxxV0IL/AJB3QXcx+aIHkA6qp0+VQT7E7Yq8/wAUuxV9lf8AOMNx6v5T2ibfuLq6j267yc9/f48W&#xA;L1jFXYq7FXYq7FXYq7FXYq7FXYq7FXYq+Wv+cvYQPM+gT0NXspEr2+CWu3/B4pDwLFLsVe/N5SuN&#xA;a1n8vzpUX6S12w8uaXOlmJBDbWyxu9ws95NxduB9ZQsaDk2+4FORYs78xflp5ytfy28paTbQ22rX&#xA;nliY3N9BBIY5JlVJEVbZ5EoSFl3DUrQYq8S/MeytrP8ALHyDBa3H1m3E2stHKV4PRprduEiVPCRC&#xA;eLip+IGhI3wJCCk/8kHB/wCBVN/3TosVZF+V8V6fJUejtWxl8xeYtPg0+9I4zJG0cy3FzbBupjVe&#xA;CuBQM3UHcFBT38zLJ7fyp550mzvp9V0TQ77ShDf3riadbpg63EHrqAZPT9Ufa+zUjFXgOBk7FX19&#xA;/wA4p+p/yrGbkRx/SVxwpWtPTi6+9a4sXsmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV81f85iQgXPlS&#xA;au7pfJx8OBtzX/h8Uh85YpR2g6cup63YaczFEvLiKB5BuVWRwrN/sQa4ofUX5O+cPJei2Gmm4uF/&#xA;xH54vCYrOOjtbW0BNvZQSHbhHHEgVK7mu1Rvih695o8yaZ5a0G81zU2ZbGyUPL6Y5OeTBFVVqKlm&#xA;YAYq+PvO1z5Z8w6nqNpaaiNMsrTULzVraO8ikSQRX0cTXNusSqxE0U8B4xmgPKvKmFUxvbDy5o35&#xA;aroWqzXIvLHzB9euNGvYPqN5L61hGsURVZJhHG9KtIX2Wv7VAVXrv5IaX+XmpaRda2YoNX1nT50a&#xA;81m5tVWG3kijDxx6f6g5RQ26gBSAp2rttQK86/Mqfy5DovmGLynM6eV9c0jT9bhsyz+kt6+q/V5H&#xA;RH3jJSI8l8fkMKvCcDJ2KvsH/nFdGX8riSKB9QuCp8RxjH6xixew4q7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXzf/wA5h3PweVbYEbm+kcdxT0FX9bYpD5vhhlmlSGJS8sjBI0G5LMaAD5nFL27y55e822Fp&#xA;aqPyjFxf2sYifUJXuYZJW4cGdl5qnxD7W1MLFGP5e8waN5bkt7ryXF5YgS8sLi21cXYnvfrQv7eO&#xA;NVYSF+KRu/Hai/M7qvafz2SJvyn8wNIaGKKKWJgKkSxzxvGR/swMCvLdd0jRNV87203mqHQ76PUL&#xA;9vLstlpU8f1yGK7cNYXEiRNzS4ieEpIT+waU2OFUd+ZnkzycPzR02e6QXDWOmyavrzahKzQyW1rE&#xA;ILWMIvHk3KBnZR9qh5bHFWc/ld5auW/Kqb60oi1LzUl3qV5xHEB9RU+mABTiFiKCnbArw/yL5Y83&#xA;xeT0vLTTNI8xzXZFta6Rq8sIFvb2k9w037qSa2PI3Mzcasdg3iuEqx78z/LXnWOwttU1jyvo3l2x&#xA;tW9AfodrYeo8xqPVWK4uZGpw2J2GBLzbFL7I/wCcXv8AyVNv/wAxlz/xIYsXrWKuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV8u/8AOX1xy8xeXrfl/d2k0nHw9SUCv0+nikPDdEOjjVbY6y1ymmBq3L2QQ3AU&#xA;A09MSEJy5U6nFXoMnmX8oQQXl836iyig+s3lrEu+5ICCQjw+0cVp1n5g/LoabrLeWtAutOvbe2hu&#xA;Te3l8JgUt7+2k9MRcFBMjKo67fKuFXoP5jfnjo/mGHX/ACxK0K6KL3TRY3cXKRri2juEe7bbmrhW&#xA;j+HhTbxxQxLVvONpp95DqSeVLTT9Wg8wwzmzguJpZL97OScTcql2UJccOJAozHo3EjFURrH5rw+Z&#xA;rXV/NGtaeLZ7qzj8senan1fQWdbqf61SQx1b4uISu4DVI2xVIfOn5p/mGeOjjzJJb2FvZ25t7ewT&#xA;6mOLolInKH1a+masHc+FBikK/mDzZ+WlpeLouoeSHvX0jla/WI9WuIS7cy8rOhjk+Mys3L4vbtio&#xA;Y9retflXPpVxFo/lu/stSdQLa6mv/WjRuQqWj9NeW1R1wKwzFL7d/wCcfLD6n+UWgKftTJPO3/PW&#xA;4kZf+FIxYvRcVdirsVdirsVdirsVdirsVdirsVdir5K/5y1uvU/MTToA1Vg0qKq06O9xOTv7rxxS&#xA;HiWKXpXkz8tozplp5m1UGSzKyzfVpI6WyrHFI6PPLyqwDCN3jCisbV5bEYWJLHNN0jzxpCtrWl29&#xA;za2skR/0pQBG0Eqq/FwSylSjKxVq9jgSrXGpfmVbvfq13fWI05kTUIoJTaxwtIeKepHEY0UsdumK&#xA;oWe/87+WuNncvNZOXeWFZlRnjk5UeSJ3DNFJyG7IQ2KpZqfmHXdUjSPUtQuLxIyWRZpGccjsWPIm&#xA;rEftHfFVVPM+tIqqssYKBOMnoQepWJeEbepw58kXZWrUdjitJWzMzFmJZmNWY7kk9zilrFXYq+//&#xA;AMt7A6f+X3luzYUeHTbQSD/LMKl+oH7ROLFkeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV8df85SSO35&#xA;qSKxqEsbZUHgKM36ycUh5FilPLnTPNl1NoumXAuJ21GKH9C27uWVopHaOIRgniBz5DFCZcLt/I8G&#xA;grYXr3Z11wk0cHO3eV4Eh+rpIG+Kaq14AdMVTjW/MDa6nmc2mn3jWus31rBpky2MKH1xIX9C4lja&#xA;vqsv2V5OThQgPP0h8y61JqeiWN3PDJcG3krp627pcTMTHbytC0olmJDAV+IgD3oEhis2h61BefUp&#xA;7C4ivODS/VpInST041Z3fgwDcVVGJPscVXQeX9en02TVINNupdMi5erfJBI0CcKcuUoXgKchWp74&#xA;q3L5d1+GzW9l026js3KBbhoZAh9UVj+Iinxj7P8AN2xVa+g64lzdWr6dcrc2MZmvoDDIHgjWhLyq&#xA;RVFHIbttviq2+0XWNPt7W5vrKe1t75S9nNNGyJKoAJMbMAG2dTt2IPcYq+/fJdwLnydoVyCGE+nW&#xA;kgZeh5wI1R9+KE5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KvjD/AJyY/wDJual/xgtf+TC4pDzu60LV&#xA;raO3kltyUurb67CYysv+j8ivqN6ZbgAykHlSmKvTIvNMiQ6XFY6be3uoWEFr/he8jtpDxj+qxwam&#xA;VQqC6h4XkiK14s5Y0NcKFSKeOJoNSt7TUf0Ta+am8w/XFsrgBdPUI7Nz4lBJH6ZU/FSv7VN8VU7X&#xA;UtQ1K6s7i70PUDrtvrGm32t3drZytFcQWizFLn0lQMk8yy/FsA9A2xLYqhbvVpr0ael7pF7H5jm1&#xA;m2lvr5LaUJqEem+ur3Ai4h/rC+qfWAG9KmjcsVR8N5JoWu3vm+x0m5vxMEWxR9Nube3aC6uS8xZz&#xA;UFpIGEda0bm3tyVSTXdTh8raBdaDpyTwz3l7dyRrf2ksEw0y8hiiWglpRz6DxuRX/JbrRSo6v5t0&#xA;N9S8z6xZ3c0jeaIHiGmyRlRbtcTJK4lepRo4OFIeFSfh2WlMVV9Q8x+Vf0/5p1O21B5k1+wu4YEM&#xA;DoY5JXieNWJr14NUjYbeOyhIfOWs6RqdlootpWutTtLb6vfXzRmH1Iowq2yOpZ+UsSAozjqoTwwJ&#xA;D7O/KW4+sflj5XkqGpplrHUf8VRCOn0ccUMsxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvin/nJCd5Pz&#xA;h1tGAAhS0RaeBtIn3+l8UhQ03zfpulyabe2Wow/W7Py81k0ckMzobk3LStbOpj4uskcnFv2eor4l&#xA;FK1l5s8mnzJptxbu2maANLktdT0mdJZlpcXcslzaRyRVenGX1IZCNiFDdCcUscGs2B8l6lZreyrq&#xA;UmqQT20UnMyPaLbzwvykVSlf3yinLccsCsnOr6enma/1f6xKdDvtBl0+2vWguRD9cm0kWPD+7/38&#xA;vUD7I+jChBWGqx6Za6Bfas1xZ6pokt7cC2uoJuV20pEkRjcrx/vDSTmRQbivTFUumEzeQtHs/VmG&#xA;palqV1cRRlJj6tq8cVsGV1Qh6S2zqygk9NsCUT+ZsK6z50v7nRIHulnmuLl4re2vEkVbi5lmUzpc&#xA;DkJD6tDwATw74qGISaRq0QmaWynQW1PrBaJwI+QBXnUfDUHauKoTFLsVfcv5D3AuPyj8tyBg3GCS&#xA;Oo/4qnkjp9HHFiz3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+I/+ciJEk/OPzCyGoBtVJ91soVP4jFI&#xA;ec4pdirsVei6l5q0RtQ17VINTMtlq+lizt9E9OUPG5jRIonDIIAlqy80ZXPQU3JoWKUef9b07W/M&#xA;SrZ3MTWQZAt/W79Mh4okZnilBZeBQ8vTj38DtikMiu/NHlK+W10430Nrb+V9RtH0G+9K7P1qzASK&#xA;6LDg7RsTAk/HioqX25HdQirjztoN15w0LV115oLPTbiS2vIZFun5W6XM1xFOjLFyeMiegRwGQ7Ac&#xA;d8VpjFt5gtpPI2r6dqmqm4vHnWXTYlNybj1EEMJ5uyCJreSBKcXfkpjWi4EsMxS7FX2l/wA41XHq&#xA;/lDpMdQfq8t3HQdq3LyUP/B4sXqGKuxV2KuxV2KuxV2KuxV2KuxV2KuxVL5vLnl6a5kuptLtJLqa&#xA;nqzvBE0j0FByYrU/TiqtDpOlQhVhs4IghqgSNFoa12oNt8VX3dhY3ihbu2iuFHRZUVx9zA4qx6//&#xA;ACt/Li/JN15Z01nPV1tYo3PTqyKrdvHFUin/AOcefyeml9R/Lyg0oVS5u0X7kmUYqqw/kD+UMKBE&#xA;8uREDoXmuXP3vKxxVGxfkz+VkTcl8sWJNKfHHzH3MSMVWt+Sv5VMxJ8s2VSamiED7gcVQ7fkP+UZ&#xA;JJ8twVJrs84H3CTFWh+Qv5RgU/w3B/yMn/6qYqrR/kh+VEaBF8tWhA7sHY/ezE4qyfQfL2ieX9PG&#xA;naNZx2NirM6wRAhQzbsd69cVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULf6rpmnqGvrqK2DBmQ&#xA;SuqlglOXEE1alR0xVI5vPmniGSe0sry7tVXkL1IeFt0qeUshTgF/aLDbDSpO35i3dxbLd20+j20E&#xA;YpcRtdi+dm6/uzZczQb9UxpCRXP5hazLMbiLW44ICarbxWF1uKfZDXNrHX/gxiq5fzK1RR8V9I58&#xA;RZQ0/GaM/hjSqU35g61KCE1wWlN+T2Vajw/dR3R/D6caVN9L/MLUruFYYdQ0yWePeSS6S8tfUUdQ&#xA;PWht4wx7GtPbGlTnTvzDt7yeSJLF7kR0qdOmg1ArUb+qtuzGPfpXrjSU5sPNOhXpEcd2kdx8Ia2m&#xA;Ppyq7mgQq1Pi5Gm1d8CprirsVdirsVdirsVdirsVdirsVdirsVdirsVYj5w84/o6WTT7OaK3uYoT&#xA;Pd30xrHboKcQyKsjFpCwVRxNSygVJ2KvLdW82+teC4slJnBDyaneqk1xI1FJCwMHt4UBBAFHalKM&#xA;tMKEk1DVJNQuhd380l7cKzPFJcu0xjLmrCL1CwiX/JSgxV6BBoPmG20PQLvy0YI575JJ9W1YhGMS&#xA;UBjTnNzWJAkj+qUXkSoofEKkOh+ZtUgN1rbeYL79A20vordySPK11Ix/dxWkFy0ic5VXmKj4E+J6&#xA;dMVVvMXnDWtO1pjq+k6NeLecp3shE6yxIksluYRecUYurwNyf02DHdfhIAVWRedPIH1b1n8sML+l&#xA;fQF3K0PLw9Q0NP8AnnirHL/zHLqF3Jcvb29mrGkNpaIEjjjHRa0Bkb+Z26nsBQAqrWFjeatHcTQW&#xA;6zQ6dGbq5nkMaRwpH8XNnkKqpFKjeuxPbFURH5p1JlhS5n+vxQsW43tZ3NTWn1gkXS0O6hJQPYjb&#xA;FWb+XfPxgDSW8hfSrURG8024YNcW8UgSMvbyUHrQxSUXs2/xKOSsQr1C2uIbm3iuIW5wzIskbUIq&#xA;rCoNDQ9DgSqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXiPney1GHUPM1hGWhuLyeDUbW2UOBd28Ky+u&#xA;kZICyMhmWVlFfsn+XCh5ZJqnvhVP/KcOkT6ZrWvausl1Z6JHCy6fExjNxNcOUiV5FDMkfJfjZRUA&#xA;17UIVb5Ni80+adVTTdOuXs9OjkE9zES0+n26luVTbXBlilNR+7EgLEitRQsFLKbzXZPNWp6rcRa1&#xA;fWvkPynbUkktLj05r11JrRg8SyNcOhEVSUAC8QvPFUtlj8o615a1DzleNNpVnHqsdsyPcPd3clrB&#xA;ZqqwW/qf3lzO5T+8PFF/a4oaqsum8oeSbGx03WdU8vXcZvlWGbQrOS6vJIGkWWaOVwoS4L8YghUA&#xA;KpJ60rirFDoeg+Vb/TNK8x2MuseYdZaMx6XDcGKK1t5pFjR5JY1rJPzDqqqSho2/QlVd+Yt9B5c0&#xA;8eQdFc3NtAV1DzHdsvJ2kZ0a2jO7CML+6ZqAV+Ch3cFVgaaofHChlPk68aF7zW7iEy6ZpttMtxUM&#xA;Q8l1E1tDCCob4pJJQPALUnYYFe++QraS38naTHKgjcwByqkEfvCXrUbfFyrgKU+xV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KpP5n8raZ5jsBa3vOOSJhLaXcLcJoJlIZJYn/AGWUgUOKvIfOn5Ta9Jdy3txZ&#xA;rqUbcgL3SSIb5mYtxlurWQehOxPEsY2i/aJJ2oVYN5au7/y7Lepb3NlJHdRxm50nV/U0+4ljIYIo&#xA;My+hybma8ZHWmKFXzRrPn640yTR7Xy+dH0Z0rNHp6G4V0arOPXiVYvTcH4gq1PdqEjFUn0X8w7/S&#xA;NIuPL13plve6PMhSbT2rbM0hbkZpJAsrtJ0HQUCrxpx3UqE3nySe601JtOQ6DpBL2Hl9J2WAOW5G&#xA;SaR45GmYsd+S9Nu7clUuvvNvmS+1C/1GbUZ4LrVSDqAtJZII5FVeCxssbLzRE+BQ9dutd8VZ1Zfm&#xA;X5i1PW7TX4vK5vNStoRay38LTzfuvj5CFBHxhYu5NSWPGq964qk2rQa4LeXT7uS38vWF5I2oXa31&#xA;4sl5eyliwkuAgM8nFiSkaxcQ3xGrbhVHeVPy+vNXR/qWn32p3CuESaRfqGnAqvNucslbhxRl+H04&#xA;2PYjrir2ryn+Vi2k2n6j5hmiub7TUMVhp1oCunWqNXn6SSAyO0hPJ5JCXY0qTQYFeg4q7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYqh7zTtPvVC3ltFcBQwX1UV6BxRqVG1R1pirC9V/I/8t9RWGmli&#xA;yeBuaS2jGN61rux5dO3hiqhd/kl5fm4i31rXbFFpxjttRlCgAUpSQSbY2qg/5JwV/d+a9dVewa5R&#xA;j9/BcNquH5HaWzq8vmfzE5Xqq3/pqfoSMfrwKrP+RXkOe7gub9bzUmg6JfXMlwrHbdudT27HvirJ&#xA;9G8k+U9Fr+jNKt7Yl/VDKgZg/ipbkV6dsVTvFXYq7FXYq7FXYq7FXYq7FXlmkL+YA846/pt15xuL&#xA;qz0C3srsRtY2Cev9aWdmRykKsoHoChU13xVbpX5sxXvkv0r6bUNN1u38uwa1cat9UgImXgi3E9rG&#xA;59N+MrUoyKu+22Ksoh/MvR5/N0vlqCw1CaWCf6pcalHbhrKK49P1fTkkDc1+E/aKcffFXeavzK0b&#xA;y3qFxY3VlfXctpZJqd49pEkiQ2jSvEZXLOmyGMlgKmnSuKqd7+afl60vtYt3tr17bQoEuNR1GOEN&#xA;bIJYEuIkDc+TPIkg4gL160xVT/5WroyWd9Jd6bqNnqFjNaW76NNFF9cklv242qxKkrxN6pBArIOh&#xA;rTFVk35t6GkMRi0zU7i8nv7jS4tOht0Nybq0j9SVeJkVaBf2uVO/TfFUTb/mbo83miPy89hqFvLN&#xA;O9nDfTwolq9zFCZniVvU9QkKD8XDjUUriqTD89/K72guotL1iWJ7I6lDwtB+8tEfhLKhMgWkTfbq&#xA;R2pXFWT69r8ENpoN1HdzW0OqX9pDEYoo5DKLgFlikEn2EcfaZfiHbFUF5R/MvR/NOoS2mn2GoRQo&#xA;srwajcW4S0nEMvov6cqs/wAXL9lwrU3piqGvvzc0Cz1Z9MNhqU8qXz6Us0NuHhe9WJZVgV+Y+J0e&#xA;q18DWmKqU/5x6BHoGm61Fpeq3EGopdS+hHboJbdLFzHcG59SRI4+LqVpzJJ6VxVLvzH/ADYj0/y1&#xA;qn+HVun1KHTIdRTUYYI5ILVbtqWxnEpPxSAGg9NqDc0xVkF1+ZmiW3mE6M1reOkd7Bpk2qJGhs47&#xA;25VWigZy4k5HmoqsZUE7nFUR5o8+ad5evrfT5bG91C9ubee7it7GJJGMVrx9Unm8YFA4779OtBiq&#xA;V335w+WLZEnhtr2+sRZW2p3t9axI0Npa3lfRe45SI4JCklUViAOmKolPzQ0OTzTP5fistQl+qym3&#xA;utVjtw9lFMIvW4PIrF1+E7MU4++KpP8A8rd0jWPL91f2UeraPbxmzkt9Tks4mWaKe8jtwYObSRsH&#xA;ZuDBqMqnkBUYqqeWfzIlOvahpGtRXTiXXrzS9L1H0Y1tFMSCSK2LoVcuVViGKH3bFUD5a/N9LbyV&#xA;ot3rcN7q2qzaUdW1aayhhpBarIyNczLygULVTtGCdj8OKsh8/wDmq80nTdA1DS3kkhv9VsoJUgjW&#xA;WSe2nDExorjYvQUOx9xirekfmj5c1G4jtniurCdo72SSO8jVPTfTnCXULlHceogYNsSOO9cVTT/F&#xA;+n/4N/xb9Xuf0d9T/SHo8B9Y9Dh6lfT5Urw+KnLFUPbeVbiHzN5k1czoY9ctbO2iiAPKM2iTqzMe&#xA;/L1xSnhirF778ptRuNHtbBb+FXg8pv5ZLlWoZmMH77/U/cHbrviqtL+W2vzfmRB5ofULRLa3uXnE&#xA;8MBhvpLZoRGtjK0RSOSJW+Lm4Z+3bFUF518teaNc8/6xZaU8NrZ6p5Yh067vLmGR0CzXdysgidCq&#xA;+qsb/ZPiDt3VTS5/K+SbTvN+npfCGPzClollKFLNAbK0it0ZwSOXxwBtj0xVI/NHlPzRZ6drHmnU&#xA;JRc69JdaRdQW2kW0lxGg0qQleUTuksiv6zmTiahelablW/y68s65qlxY+Zb9Xszba/q2p+jcW8ls&#xA;88N7am2R44ZCzxrybkOZrxxVF2n5S6lD57TzHJc2MkcWr3GqJObdv0g8NxC8YtnuK/3cLP8AAtOn&#xA;ywKiNI/K3ULDRNP0976J3s/Lt/oTOFYBpL2SJ1lH+Svo7jrirINW8o3N9pfluzSdEbQ72yu5nINJ&#xA;FtEKsq+Bau1cVSLyP+XGv6F5sutcv9QtXSe3eCdLGA2312V5RIt3dRKRAsyqOP7tN6k1xVX/AOVc&#xA;Xv6R+tfXIuP+Kf8AEfHi1fS+pfVPR/1+XxV6Yqkut/k3qmo2On2n12ymhtjrPrQXtu88QOq3Mk8U&#xA;8KcgongEnEMfnires/lJ5kudLv8ATtP1Ozhi1nRtP0rU2mikdll05WVXhKso4yCQg8ht1wqibr8p&#xA;9Rbz0+tW0+nrptxqkGsTvNaia+V4UjDQRPJyRUd4g3MUZf2cCq/nnS/M15+YWjPoXpRSfojUoXub&#xA;qKSS3X1ZLcBWaMji37S+PGnuCqXT/k7rltplxo2j6pbpp2raRY6Nq8lxE7TKtkHQzW/E8ayJKw4t&#xA;061wKjJvyv8AMD+fItfi1S2tbaCV3huoIDHfm3aARR2UpTjDNFE/xBpQznpWmFUqsfyY8xraatDc&#xA;6lYwHURp/KGxhkht5prK8jupLyaEH00mlWPjSJQu+Kp5b/lz5gXzBHNNqFt+hU1+fzF6SRyC5Mkk&#xA;TRRQli3plfjLMaYFY9c/kbrK6VpNvZ3mmy3lrpK6NdT31s1wiKk7zLPBGx4l6SuvGQUOFWeeavKW&#xA;o6npOiWmm3UMFzo19aXqSzxkxuLRSOJjjKU5V7EUwKwTzh+XGsHyzYWbTmXzBq+vzS313Yxv6UUO&#xA;qpJDep8XIrEtrtybuB3OFXr31G0+pfUfSX6n6XoehT4fT48eFPDjtgVWxV2KvPNU83+b3896loGm&#xA;XuiWFlpsNlLXU0nM8xu/U5CMpPEvw+l/L3GKp9bfmR5LudQmsIdQ5XEH1ipMM6xObPe4EMzRiKYx&#xA;ftCNmOKoaH81/Ic1ha38WoSPa3shitHFpd8pSiCR2RPR5siIau9OK/tEHFUtg8/a7P8Ak3H5zSG1&#xA;/TMtktysBWT6t6rPwAK8+fH/AGeKpF5t/ObWdM/LLR/MOnWds/mHUGeO5spw7QwvZpIb48VdWpG8&#xA;JUfH3HXFWdah+Ynk/T9aOi3d+U1BZIoXRYJ3jSWccoYpJkjaFHkBHFWcE1HjiqT6R+cnlC+sry7n&#xA;NzZpbag+mxRvaXbSzuGcIYolh5szCJmZFBZP2+OKpm35m+SQNLK6g0h1pXbTUitrmVpRFIIpPhji&#xA;ZkKOaMHApvXocVQfmzX/ADa3mmx8r+WGs7a7nsbjUri9vo5JkEcEscKxokbxbs8u7E7Dtiq5fzGs&#xA;tF0fTj52H6H16e2Nxf2MEct2kKo3B5We2FwscXLoztTtXFVe/wDzT8g6fqUmm3erLFdxPFE6+lOy&#xA;B7iETwr6ioYz6kbArRt+g32xV0f5peRZdNtdRi1Fpba8lmt7YR2108rTW68pY/QWIyh1UV4la4q1&#xA;qP5q+QNOtrC5udWX0NTtzeWbxQzzcrdftSsIo3MaL3L0p36Yqq6n+ZnkjS9U/Rd9qYhvRLbwFfRn&#xA;dA92vKANKiNGA46MWpiqKtfPHle6hsJYL3mup3cun2Q9KYO9zB6nqxlCgZOHovVnAG3XcYqxnVPN&#xA;/m9/PepaBpl7olhZabDZS11NJzPMbv1OQjKTxL8Ppfy9xirJv8ceV/Ts5PrtVv5byC0Iim+OTTvV&#xA;N0tOG3p/V5Ov2qfDWoxVA6f+ankHUIrqW11ZTHZWS6ncO8U8QW0bpKDIichXYhakHaldsVXeUvO0&#xA;PmTW9at7MhtO09LNrd2imgmLXKO7iVJgjD7IK/ANj3xVlOKuxV2KuxV2KsPtfJMMvn7X9d1Wwtbu&#xA;1u4NOj02SZEldHthN6xAYEpvInTr9GKsSsfy+85h9N0y5t7VNP0GTW57a/SerXX6TS4SBPR4L6ZX&#xA;61VyWPTvXCqaxeTvNOm2XkG5sLa2udQ8uaY+mX9pLN6UYa4tYI2lDhH5KktvuAKkHbAqrY+Sddg/&#xA;Je38pOkf6Yis0gZA49PmsoY/H8sKsd8xflF5jvLrzn9XMMlje28/+Gbdn4+nPqbxS35bsg9S32P+&#xA;UcVTTXPI3m241nWbG1gt20XXtX07VZdTM5Sa3Sz9AyxiHhVnLWvwFW774qh4fJfniw1VdRttPtrl&#xA;tL8xajq9nG11wF1a6qs6OP7s+lJCJVPxVB3+lVG+SvIHmHSdc0TUr9IQYbfV31BIpOSxT6neJcpH&#xA;HUKWCqCpbxxVNvNelea7Xzlp3mny/Yw6qYtPudMu7GW4FqwE0sU0cqOyupAaKjDrTpXArHdV8o/m&#xA;ZIst7JHY6rrGs+XW0TU39X6tFBOZpZFlVfTb1I1W5KkChPH3wqrRflrrcE9+gEU8L6t5dureV2HJ&#xA;4NJitY7hmBrRv3D0HfFUJPo/mLQfNWmy29nDd3d7r+tahaWrTCISQT2e37wK4R9idxiqWav+VHnu&#xA;Xy1YaNGIbmNdGu7WaNL64tIob+4leYOViC/WF4yemFk+HuRTFU/1nyB5kvrXzKscUQk1V9Ae1UyD&#xA;/pWyRNc1NNqBG4+OKrfK/l2T/lcnmB1kD6Po7G+tod6x6jrMMX1ip6H93AzDw9X3wKyO18kwy+ft&#xA;f13VbC1u7W7g06PTZJkSV0e2E3rEBgSm8idOv0YqxbTfI/npNW0mC7tLRdL0bUtcuoruO4LSSw6p&#xA;FcmGsRQUIkuaN8XTthVQ1P8AKrzLfaDZacvoRTQ+TP0DI7PVRfB7ZwuwrwPoN8WBWS+X7Dzxa69r&#xA;Ot3el2sUusz6YjWqXXMRW8CGK5kL+mnJ0B5KtN+lcVZ3irsVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:BD1112C3C60511DAB36BE74536D42390</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DE392A31C62C11DAB9E394ED91D51F7F</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -145.229 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 145.229 li105.204 145.229 li105.204 0 licpclp[1 0 0 1 0 0 ] concatgsave % PSGState21.654 99.027 mo84.798 99.027 li84.798 130.599 li21.654 130.599 li21.654 99.027 liclp84.771 130.599 mo21.654 130.599 li21.654 99.027 li84.771 99.027 li84.771 130.599 lifalse sop/0 [/DeviceCMYK] /CSA add_resgsave % PSGStateclp[1 0 0 -1 0 145.229 ] concat/0 /CSA get_res setcolorspace[63.6 0 0 32.16 21.4128 14.2841 ] concatsnap_to_deviceAdobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf<</ImageType 1/Width 265 /Height 134 /ImageMatrix[265 0 0 -134 0 134 ]/MultipleDataSources true/BitsPerComponent 8 /Decode[0 1 0 1 0 1 0 1 ]/DataSource [[AGMIMG_filter 265 string /readstring cvx /pop cvx] cvx[AGMIMG_filter 265 string /readstring cvx /pop cvx] cvx[AGMIMG_filter 265 string /readstring cvx /pop cvx] cvx[AGMIMG_filter 265 string /readstring cvx /pop cvx] cvx]/NComponents 4 /HostSepColorImage false /SkipImageProc {false}/Operator /colorimage>>%%BeginBinary: 1imgJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcO'r!XBYrr\Fp=3Bp/?C3k\qOdVF1Op[V@NJ;t,AlVJf1&`s1/K"]J!.k3&!.k3&!.k3&!.k3P!"oAU4]uQDG'A_6XJhhNF'r6T=8c;.<_uCX76Nh$5Q3eM6q0^D<*EH3>$>!1@rR-cUS%OR"cRJ%2];^^!.k3&!.k3&!.k3&!/LUY$o;'d:N6c@\<1`AEd2%m8PE+_=U&/CC2e<AId;IeH?O7CARGF>&QDFk4#]f=Fb#",QATQl;_/*o!8@L*!.k3&!.k3&!.k3-!!WQS1I>uMTaQF#KQgg#7SHoqE-f`X&U\P0=\_FT3]pShQ_TOb9/@[?!.k3&!.k3&!.k3&!.k40!"Ti$6?7X7NeLqRBiA8PCj*I@$$U6%?;<s[<aC%ULj"&60arj<JcLB&JcLB&JcLB&\H!$[=&+4OHtRY4<EWpZm!f._Cg^47rBLTO3%up4,Tn6.)#b?W+<VjV/20%IrBLKW<*j<_m!fFjBj4V+2ctE]IV;Ig\,_*\JcLB&JcLB&JcOO*\,ZmA01(/`H@g9A:1SV>IgC%&?ro`Q+qOnH!9F1d!YHS16WIN%E:JDcH=g#D3)=snF[d_[_Z58gJcLB&JcLB&JcLl4%0\L\HAd]!BjbIhI=Hb@Ig9t$>=0k_*!jC]#6u.i.7.0FDY8JeIW&go78[ZEFA++ao)O@BJcLB&JcLB&JcLB&jo>\n85b_;C33`gGP6LiI:Pf2.h:tI"p#Dc3_<LgrFl@PG(YGHO8tdLSH,/YO9:5iG&mLp"^4P\-l)sX!;ca"$R\/-@=7cu$$ouZ4A(!FBJ]dc!.k3&!.k3&!.k3&!5/@<*EI-VDK]>oH1udkE_JYE#P.p$%PL[lC3,N=^\-(SdfRh?b5'*[aj/3&dg3spP':YU;)ApW!!EKN5"]\dIgCC1;`\$0D,q.p!.k3&!.k3&!8@L*!.k3^!!jZ;H]<>e@V^AeIfsn%73`Q@!!a2o3F7E4UVZiX#gpZ-^qR7ZV4@UPrfmVLNf&OAnUC[mKo1nSrfmeUSYWBq^;.P(d/;E!_PEi\@6HL`p&G40,=5aXq0r[!D-',(Df8)XgAlg*JcLB&JcLB&JcLo5#6dqCS9A@NF8C@iIskQS)Zf^6"U$>_OeTJbfE]g?ZDEqRP).A4#D\J-Q_^n&chuE!^nR-*0a.7O"9BDk=F9mo#Cgi)5tc!C4,O#i!.k3&!.k3&!.k45!!Y>bSSrUTFnpLg>Wj&$!!F*@E0nlKg'63MZ`L!eK?/Q7Ig1OgUo^oBf`'S-c^o&X*V]U:(-PfKqL8]o><u#0A0JJ`JcLB&JcLB&JcLB&]`86F6]ZVB<HS(e"*%Bh!Vud!&iXC%g&Bb1fZ1e.P_&OX!d\ZmrEoY:D?+t3JF@srJWm+K`n9)%gTG9O(]"+6!?bB\qL8]n:ci*83sFgJJcLB&gAlg*JcLB&JcN=]"s$s*H"gl:qgS]]7j%m1!":/CO0IHshU]]TS<SX&J,Om$H=')f*X_lHq>^d+)'C+]:LIa]l[nb[nUUFb$\FS3[)UYQh6N;<./NuH!ZXU@qgSftB1Pj;;&&L"JcLB&JcLB&JcLB&NrT>#?Cu1HD>Se_H3$S_qZ$^!4a"%/i!.oIY*OTfJ+eBo?oJDW!!NHD2F1>co7Z[eqL\Qpomm!j!eHT=#J8XHi4=&!"oA9$*(P8NIg'dg5^6NCT)aHCJcLB&JcLB&JcOj3"X%EGDd7ScIfb$p./NuN(M0,oiSiCsVhb(ur.,!&JppE)huEok01/EHKDUE$L%L''KS4eW6:?M(KD^?!JbXa%Itjc+f&>MaBcm3P![CEfr-nls=Zp\4'?pN/!.k3&!.k3&!.k3^!!O$>NH/HNr-nca58="q$RB&Vh;R53X-J6dJGk&tK)C6'KS3SHqZ$X03"KbnTXDtne]k_(TU'Uc2&,Q\$3M4k/4<ZQASldJq1f6*E+NT]4<tmLrVuq(qh=p#rIb'#r.4fs#_A;Aa5,RTALIBU!YIP1r-nlp>"EI.%/U%Z!.k3&!.k3&!.k3&!4;e07Zhn$Fo6^jBf#qj!!ig4R,[,a^T*(gJc:9!KDpQ$K`F(1!!E9%5D.>PfEAR0BKZUd!!`fA&K2Ju%0cD)!,h^ir.b*&rIk-%rIY$"$%RP]VnM$JV-XE)!!+far-nfn<'bX,5D&rf!.k3&!.k3&!/gg[/q87XErCIhIp42r!!YZJioAt/T`0QBKDgK$L&Hc*LB2Z;qu?a\\c1=ed'g-OP`5U!#*>1IYd;*lr7_@-'*&"?g].?q^&*ZaM#W80L])u*L&Qc(KDpH-JV'K'hVjerqu?a;=8[ONG>1hO,-_-"!.k3&!.k3&!.k4/!!EO)N,</(Ifa.(!WE')%p?:"j2n-VKDgK$L&Hc*L\ur0M1$3=!!WONf\Y/fS,J9BN;JS;RA.$\1&_.V(XT4:58sJ#jT#>p[D2^!qMP3-rJ:E-rJ(6(re19'#D.i.b2U$C)#XF8+^b.s"DU/8<!D.ZJcLB&JcLB&JcLB&gAot."VlZA?$Ur!J,s[;r;['5IamH:Z]Tq=L&Qi+L]*&,M>`;4M]Vfs#6C"Gi4>,3NV\\6O8=q=5m.)d!@l.hhuquoZ$n1a!!=pmi2lg8rJ^]5r/1E/rJ:H.reCB*rIb?8Z/=5l'E%n4*c?N-Ift4&7!9:,!.k3&!.k3&!.k3&!3cG*4d0MmrI=ru3<]<]#8VdJjj9u^L&Qi+L]3,-M>`>2MuJY:NK$F*!!RN(hlDg!rK-c9rK72?-2dfJA)H7PXLlmYi<.hqAf^1;"<!!RiPYVUrK$l:rJgf8rJUW3r/(E/reLK-re1B-V?>3)L`QEo!B,6%J-0^TF#B0^JcLB&JcLB&JcLK)!agpe!.4]r!eOeirW!-7DrKg&S;.#us+pW1r/1N4rJ^c9rJgu@O+@N6!!OM&ii8-'r/q,<:4iJ/qNM#8'E.t8#as]3_jC@f".-.4g&9n5fTAf[!qQBr!Aokrio.KIP5g^AOoCI@O8b1=NW+n9MuAP3M>i>1L]3#2R*+N>')hk3#$LqV"Ftkm@p6\KJcLB&JcLB&JcLB&g&M`oB74'8JqJ]&2$*aX#$fC7bb"fire^T2repf8rf-r<rK$r>rK.(Uqu?hBj2I5YPQEcD:B$OUQ2u:CrW!$<[H$*D\+uBoRAmaChYlIFd]JsQ76*@_.k<V?5Am@?ro4+-U6V#?Pl-aEP5LI@OT(=@Nr=t;N;eb7MZ&D3M#N/4R`j/q"o\K..sZc!Jq7*(D[#S0JcLB&JcLB&gAlg*JcO=$#mG=!@"X,cKl7q0!!FUHkLld4M>iD4MuJ\8NW+t;O8k=>OoCOCP6$moqu?f5i1Bn5rg*^k!!%HFR/WKUHjKcQ#QPj^jOpK#Q'M*4"Il[3dGj]W"Q@A%R$dc;rg*JIr07/Drf[5BrfI/@rf6u;s,?r8reg]3"c.u1eZUP'!!j0OKS4u1@RP>2!.k3&!.k3&!.k3&!3-#7!ebZ.KnY89>mC?0!F=gH[#0a!Mi<VoNW5%<O8k=?OoCOCPPpaEPl[*Squ?i@cBt!tR0K*c!!!YnUAUJ^S:M(I!"(:0jjTiJ+ohT`K(b`IS=H:Y^qn1Bg>V,SjkeJ)^8V%#qO7ANrL!PMrg*MJrKR;Frf[8C!0I5Bs,[/>s,I&;regu<MM[1nhKf)##m+(\KnY1r6%9'6!.k3&!.k3&!.k3&!<)s2"(laiL51P?:BCLr'q4@3RZ*4)NW5%=O8k=?OoLUDPPpaFQ2[*LQi<?PM#./QID,TK!h>H@rW!"Hk,A3K!K%Wk!"0^gk0B]H$31_M!%IT5o:GuQr13\Sr1!YRrL*YPrg3VMrg!JIrKI8ErfR2As,[2?s,I&;reh&JbbPsR!!5lMre:Jf7s*)XJcLB&JcLB&JcLB&dJsMPL0]UkM2=n)!!F+[kdc]PNW>.>OT(CBP5gaEPl?sJQN!6NR/NHPRK8n3qZ$X.Qi<NWSnSu>!!Fk5gRt2;TE$)5!"BR`kL66#'*'lAVuQgnm@j9Ir1EkXrLNhUs-rtU".>R2$N'l+I[67arKR;Fs-!ADrf@2BNfO*u",sS4+oVHH7#?_ULLa.ar;_ELJcOO*JcLB&JcLB&bl@hjN)GN3M?$WT!!XgthkQ6oOT(CBP5gaEPlI$KQN!6NR/WNQRf8fTS-,=QQj!9d"9^MW5RRGi"9c@#]qYJ"!)!4j%KW<ffVG<f!!0^pQ2goon>,iSqP*n]r1O"\rLWtYrL<j=qu?a\eGbj8QiEBNQ2[$JPQ$^POcb`eO,o<]T@Yt"!!H8YMM[/k<cKaG!.k3&!.k3&!.k3F!"oEl>_.flN,8k$!$9PESWT%tP5^[FPl?pNQBml(QiNNQRK&`TS,JlVSc55[T)kT0nc/fDl/AM8rhTX;!r`00E9ZGcVP[>n/a8uL!'J0cVYI"cV#@(cUAgkbT`1S_ScNX-r;Zp&^u1^]Rf8`TR/`NQQN*6LPlHsIP5^RSOH>pQ-ia5M@Z-/%LI-n-Z2fIVJcLB&JcLB&JcPHD%nqCgNK0$X%fcS9ceP"RPQ$gHQ2d0MQiEHPRK&`US,SrWSc,/[TDbG_U&Lbd>4V^s@-[!cVZ*IoQjs#p%jU<'\YuL,<<*k_&c_p5_XXW)WVi^jVu*@gV>d:iU]$qdT`L2aqu?kNlJ\>*rLEnWs-iqT!1<bP!g]+:rfmDG%[)sBbS^B\$\44rN-7j*h>i--JcLB&JcLB&JcNpn#6L8aO-#Hc4oPEnUuIu1Q'IZ$Q^=),R@0M4S"'DIrgj(\rh'1_s.TCcrhBXmUnsoV(%hP-Gj>Cra8W%>Wi@QI!!6;\EW/r=:*BK8!s*o;Z1b9jX8ApqWVi^mVu3FkV>d7kUHSMT"tAd%[@j.args+[s.'+YrgF%ZR@'A.Q^7W9"dG78S"]oi!!"U4O,o;rJe[;HJcLB&JcLB&JcLB&_uL!AC3br)P'-a)#ZBr_QC!r*R$mrBs-s%Yrgj(\rh'4`rh9@drhKIgs/#[krMK[](&@q>!<F.9m-MosW.o\&-1M!<6+H:5mB68eqQ0Uqr2TaqrM]^n!iDi;qu?g$]BmuFUAgkdT`:YaT)G2]S=H)JRKT%HR$a3DQBmf$Ui-/4!,hdu!e4-bOoU(6JcLB&JcLB&QiIkL:Qq!,PV`CA%b&+YR@0M4S"#q<SH,5[T)YG_T`:_bUAq"gV#@.hVZ3RnW;W^pWWJqf#Q+T.-%+A4kbV90%/']1&iVp8;.VNa!M&Q6[HXpkYPbR#Xo5@#WrT4"WWT6"SdkSt$$GY"X/2YgUna^aUApqdT`:YaT)YA\S.hB]R[TY4R$a5A%06JZP`q;o8X-phJcLB&JcLB&JcLB&li7S?T4+"MQAZ(N!E8!HS"#q<rgj(\s.B=as.TIes.fUirh]Ukrhodps/H!trN#q!riHR>`I`;XHFE2-mAi5?!<[J0]&<JQ"Q2HE!G;/6p9XP"q6Bh$rNH1&r2ot"!($M_"<Qjq_PmI3rhf^ls.oXhs.]Oes.KCas.97]rgX.]R[TY4<rN+(N0TZmC47>l!.k3&!.k3&!.k3&!8@M9!!Y;eHC1(f<rN+/Y-X[iSt;RHTV/!PU8%X^!2TUjs/,dns/>ssri5sus/c1$rN?1(rNHOKg?S+kh8q_W!<W^4GZ+G?!+>`m$gd$5f[A@<P7_05[dgg"[JR?0Zi%-,Z2Lp+Y5teTqu@$*YjU5GX/`2!WW&jrVuEP.V59u`USFQXTqS-PT:_^HSXl:@RtptD#%![`Q[`"EnGn.@JcLB&JcLB&JcN@^(0Oe*R[]d9!<EANTV%jLTV8'RU8+KZrh]Xls/5mqri,pts/Z.#riQ1&ric:)!3uO.rj)O0rj2r+!<FO0h='bjr;d*Ah!`h5`4l,X"O$/qm`"e-"LjPNM4XLOq6p1.rNuR1rj)O.!MpM.!!?a"laZqrs/c4#s/Q*urhomrVPXg"V59u`USFQXTqS-PTDkDhSJhM03LlP+PW*BL!.k3&!.k3&!.k32!"4iaS=H.@.00H&d\-o>U8"EYUnspeV?WrrW2Q\pWrB(!XSo:$Y5b^(Yl:m4ZEep=/jHSIr3cI2#E8h$ipZ@!GPhICRd]50\d#9qTAdVt](ru;\cH^grVus'@f3eAUJNQq7&%6i\Giu:[fj.JVOt0m[JmN5:&Ftp)rU2.Yd",1s/u=&!3H1#s/Q*us/>sqs/,dl"f.ogU8"@\TF!%J!BmWVS=;p"aoI"nJcLB&JcLB&JcOa0%ZruIT:_bu!<Ga)USO`_rh]t!Vl6PnWiE,#riH.%riQ7)rNQ:+s0DX1"15FM'E%t4?i7D3\,s4OcMm;8ho(<Qr;m'[nF4Eo]EGp8;[rd5!!#3r]qICcD#:mHT-a=6"Hg@0Ys8-d!<[oO]DT5AZ"#-Z!!aEV[^W`SK*(rN"01kNZi790Z2V!-YQ(d)XWFRFX/i8#WMuhpVl-DhV59u`US=J4!<FgaSt;KIRe?`5!.k3&!.k4*!.k3&!8@JeP<GS4U7rh4!C"#jVPg>jW2Zbrri6%#riQ4's0)F+riuL/s0Ma4rNu^8V)\AS!sX[o\bs&;]*?"5lHQuF)>sU=#0l\nqn<-+4U(``#7Ru,$ig87Xo6!8N=Ygb")#?>*Voa:%^#]C"MDCZCDcjI"?3g#ZPr`A"%r+O_Z$tB[/[K4ZMq-/YlCp+XrFLFXK8J'WiE%tW2QVkVPU,b.KKQ,aJ#9"8rWZJJcLB&JcLB&JcLB&Y5f2h9;A;YV)SMX(qQZFWN*#"XK;E's/uC*s02L-"L>>>ZaB_>rO2a8"1Pe7'`8"85gSo5]DfJA^&,ME^GGch"`a(u_na(e_#[jFqZ$^*Fi8n1!!R\c_81j0p](@_\InT:!K4bl^B(Abp&G.r^0LR9"W?+ce@<$f\,Ni9[0F%G['R*EZMq*KYct=7Y-+n/XK8J'WiE%tW2HOD!WkR3USFPLC8h2b!.k3&!.k3&!.t7O;?^6hVPg=krW3ChX/i>'Xf\b/YPtd+Z2_-0Zi@E4[JmW6\,Wu;\HBFSV]>U:"GZL<l+m;4rkJBHrkSS?qu['CmdeiDrkecK55P?a'8>oGhnK$i"@(>QPR%-f!@B8o!<FZ+q>pQr!/1?g!l9d"qZ-a56P9:u!YMI7quHqco'=!$rjr-?rj_s:rjE$=[C!9HZEjJ7(U1-IYHG%1XfSV)X/_p'!WlQJVPTM`;:PYu!.k3&!.k3&!.k4%!!Y5qFJu1=I/X0MCoskCYPta3Z*CU?Za7$G[JmW6\,Wu<\c02>]DfGC2>dO\Sb)F0_8*kb_>M1L_Z4oY!sSnAoB+!1`<+#o0DbbT?0:bMldWoYrW**Ikb8Oc!<amboBHk_!<GT(qZ-]"rkneYqZ-jB[Ia"[6hgZa6M'firk8<Drk&3As1/-=rjN*?[^ENM['Tb;"L559Ycn&/!j/P<rW3;3^o4/cE)(ubJcOO*JcLB&JcLB&ci=.TRp)llX9B[I![4_Nrils=Za7$G[C*HO\$rlW\[h^Nrk&3Crk8<F!.t+P"+g(6df%&]_u%@R`KLi1"TW!:oC9uCa2c%gquI*8NUuc.e]GnR+oVKD#0[_Z!<l]goCL`CqZ-a-icb5#"<?RD`)ca9#$'XRn`&&nq#LX.g[j7:_#D+J^AbhG]`,PC])T>@\GirN[^NTO['[0FZE^[=Yck5\!Wj)+"hLb7@[IIX!.k3&!.k3&!.k3G!!\<EW33;,A,ZN@Ha9ub['d<M[^W`U\@K/]])K;C]Y(oX^&GbF^BD?f_7qGt"Tp7Do[NiXrPe]S"38HZ&,ZS5+klSCrQ,%WquHp'V=aE;r5o!er;cm)rW*11o^qCqIJNsHC@o7DrW*-'Yj0:tqZ-q'nau%i`l=8=!<e)JmDZsB_Z%CN_#M1K^AbhG]`5VC\cTFP\GirD[^NTO['R*EZAJP^#'T76Xf#`RZN,RWJcLB&JcLB&JcPKE!Zlf(rim3=,m+5[X1#IG\%&rY\[oAa]=bei^&GbG^])%J_>_:P_iaj$!ho8FrPncUrQ#)_agE2e"p2=,li#!-U^[/&".AfQebdPj)>XC?F7f+`beb;#!rN*,V"E3B9I*uboZf>k!Wtpao]?%m!-J&=">9?=dDc(&rkn`Prk\WMrkJKIs1SHFrjr<E]",>\rjNBG[^E([!s9+te$-'+LI9r!JcLB&JcLB&JcLB&aT)Nu5Gb]n[?:Fj#t)54\[oAa]=bfU^&PhH^])%K_>_=N_u@RT`EW6F"7Pp+a8O*Xao'9^\g[L^"pYB?p%-VUrlkF%quQsop%7#8c2\%F!X;j!p#=<CA,-0.](OA3rUg3=0)G\Q)rgPQbPfQ`(]+7;$cM`#a2e2!rl+lTrkn`Prk\TL'#22q^:h4m]Xtee]",A]\@569#m1:$n@#[)>CHV7!.k3&!.k3&!.k3&!5edA,)Ba;\$rqOrW<=4]=Y_h^&G_G^])%J_>hCO_u@UR`W!jXa#X&(!qk]trQ>)^r6,/S!%[pQ"#K68hu1k$S,39hfCe/"ciCiX!s_Tfp#OKH]a"97#`JB*d,jrlS.GGu"hXHpccs`6bQ(N;!sN`<o?>=urQ+uYrl4rVrl"fRs2+cOs1nZLs1\NHs1AHG]=N4c!s_Qle@)c(QnXX&JcLB&JcLB&JcM):#@U;`\[oAn4oPQiDSEj"^VIY$_>_=O_u@US`W!mVa8X-]aiQUA&HVOVrQP5br6>>M/Gg"_):A0DdEqm?!(?_e"&AR\eG@SnHMdjI.IHimrmCd<qu[9k'*A=akMFV6Z:+Kj"'YEjdf%JpcH[a="9&B).,ssTrQ>8UFNXU)rQ,#Zrl4rVs2=oSrk\uX_8*k$^V7FqJGoZV2;dZ/\=%GL]E!N`JcLB&JcLB&JcP$8#QfN>W4]dVas[/l"Cf3`_SZ;is2=oUs2P&YrlG)\rlP;cb<#P=!NarPcMc)fciL!lqABF+p@He^rmLkGqZR&.p>u,"!'U8a!>X/dp?_e.!0[6`!Yj9UrWNB=BPT*l"Tm`XiVq7(ciA@g"UhU/mEX#%c+u4?:<!4UrlY5^rlG,[rl4uWrl"iSs2+cO!Pj0`"UH4/n\_uAC5`2W!.k3&!.k3&!.k3&!8@M5!!jF!8$]nE_UBn3"T_lFrl"iUrl4uYrlG,]rlY5`rlbGgbshOR!_M%jrQtJi!n)rVqB5rZp\3MCe,n1N=o/C*bkKc?qpkeW#5n`2TD.s1f%/7pr!!4[pO2Q9"%;nXeGdo!daH,Jr!!R)p\*.acd0in"pQNrrltGds3(DarlP/\s2Y,Y'?.r/`5BL0Ad/DB+jor.^:ImA+RK/\!.k3&!.k3&!.k3Y!!k-&9sqjT_q%!M"p-T]`r=$YaSs<]b5TT`bl>rdc2u><;YqmDCsi71r6k\N<r"0H?M4'TrRM&%^(gGL!U07RfE'PYr<EFMp\3PDfDp$k#6[<`pXKoP#6@@+r!*:SpZVP*!Rj%+#7VX&pZ9iOdDe9R#8#2<rm1ShrltGds3(Da!6G5_rl>;aa2Z-<\N9]o#V=U#d)!J<O=Q_!JcLB&JcLB&JcLT,"ZLBo\&?5e`o^;#"p56gaN=G(s3(DcrltJgrm1Pi!n#D7qCr7VYgV%Oe]+@apb;kFlM0cEfE'Smq@<VPnbUl<IJjZY2Yd(,rn%4_r!ruDdeN.\aW^Qm!^3RYq[Wb1ptu&%!S2Gk%hFKko%)=?a?gCJ)mf>)dF%p>rm1ShrltJerlb>arlG5_OqR`u#YO^[e\et7P!6eaJcLB&JcLB&JcLB&g&MF;F@`@Ma3!>('`J=A4g3&Qbg"E3cMl/hd/MGldK7nHWVACT87,_(3VPH8<9<oEg&0J&Abd5FT^hs5!ni/IrYbkfcM6c)f`4\C)@hi'p"S0_k+u^'PKWarp\Pj1`q\BgfE$.7r#-,,mJ,Sif#'lo)BZ-Wp"ImDrmLenrQtSjrm(Mf'$SSCbHjeH#6tp!p%$SOZ[%Qdmf7q>JcLB&JcOO*JcLB&df9\%J4??Vb0&MY3;s3d$ujG9rm1Sjs3^hormUkr"4brN<pMdL:Ytp=g\oe+enb%,!&=Q3rRh5"H2JrjUA=H:rn.:<r$;S8oD.M$g"Plkq#Tm@q]u9<q>T%JctW>&#-I^if\"/5rZqZCq>&nHec""se,RkqdJhMlcNMP=bB4U"#mi?"p?g/HWcX1IoDjICJcLB&JcLB&JcMYJ$5%GOGKe:Uf'StDrXT2QHHjjbdaJ-Drm^qtrmq)#!42#S"Cp]lo\BDu!RP-O0`b@nq_87<MQ3A!4T$o9QML@6rn.=k55[,:cM?o+fa-U&lg!Wdg"A@_0a1S>gXqo^q(W?SptaT!4#&HI\,#gXf`'M%f)O;#ec+(tdg+=LdF$=fKHgC+$5eHip>aB?NIQBpTE'QDJcLB&JcLB&JcPQG$O^HS>.;f'dcB"i(B,!L08[dLeGe"tf)F;!fE'`[mQLc/mJ6A/r7M(Jr\t!hl1n*F3!4p2q<._1!-A&t"-33Ph>,e(f`Kj[Fo+-"6"*@Z3"*js^Nht%3't.NpuM8'rn%/#rmh"t"4PJT2uOEt?-N$4g!73WM.6k8!.k3&!.k3&!.k3&!6P9K0nr#JdF$Cpn'+B$)?VO2cdr*IpXfT$g#dtX5R'c`q>'L6g&0P/hKV/1oD.mXo/m,9q>':Rg&RuI49J4Iq;q5%!4hbb!GIYn49.bI49S+"q>'(Kg%a4uf*'[Uc[IVI)@AdGp\*Uod$'*G1\Ca"!.k4*!.k3&!.k3&!5edE$u'0MXOPbMiUaTXr>u(bA?,OZpt5`;X[r+O"[e@9qYKIOg&U7>_"mfogZFgq4p4?Yq>'=SgB#r%r&t1rq=4%0!TJG"4p$')anIt%C#Aa\iUtn#fE/Kq-iG+p9<e0blIaRkJWFRTq>c*IJcLB&JcLB&JcM&9$n6]tAAZpLfB2_M===%n!B?2A`V%meg[srr>5:PjBpeDdqY&kDgA]h5iVE<7gY1ERWCQeN"[mY$qYKFRgAld%5m)f:q;Chu!o3*WqEY9_]))9l?MZqm9:l"Vp"e<So%=)bQp1Eo$WOq9p[6ee`JT>&18Ou&!.k3&!.k3&!.k46!"9*-KKXS,f\"p>p="9a.K_A-T%<_j%GKOjmJ?\/`N,Z2^<Pa<q>pETr7_5*qV)&1i;MC5iqhZ.<rPJk>,9sMqY0"HgAmQ<L]`V%qWe(7o@jB8pomj!6jR/-o(r4IgY5g.6j?2EjneiAh##h"f`J!U0`3C/C!cYMn(u^IJqKFa%+#!+!.k3&!.k3&!.k3]!"B9JF$"iqg"G*@oBVuCr%J40CR!0?g&^1#q"b$\kP*a(gB$@1q>(0glJ;<k!:p$`!;5g8!T*JJq>g'aq@<)UgY:ld]:bn>p\OaZj7Ct,d@##2r%JRMRcjJ@m,$FCNd%%!%f-1[!.k3&!.k3&!.k3&!3lM-%=2_NH,9L5"lJeCfQfs`2$d'G\_5]jgY:H]gBQQtlKd]rhtl*qgBcX%oD/7Zp[[MAg]6R8o)RhHh"KJ(h!b%;q?$E\iV_F1mJQe]p#c))r7V4aRTTGE%RP3_q"XLGg=a?.D38QBrW%NMJcLB&JcLB&JcLE'!#Q2PE(X]=e_8a6kOS,ZH;48r"AW^+]%ZH(n(ds"fA$MbioAtPq:bu0k32p.iV)".]VKCAq`#*YFh[5<p?pnnfrKpZM-:gs!.k3&!.k3&!.k3&!7UuQ$sIpW9TI?rg'6O%p[kbH7f#.J9n8JIp=n0Rf\H/S"3R$`;u/Nd6@l60q>'ODgtL/>LO,1g%FY</!.k3&!.k3&!.k4*!6Y?H2f3h+@@,REgBZ^&p%d71CH_MU"?g4NR`OdLmG6gYl.cEaSVh#Dq)\XiS'V*0$L[*4gXi!QCnG,uec::%JcLB&JcLB&JcM>A'-:8!@RtF;eD&a5ip$%0i4skQ55IDH4]>pBW3stMgpPu9g]l*5XbC@g55@>T@",fFq>'^PjknhDZ&*[^L//rmJcLB&JcLB&JcLB&JcP0<'.@@P=[?Vpg=tE<hW=/!q;]JZ=nY#_=(ZQB\_$9*i83qYrnRe2]:=+X=?lOD"&b3!hZ!<ZoB5)egY/iOK6a(l.B3B"!.k3&!.k3&!.k3c!!iT_BmaYT@Z//&g^2m%mIg;Mc(L"qoKNRWCkn%:XiB,bhV6llgW?[cNeqXOoKNIWLn;]]rqR#nlf?mWgrGP2EdsNY3n"(\!.k3&!.k4*!.k3&!4;e4+ErER:HN^!aSjp&hW=.qp\O^?WI&PZnNd@K=DWMOUU'm.!lWC=k2$O$dDWT)\$MinJ8JL[nNd:OCj;f+rqZcno^V2)rnRk(Y_?Y2Tlb#pec::%JcLB&JcLB&JcLN*"!:!SI0XC[<GnVCgYMkc%HQ[=oC_tVgs!<hF)=Y;63BbV>@[)8"(PP69'\eS9PSR+[*74uqYL!Yn`f/nrnRspVgs/6N.lC;,6.^q!.k3&!.k3&!.k3&!7h,X!\\/1JoX1DFc<W[r8%V8k3VO-q>U3qj1qI_O`a\ncU@Xu#?5]'T;''Yq#1$mp@.G6j59jm$Ji1MIWoUSZ"R2pVuVDLJcLB&JcLB&JcMVI%3T2EKlL6[6#N1!b22"QhZi-)mIKoBq>L-mm+&kLOoTt1EWTrW9B8MC86BF%EWprUVnCLGqt^Tmo^qY=jl#%Rrn\%.[%hkZ>(!3"Eag3=!.k3&!8@L*!.k3&!.k3?!"L58C3bG]>uXI'E1!uDfDFG-i8`t^!pK"?rq$6bq>C'ko&n`RpWW]XpWWfegZ7r%q?m#jo^q_BlK@<kiV_RDftFb]G'n@>M2Qn8;`5s'df=t"JcLB&JcLB&JcLB&kl;82:1em5L43c'2H"UQN2OYNp>?)5jQGdnr9X[Un+#r=oD%q]o()>?n*^/A"mkO<jl>=qi"=l'aJt;XG@bE1@sbMM>?"B<q#H!HJcLB&JcLB&JcLB&[f@-W5@eMaP`('=@n8LE>'#IVNM3f%gZ%/ei"b"g[\Jn@LN[!+@s;^"Ks[[k9Nsk!TE'QDJcLB&JcLB&JcLK)!Y[7D%npr#J9R3EL3$a+>#nU&>lJ(9ATE3QN0Tp+U\Ll2VkBQFNJ2e$BjY4ZF)bbp<a9O&S;_oDMM5(o1GTZa!8@L*!.k3&!.k3&!.k3&!;-<u#UV>`4B$!BO-KX5-_-ZqRZikhKn=YuJqAN"H\-j"LQ%7SNfK*_TVS?NOE+/\1c$p7%Dr0t!.k3&!.k3&!.k3&!4`(5#7h^s-S+sJ"YV5H)A!/2!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!/LW*~>%%EndBinarygrestore % PSGStatenewpath % imagegrestore % PSGState79.1392 101.115 mo68.5786 101.41 li58.2388 101.086 li47.9912 101.559 li37.6104 100.332 li27.752 100.799 li28.125 84.1523 li29.1074 68.9375 li28.5127 58.2573 li28.8047 47.7065 li28.1152 35.6431 li28.8076 24.2871 li28.2305 12.4185 li27.3145 0.682617 li37.9824 1.28955 li48.3203 1.20752 li58.5728 1.38135 li68.9517 0.500488 li79.3325 0.623535 li78.2954 12.8921 li78.3228 24.9219 li79.5415 36.9702 li78.5356 48.98 li79.2974 60.8926 li79.0024 72.6914 li77.9263 81.8945 li79.1392 101.115 licpfalse sop0 0 0 1 cmykf79.1392 101.115 mo79.1252 100.615 li68.5793 100.91 li58.2351 100.586 li48.0091 101.057 li37.628 99.8306 li28.2638 100.274 li28.6246 84.1741 li29.6083 68.9397 li29.0131 58.2503 li29.3051 47.6992 li28.6161 35.644 li29.3084 24.2902 li28.7295 12.3868 li27.8575 1.21432 li37.9702 1.78966 li48.3181 1.70755 li58.5897 1.88171 li68.9699 1.00074 li78.789 1.11713 li77.7954 12.8715 li77.8228 24.9477 li79.0394 36.9746 li78.0343 48.975 li78.797 60.9023 li78.5032 72.656 li77.4244 81.8811 li78.6402 101.147 li79.1392 101.115 li79.1252 100.615 li79.1392 101.115 li79.6382 101.084 li78.4281 81.9079 li79.5017 72.7267 li79.7978 60.8829 li79.037 48.9849 li80.0436 36.9659 li78.8227 24.896 li78.7954 12.9127 li79.876 0.129936 li68.9334 0.000237339 li58.5558 0.880988 li48.3226 0.707486 li37.9946 0.789438 li26.7714 0.150915 li27.7314 12.4501 li28.3069 24.284 li27.6144 35.6421 li28.3043 47.7139 li28.0123 58.2643 li28.6065 68.9353 li27.6254 84.1306 li27.2401 101.324 li37.5926 100.833 li47.9733 102.06 li58.2426 101.586 li68.5777 101.91 li79.6708 101.601 li79.6382 101.084 li79.1392 101.115 licp0 0 0 0 cmykf64.4653 50.8901 mo62.5649 50.5532 57.5298 49.771 52.3252 50.2183 cv49.5332 50.4575 41.6836 51.105 40.2412 50.5962 cv42.0547 49.6108 50.5742 45.3149 52.6953 44.2368 cv54.1685 43.5171 55.188 44.105 56.7778 44.771 cv60.9028 46.519 66.688 49.2397 68.8325 50.1968 cv0 0 0 1 cmykf64.5526 50.3978 mo63.0404 50.13 59.575 49.5839 55.5948 49.5836 cv54.5192 49.5836 53.4058 49.6236 52.2824 49.7201 cv50.2468 49.8949 45.5022 50.2868 42.5724 50.2862 cv42.0348 50.2863 41.5592 50.273 41.1809 50.244 cv40.8054 50.217 40.5163 50.1656 40.4075 50.1247 cv40.2412 50.5962 li40.4799 51.0355 li42.2734 50.0608 50.8024 45.7597 52.9219 44.6825 cv52.6953 44.2368 li52.9148 44.6861 li53.3366 44.4812 53.6817 44.4083 54.0223 44.4072 cv54.7218 44.3991 55.4902 44.7673 56.5846 45.2322 cv56.5842 45.232 li56.5827 45.2314 li60.6943 46.9736 66.4745 49.6919 68.6288 50.6534 cv69.0363 49.7402 li66.9014 48.7876 61.1114 46.0645 56.9729 44.3106 cv56.9721 44.3103 li56.971 44.3098 li55.9185 43.8753 55.06 43.4153 54.0223 43.4072 cv53.5271 43.4062 53.011 43.5249 52.4758 43.7876 cv52.4723 43.7893 li52.4688 43.7911 li50.346 44.8702 41.836 49.1609 40.0025 50.1569 cv39.0145 50.6937 li40.0749 51.0677 li40.354 51.1636 40.6846 51.2072 41.1047 51.2411 cv41.5221 51.2729 42.0182 51.2862 42.5724 51.2862 cv45.578 51.2857 50.3214 50.8915 52.3679 50.7164 cv53.4587 50.6227 54.544 50.5836 55.5948 50.5836 cv59.4849 50.5834 62.8979 51.1198 64.378 51.3825 cv64.5526 50.3978 licp0 0 0 0 cmykf67.6255 52.7397 mo66.6489 52.6245 62.7153 52.4888 61.8931 52.4019 cv58.9224 52.0796 56.5962 52.1099 53.9458 52.1753 cv42.8125 52.4556 41.2461 52.6245 40.2988 52.4175 cv0 0 0 1 cmykf67.6841 52.2432 mo67.1555 52.1815 65.9393 52.1206 64.7259 52.0608 cv63.5218 52.0021 62.3189 51.9447 61.9456 51.9046 cv61.947 51.9048 li61.947 51.9048 li60.0156 51.6952 58.3496 51.633 56.7013 51.6331 cv55.7878 51.6331 54.8797 51.6521 53.9335 51.6754 cv46.2393 51.8692 43.1012 52.0098 41.6177 52.0095 cv40.9542 52.0097 40.6416 51.9809 40.4056 51.929 cv40.1921 52.906 li40.5412 52.982 40.932 53.0093 41.6177 53.0095 cv43.1523 53.0092 46.2641 52.8687 53.9584 52.6751 cv54.902 52.6518 55.8017 52.6331 56.7013 52.6331 cv58.3247 52.6332 59.9478 52.6938 61.8391 52.8989 cv61.8405 52.8991 li62.2895 52.9459 63.4646 52.9999 64.6769 53.0596 cv65.88 53.1182 67.1189 53.1827 67.5669 53.2363 cv67.6841 52.2432 licp0 0 0 0 cmykf65.8403 54.2153 mo65.6626 58.7515 66.7817 63.2422 66.1333 67.7773 cv0 0 0 1 cmykf65.3407 54.1957 mo65.3271 54.544 65.3209 54.8915 65.3209 55.238 cv65.3228 58.4453 65.8394 61.5794 65.8375 64.6702 cv65.8375 65.6863 65.7826 66.6976 65.6383 67.7066 cv66.6283 67.8481 li66.7807 66.7816 66.8375 65.7223 66.8375 64.6702 cv66.8355 61.47 66.319 58.3361 66.3209 55.238 cv66.3209 54.9033 66.3269 54.5689 66.3399 54.2349 cv65.3407 54.1957 licp0 0 0 0 cmykf61.2759 54.2153 mo61.0376 55.1948 61.2759 56.4585 61.3345 57.4409 cv61.3892 58.8452 61.5688 60.2012 61.5688 61.6016 cv61.5688 63.707 61.2153 65.8125 61.0981 67.918 cv0 0 0 1 cmykf60.79 54.0971 mo60.7006 54.4663 60.6723 54.8475 60.672 55.2274 cv60.6731 56.0292 60.7989 56.8381 60.8354 57.4707 cv61.3345 57.4409 li60.8349 57.4604 li60.8916 58.8951 61.0697 60.2444 61.0688 61.6016 cv61.0702 63.6511 60.7196 65.7477 60.5989 67.8902 cv61.5974 67.9458 li61.7111 65.8773 62.0674 63.7629 62.0688 61.6016 cv62.068 60.1579 61.8867 58.7953 61.8341 57.4215 cv61.8339 57.4161 li61.8336 57.4111 li61.7905 56.7094 61.6709 55.9246 61.672 55.2274 cv61.6718 54.899 61.6983 54.593 61.7617 54.3335 cv60.7901 54.0971 licp0 0 0 0 cmykf56.3228 54.0278 mo56.7954 58.5171 56.7388 63.1934 56.6821 67.7305 cv0 0 0 1 cmykf55.8255 54.0802 mo56.1408 57.0739 56.2192 60.1624 56.2192 63.2446 cv56.2192 64.743 56.2007 66.2401 56.1822 67.7242 cv57.1821 67.7367 li57.2006 66.2524 57.2192 64.7513 57.2192 63.2446 cv57.2191 60.1454 57.1408 57.0231 56.82 53.9755 cv55.8255 54.0802 licp0 0 0 0 cmykf51.4336 54.1206 mo51.6094 56.7407 51.6699 59.3125 51.6699 61.9297 cv51.6699 63.8008 51.377 65.7637 51.5518 67.6367 cv0 0 0 1 cmykf50.9347 54.1541 mo51.1095 56.76 51.1699 59.3202 51.1699 61.9297 cv51.1709 63.3312 50.9971 64.8275 50.9961 66.3335 cv50.9961 66.7829 51.012 67.2335 51.0539 67.6832 cv52.0496 67.5903 li52.0112 67.1791 51.9961 66.7594 51.9961 66.3335 cv51.9951 64.9054 52.1689 63.4105 52.1699 61.9297 cv52.1699 59.3048 52.1092 56.7214 51.9325 54.0871 cv50.9347 54.1541 licp0 0 0 0 cmykf46.7227 53.98 mo47.6035 58.4722 46.4258 63.0527 46.9551 67.5898 cv0 0 0 1 cmykf46.232 54.0762 mo46.4808 55.3446 46.5615 56.6301 46.5615 57.9324 cv46.5623 60.2066 46.313 62.5297 46.3122 64.884 cv46.3122 65.8009 46.3505 66.7227 46.4584 67.6478 cv47.4517 67.5319 li47.3495 66.6558 47.3122 65.773 47.3122 64.884 cv47.3114 62.6012 47.5606 60.2783 47.5615 57.9324 cv47.5614 56.5891 47.4787 55.2375 47.2133 53.8838 cv46.232 54.0762 licp0 0 0 0 cmykf41.8301 53.7935 mo42.2422 56.7407 42.0664 59.7793 41.9492 62.7246 cv41.8906 64.459 42.3027 66.0918 42.3027 67.8223 cv0 0 0 1 cmykf41.3349 53.8627 mo41.5259 55.2286 41.5887 56.6232 41.5887 58.027 cv41.5887 59.5843 41.5114 61.1525 41.4496 62.7047 cv41.4495 62.7066 li41.4495 62.7077 li41.4454 62.8288 41.4435 62.9491 41.4435 63.0687 cv41.4472 64.7519 41.8064 66.282 41.8027 67.8223 cv42.8027 67.8223 li42.7991 66.1313 42.4398 64.6004 42.4435 63.0687 cv42.4435 62.9597 42.4452 62.8507 42.4489 62.7415 cv42.4489 62.7428 li42.4488 62.7445 li42.5103 61.1987 42.5886 59.6172 42.5887 58.027 cv42.5886 56.5936 42.525 55.1527 42.3253 53.7242 cv41.3349 53.8627 licp0 0 0 0 cmykf70.1021 69.1582 mo68.897 69.2578 68.9673 69.2637 68.4302 69.2637 cv65.6489 69.373 62.8032 69.373 60.0181 69.3203 cv56.1821 69.2109 52.4082 69.1016 48.5723 69.2109 cv44.7988 69.373 40.9033 69.75 37.0664 69.4805 cv0 0 0 1 cmykf70.0609 68.6599 mo69.4572 68.7098 69.1703 68.7364 68.9809 68.7495 cv68.793 68.7624 68.6998 68.7635 68.4302 68.7637 cv68.4203 68.7637 li68.4105 68.7641 li66.7769 68.8283 65.1195 68.8547 63.4641 68.8547 cv62.3147 68.8547 61.1663 68.8419 60.0275 68.8204 cv60.0299 68.8204 li60.0323 68.8205 li57.32 68.7432 54.6338 68.6656 51.93 68.6656 cv50.81 68.6656 49.687 68.6789 48.558 68.7111 cv48.5543 68.7112 li48.5508 68.7114 li45.7076 68.8338 42.8167 69.0751 39.9539 69.0748 cv38.9989 69.0748 38.0472 69.0481 37.1014 68.9817 cv37.0314 69.9792 li38.0052 70.0476 38.9803 70.0748 39.9539 70.0748 cv42.8724 70.0746 45.7779 69.8312 48.5937 69.7105 cv48.5723 69.2109 li48.5865 69.7107 li49.7045 69.6788 50.8179 69.6656 51.93 69.6656 cv54.6146 69.6656 57.2913 69.7427 60.0038 69.8201 cv60.0062 69.8202 li60.0086 69.8202 li61.1526 69.8419 62.3073 69.8547 63.4641 69.8547 cv65.1301 69.8547 66.8005 69.8281 68.4498 69.7633 cv68.4302 69.2637 li68.4302 69.7637 li68.6977 69.7638 68.8378 69.762 69.0503 69.7471 cv69.2613 69.7324 69.5418 69.7062 70.1432 69.6565 cv70.0609 68.6599 licp0 0 0 0 cmykf71.0396 71.8945 mo69.9126 71.9648 68.5552 72.0703 67.5044 71.9609 cv64.4106 71.6895 61.3188 71.5293 58.2231 71.4746 cv50.8652 71.4199 43.4648 72.0781 36.1699 72.4551 cv0 0 0 1 cmykf71.0084 71.3955 mo70.2281 71.4443 69.3506 71.5083 68.5566 71.5081 cv68.199 71.5082 67.8588 71.4952 67.5561 71.4636 cv67.5524 71.4632 li67.5481 71.4628 li64.4425 71.1903 61.339 71.0296 58.232 70.9747 cv58.229 70.9746 li58.2269 70.9746 li57.9354 70.9725 57.6439 70.9714 57.3523 70.9714 cv50.2524 70.9717 43.1394 71.5945 36.1441 71.9557 cv36.1957 72.9544 li43.2149 72.5914 50.3109 71.9711 57.3523 71.9714 cv57.6415 71.9714 57.9305 71.9724 58.2194 71.9746 cv58.2231 71.4746 li58.2143 71.9745 li61.2987 72.029 64.3788 72.1886 67.4607 72.459 cv67.5044 71.9609 li67.4527 72.4583 li67.803 72.4946 68.1749 72.5081 68.5566 72.5081 cv69.4023 72.508 70.2974 72.4417 71.0707 72.3936 cv71.0084 71.3955 licp0 0 0 0 cmykf71.5981 74.5527 mo70.6138 74.5527 69.7329 74.5488 68.7427 74.4961 cv65.5864 74.332 62.4946 74.1699 59.3384 74.0645 cv51.2949 73.8457 43.4395 74.3867 35.459 75.0332 cv0 0 0 1 cmykf71.5981 74.0527 mo70.6147 74.0527 69.7448 74.0488 68.7693 73.9968 cv68.7686 73.9968 li65.6125 73.8327 62.5176 73.6704 59.3551 73.5647 cv59.3538 73.5647 li59.352 73.5646 li58.1069 73.5308 56.8665 73.515 55.6298 73.515 cv48.846 73.5151 42.1718 73.9878 35.4186 74.5348 cv35.4994 75.5316 li42.246 74.985 48.8927 74.515 55.6298 74.515 cv56.8581 74.515 58.0893 74.5307 59.3248 74.5643 cv59.3236 74.5642 li59.3217 74.5642 li62.4717 74.6694 65.5603 74.8313 68.7167 74.9954 cv68.7161 74.9954 li69.721 75.0489 70.6128 75.0527 71.5981 75.0527 cv71.5981 74.0527 licp0 0 0 0 cmykf52.3047 67.3203 mo52.1504 67.3203 52.0996 67.2852 52.0264 67.1836 cv50.9102 65.6758 51.2764 62.6641 49.2148 61.7285 cv48.8594 61.5625 48.6563 61.5117 48.3916 61.3477 cv48.7461 60.4512 48.9863 59.0942 48.166 58.2593 cv47.748 57.9058 46.8857 58.0952 46.4316 58.3101 cv46.1396 58.437 46.0645 58.4868 45.8867 58.5747 cv45.8242 58.6792 45.6816 58.7534 45.6816 58.9312 cv45.8867 61.2461 li45.0137 61.373 44.1523 61.6387 43.5195 62.3477 cv42.5195 63.6406 41.6445 65.3086 41.2422 66.8906 cv41.3662 67.0293 41.4551 67.1699 41.4551 67.3203 cv40.9863 68.1836 li40.9863 68.4238 40.8857 68.6621 41.0664 68.8789 cv41.2148 68.9805 41.5195 68.9922 41.7715 68.9551 cv42.3047 68.1836 li42.3672 68.0938 42.5703 68.0938 42.8613 68.0938 cv44.0137 67.0684 li44.4551 68.8789 li44.4961 68.9551 44.709 68.9805 44.7852 69.0938 cv44.4434 71.4473 44.4551 73.8926 45.0762 76.2832 cv45.0762 76.5605 44.6582 76.4453 44.5449 76.8145 cv44.873 77.2949 45.7852 77.1055 46.4316 77.0664 cv46.9727 74.9414 li47.1885 74.9414 46.9727 74.7773 47.2148 74.9414 cv47.5078 76.7012 li49.4561 76.7773 li49.5449 76.7773 49.5449 76.7012 49.6074 76.5762 cv49.6074 76.4453 49.5449 76.3223 49.4561 76.2832 cv48.9629 76.1055 li49.1016 73.6621 49.9727 70.9941 49.2148 68.4238 cv49.4023 67.8906 49.3164 67.3867 49.6074 66.9805 cv50.1914 66.8906 50.6563 67.2852 51.0645 67.6758 cv51.1387 67.8535 51.1387 67.9297 51.3398 68.043 cv51.5996 68.1133 51.8916 68.1699 52.1709 68.1582 cvf52.3047 66.432 mo52.3047 66.7576 li52.3611 66.4385 li52.3047 66.432 li52.3047 66.7576 li52.3611 66.4385 li52.2466 67.0858 li52.6424 66.5635 li52.3611 66.4385 li52.2466 67.0858 li52.6424 66.5635 li52.2762 67.0467 li52.7294 66.6432 li52.6424 66.5635 li52.2762 67.0467 li52.7294 66.6432 li52.4328 66.9073 li52.7453 66.6621 li52.7294 66.6432 li52.4328 66.9073 li52.7453 66.6621 li52.6974 66.6996 li52.7469 66.664 li52.7453 66.6621 li52.6974 66.6996 li52.7469 66.664 li52.7403 66.6551 li52.5584 66.4129 52.3961 66.0347 52.2559 65.5682 cv52.0399 64.8687 51.8787 63.997 51.5415 63.14 cv51.371 62.7116 51.1511 62.2819 50.834 61.8905 cv50.5186 61.4995 50.099 61.1528 49.5819 60.9196 cv49.2148 61.7285 li49.5907 60.9237 li49.3856 60.8279 49.2248 60.7655 49.1135 60.7185 cv49.0004 60.6707 48.94 60.642 48.8596 60.5927 cv48.3916 61.3477 li49.2177 61.6743 li49.4255 61.1439 49.6053 60.4873 49.6077 59.77 cv49.6075 59.4162 49.5616 59.0455 49.4365 58.677 cv49.3123 58.3095 49.1034 57.9449 48.7997 57.6367 cv48.7397 57.581 li48.3249 57.2402 47.8743 57.1777 47.5002 57.1742 cv46.9349 57.1804 46.4462 57.3261 46.0517 57.5071 cv46.4316 58.3101 li46.0774 57.4954 li45.7574 57.6342 45.6273 57.7127 45.493 57.7784 cv45.3416 57.8533 45.2111 57.9738 45.1244 58.1187 cv45.59 58.3972 li45.1657 58.0585 li45.1244 58.1187 li45.59 58.3972 li45.1657 58.0585 li45.4019 58.2471 li45.1726 58.0502 li45.1657 58.0585 li45.4019 58.2471 li45.1726 58.0502 li45.1651 58.0584 li45.1423 58.0856 45.0608 58.162 44.9682 58.3108 cv44.8751 58.4564 44.7898 58.6949 44.7933 58.9312 cv44.7968 59.0095 li45.0019 61.3245 li45.8867 61.2461 li45.7589 60.367 li45.2766 60.4375 44.7687 60.5485 44.2666 60.7606 cv43.7658 60.9717 43.2701 61.2919 42.8568 61.7561 cv42.8169 61.8042 li41.7467 63.1925 40.8255 64.9382 40.3813 66.6717 cv40.3081 66.9595 40.3821 67.2614 40.5801 67.4828 cv40.6122 67.5215 li40.6135 67.5229 li40.9598 67.3203 li40.5668 67.3203 li40.5668 67.4368 40.6068 67.5126 40.6135 67.5229 cv40.9598 67.3203 li40.5668 67.3203 li41.4551 67.3203 li40.6744 66.8964 li40.2057 67.7597 li40.1339 67.8919 40.098 68.0331 40.098 68.1836 cv40.1041 68.184 40.0765 68.3027 40.0701 68.5588 cv40.0701 68.6737 40.0817 68.8204 40.1308 68.981 cv40.1786 69.1413 40.2675 69.3093 40.384 69.4475 cv40.5648 69.612 li40.763 69.7443 40.932 69.7902 41.0837 69.8228 cv41.2358 69.8531 41.3748 69.8623 41.5097 69.8627 cv41.6445 69.8626 41.774 69.8524 41.9006 69.8339 cv42.1453 69.798 42.3616 69.6636 42.5022 69.4601 cv43.0354 68.6886 li43.0339 68.6909 li42.4319 68.2721 li42.7 68.9592 li42.7713 68.9319 42.9165 68.8585 43.0339 68.6909 cv42.4319 68.2721 li42.7 68.9592 li42.5301 68.5239 li42.6051 68.9866 li42.7 68.9592 li42.5301 68.5239 li42.6051 68.9866 li42.5944 68.9207 li42.602 68.9871 li42.6051 68.9866 li42.5944 68.9207 li42.602 68.9871 li42.6133 68.9846 42.7197 68.9812 42.8613 68.982 cv43.0777 68.982 43.2902 68.9012 43.4518 68.7574 cv43.5006 68.714 li43.5921 69.0893 li43.673 69.3 li43.8388 69.584 44.0013 69.6526 44.0839 69.7063 cv44.2157 69.7758 44.2654 69.7905 44.2645 69.7924 cv44.5225 69.2703 li44.048 69.5894 li44.1762 69.767 44.2661 69.7879 44.2645 69.7924 cv44.5225 69.2703 li44.048 69.5894 li44.7852 69.0938 li43.9061 68.9661 li43.7572 69.9913 43.6722 71.0377 43.6722 72.0946 cv43.6722 73.5558 43.8348 75.0378 44.2164 76.5066 cv45.0762 76.2832 li44.1879 76.2832 li44.8773 76.2832 li44.2582 75.9841 li44.2055 76.0909 44.1868 76.2076 44.1879 76.2832 cv44.8773 76.2832 li44.2582 75.9841 li44.8497 76.2699 li44.5293 75.6873 li44.5018 75.7014 44.3537 75.7879 44.2582 75.9841 cv44.8497 76.2699 li44.5293 75.6873 li44.665 75.9341 li44.5412 75.6811 li44.5293 75.6873 li44.665 75.9341 li44.5412 75.6811 li44.523 75.6892 li44.4745 75.7129 44.3297 75.7632 44.1491 75.8988 cv43.9676 76.0304 43.7736 76.2807 43.6957 76.5538 cv43.6166 76.8117 43.6592 77.0927 43.8114 77.3154 cv44.0324 77.6426 44.3651 77.8326 44.6475 77.9183 cv44.9352 78.0072 45.1955 78.023 45.4358 78.0243 cv45.8553 78.0226 46.2351 77.9664 46.4851 77.9531 cv46.8708 77.9298 47.1972 77.6599 47.2925 77.2856 cv47.8335 75.1606 li46.9727 74.9414 li46.9727 75.8297 li47.0827 75.828 47.2164 75.8213 47.3957 75.7477 cv47.5276 75.6942 47.6844 75.5832 47.7883 75.439 cv47.8671 75.3329 47.9126 75.2203 47.9349 75.1405 cv47.9613 75.0187 li47.9625 75.0106 li47.1135 74.8865 li47.8752 75.2798 li47.9716 75.0733 47.9553 75.0172 47.9625 75.0106 cv47.1135 74.8865 li47.8752 75.2798 li47.0921 74.8755 li47.5571 75.624 li47.7195 75.5245 47.8254 75.3797 47.8752 75.2798 cv47.0921 74.8755 li47.5571 75.624 li47.0924 74.8759 li47.0924 75.7568 li47.2131 75.7587 47.3961 75.7258 47.5571 75.624 cv47.0924 74.8759 li47.0924 75.7568 li47.0924 74.9008 li46.7426 75.6831 li46.7936 75.7007 46.8692 75.75 47.0924 75.7568 cv47.0924 74.9008 li46.7426 75.6831 li46.9792 75.154 li46.6683 75.6446 li46.7426 75.6831 li46.9792 75.154 li46.6683 75.6446 li46.7166 75.6768 li47.2148 74.9414 li46.3386 75.0873 li46.6316 76.847 li46.7007 77.2624 47.0524 77.5723 47.4731 77.5888 cv49.4213 77.665 li49.4561 77.6656 li49.5999 77.6693 49.8262 77.6245 50.0054 77.4998 cv50.1392 77.4097 50.2273 77.3 50.2782 77.2214 cv50.4173 76.9803 50.3934 76.975 50.4019 76.9734 cv50.4647 76.8478 50.4957 76.7166 50.4957 76.5762 cv50.4945 76.3691 50.4505 76.1774 50.3551 75.9891 cv50.2582 75.8054 50.1047 75.6027 49.8135 75.47 cv49.7572 75.4475 li49.2641 75.2698 li48.9629 76.1055 li49.8498 76.1558 li49.934 74.5548 50.4031 72.7016 50.4092 70.7252 cv50.4092 69.8929 50.321 69.0343 50.0669 68.1726 cv49.2148 68.4238 li50.0528 68.7185 li50.1885 68.3273 50.215 67.9987 50.2498 67.7927 cv50.2826 67.5782 50.3138 67.5179 50.3296 67.4978 cv49.6074 66.9805 li49.7425 67.8584 li49.775 67.8558 li49.815 67.8562 49.877 67.8667 50.0011 67.9429 cv50.1218 68.017 50.2794 68.1528 50.4503 68.3176 cv51.0645 67.6758 li50.2447 68.0181 li50.2664 68.0584 50.2805 68.148 50.4 68.3522 cv50.4591 68.4491 50.5461 68.5523 50.6364 68.6304 cv50.7271 68.7098 50.8171 68.7679 50.904 68.817 cv51.1078 68.9004 li51.3868 68.975 51.7185 69.0469 52.0962 69.048 cv52.2077 69.0457 li52.6979 69.0254 53.0788 68.6115 53.0584 68.1214 cv53.0381 67.6312 52.6243 67.2503 52.1341 67.2707 cv52.0962 67.2714 li51.9614 67.2726 51.7662 67.239 51.5719 67.1855 cv51.3398 68.043 li51.7757 67.2689 li51.7749 67.2688 li51.5004 67.67 li51.9249 67.442 li51.7749 67.2688 li51.5004 67.67 li51.9249 67.442 li51.6238 67.6037 li51.937 67.4666 li51.9249 67.442 li51.6238 67.6037 li51.937 67.4666 li51.9247 67.4353 li51.8842 67.3335 li51.8363 67.219 51.7683 67.1198 51.6786 67.034 cv51.4811 66.8462 51.2473 66.6278 50.942 66.436 cv50.6401 66.2462 50.2414 66.0789 49.775 66.0792 cv49.6751 66.0792 49.5737 66.0869 49.4723 66.1025 cv49.2377 66.1386 49.0235 66.2702 48.8853 66.4632 cv48.6101 66.8493 48.5387 67.2441 48.4948 67.5164 cv48.453 67.7972 48.4286 67.9871 48.3768 68.1291 cv48.3152 68.3044 48.3103 68.4968 48.3628 68.675 cv48.5576 69.336 48.6325 70.0173 48.6326 70.7252 cv48.6386 72.4084 48.1869 74.2169 48.076 76.0551 cv48.0538 76.4462 48.2932 76.8083 48.6617 76.9411 cv49.1549 77.1189 li49.4561 76.2832 li49.0986 77.0964 li49.3606 76.5004 li48.775 76.8014 li48.8185 76.8811 48.8963 77.0028 49.0986 77.0964 cv49.3606 76.5004 li48.775 76.8014 li49.2132 76.5762 li48.7191 76.5762 li48.775 76.8014 li49.2132 76.5762 li48.7191 76.5762 li49.6074 76.5762 li48.8129 76.1789 li48.7485 76.3221 li48.7412 76.3397 li49.1911 76.5306 li48.7646 76.2931 li48.7412 76.3397 li49.1911 76.5306 li48.7646 76.2931 li49.4483 76.6738 li49.0185 76.0225 li48.8658 76.1239 48.792 76.2439 48.7646 76.2931 cv49.4483 76.6738 li49.0185 76.0225 li49.4561 76.6855 li49.4561 75.889 li49.3581 75.8857 49.17 75.9191 49.0185 76.0225 cv49.4561 76.6855 li49.4561 75.889 li49.4561 76.7773 li49.4908 75.8897 li48.2653 75.8418 li48.0911 74.7955 li48.051 74.5548 47.9151 74.3429 47.7131 74.206 cv47.5839 74.1222 li47.4677 74.0612 li47.4053 74.0385 47.3215 73.987 47.0924 73.9802 cv46.9797 73.9792 46.8193 74.0046 46.6672 74.0873 cv46.5244 74.1628 46.4099 74.2814 46.3459 74.3809 cv46.2258 74.5733 46.2226 74.6754 46.2101 74.7194 cv46.2045 74.7543 li46.6552 74.8199 li46.2051 74.7499 li46.2045 74.7543 li46.6552 74.8199 li46.2051 74.7499 li47.0191 74.8766 li46.2738 74.5266 li46.2215 74.6388 46.2093 74.7263 46.2051 74.7499 cv47.0191 74.8766 li46.2738 74.5266 li47.0281 74.8808 li46.6956 74.1149 li46.5466 74.1695 46.3463 74.3516 46.2738 74.5266 cv47.0281 74.8808 li46.6956 74.1149 li46.9727 74.753 li46.9727 74.0531 li46.9341 74.0548 46.8463 74.0522 46.6956 74.1149 cv46.9727 74.753 li46.9727 74.0531 li46.5676 74.0531 46.2118 74.3297 46.1118 74.7222 cv45.5708 76.8472 li46.4316 77.0664 li46.3781 76.1797 li46.0226 76.203 45.6804 76.2494 45.4358 76.2477 cv45.2992 76.2489 45.2013 76.2317 45.1813 76.2237 cv45.1796 76.2234 li45.0717 76.4547 li45.2785 76.3135 li45.1796 76.2234 li45.0717 76.4547 li45.2785 76.3135 li44.5449 76.8145 li45.3941 77.0751 li44.9405 76.9358 li45.2408 77.3001 li45.3941 77.0751 li44.9405 76.9358 li45.2408 77.3001 li44.9944 77.0012 li45.1911 77.3353 li45.2408 77.3001 li44.9944 77.0012 li45.1911 77.3353 li45.1355 77.2409 li45.1829 77.34 li45.1911 77.3353 li45.1355 77.2409 li45.1829 77.34 li45.1957 77.328 45.2892 77.3096 45.4936 77.1775 cv45.5931 77.1096 45.7248 76.9944 45.8224 76.8239 cv45.9218 76.655 45.9666 76.4492 45.9645 76.2832 cv45.9359 76.0598 li45.5967 74.7539 45.4488 73.4244 45.4488 72.0946 cv45.4488 71.133 45.5262 70.1716 45.6642 69.2214 cv45.6958 69.0037 45.645 68.7806 45.5223 68.5981 cv45.4024 68.4224 45.2714 68.3291 45.1768 68.2691 cv45.0331 68.1819 44.9426 68.1519 44.9254 68.142 cv44.9239 68.1413 li44.6922 68.6249 li45.0019 68.1885 li44.9239 68.1413 li44.6922 68.6249 li45.0019 68.1885 li44.5471 68.8294 li45.2372 68.4578 li45.147 68.2953 45.052 68.2259 45.0019 68.1885 cv44.5471 68.8294 li45.2372 68.4578 li44.4551 68.8789 li45.3181 68.6685 li44.8767 66.858 li44.8029 66.5552 44.5756 66.3131 44.2781 66.2203 cv43.9806 66.1276 43.656 66.1976 43.4232 66.4047 cv42.2708 67.4301 li42.8613 68.0938 li42.8613 67.2054 li42.7141 67.2064 42.5749 67.2027 42.393 67.2228 cv42.3008 67.2346 42.195 67.2504 42.0542 67.3041 cv41.9182 67.3566 41.7242 67.4637 41.5755 67.6763 cv41.5739 67.6785 li41.0407 68.45 li41.7715 68.9551 li41.6424 68.0762 li41.5097 68.0861 li41.4346 68.0812 li41.3605 68.449 li41.568 68.1458 li41.4688 68.0812 41.4344 68.0833 41.4346 68.0812 cv41.3605 68.449 li41.568 68.1458 li41.0664 68.8789 li41.7488 68.3103 li41.414 68.5893 li41.8299 68.4623 li41.7488 68.3103 li41.414 68.5893 li41.8299 68.4623 li41.5138 68.5588 li41.8467 68.5588 li41.8299 68.4623 li41.5138 68.5588 li41.8467 68.5588 li41.8552 68.471 li41.8619 68.4078 41.8742 68.3123 41.8746 68.1836 cv40.9863 68.1836 li41.767 68.6075 li42.2357 67.7442 li42.3075 67.612 42.3434 67.4707 42.3434 67.3203 cv42.3436 67.0673 42.2669 66.8479 42.1803 66.6856 cv42.0925 66.5211 41.995 66.4007 41.9043 66.2984 cv41.2422 66.8906 li42.1031 67.1096 li42.4636 65.679 43.2924 64.0887 44.2222 62.8911 cv43.5195 62.3477 li44.1822 62.9392 li44.4018 62.6945 44.6531 62.5273 44.9594 62.3966 cv45.2645 62.2669 45.6238 62.1816 46.0145 62.1251 cv46.4813 62.0573 46.8132 61.6376 46.7716 61.1677 cv46.5665 58.8528 li45.6816 58.9312 li46.5699 58.9312 li45.9765 58.9312 li46.5218 59.1641 li46.5699 58.9312 li45.9765 58.9312 li46.5218 59.1641 li46.0307 58.9543 li46.4629 59.2691 li46.5218 59.1641 li46.0307 58.9543 li46.4629 59.2691 li46.2563 59.1187 li46.4484 59.2877 li46.4629 59.2691 li46.2563 59.1187 li46.4484 59.2877 li46.4502 59.2787 46.5291 59.2204 46.6491 59.0307 cv45.8867 58.5747 li46.2805 59.371 li46.5016 59.261 46.5219 59.2398 46.7858 59.1247 cv46.8116 59.113 li46.9594 59.0375 47.304 58.9447 47.5002 58.9508 cv47.6292 58.9636 li47.6298 58.963 li47.7151 58.7924 li47.5924 58.9375 li47.6298 58.963 li47.7151 58.7924 li47.5924 58.9375 li48.166 58.2593 li47.5324 58.8818 li47.6362 58.9885 47.704 59.1032 47.7546 59.2493 cv47.8043 59.3945 47.8312 59.5717 47.8311 59.77 cv47.8334 60.1708 47.7144 60.6493 47.5655 61.021 cv47.4078 61.42 47.5589 61.8766 47.9236 62.1026 cv48.1079 62.2174 48.2813 62.2961 48.4248 62.3562 cv48.5701 62.4171 48.6887 62.4631 48.839 62.5334 cv48.8478 62.5374 li49.1864 62.6943 49.4064 62.9085 49.6133 63.2338 cv49.9213 63.7173 50.1251 64.4595 50.3301 65.2651 cv50.5454 66.0682 50.7527 66.9413 51.3124 67.7121 cv52.0264 67.1836 li51.3059 67.7032 li51.3653 67.785 51.4916 67.9551 51.7239 68.0774 cv51.9563 68.1972 52.1685 68.2083 52.3047 68.2086 cv52.7953 68.2086 53.193 67.8109 53.193 67.3203 cv53.193 66.8297 52.7953 66.432 52.3047 66.432 cvcpf52.0781 68.043 mo52.3125 68.9297 li52.1406 70.1387 53.8813 70.9297 53.2876 72.3086 cv53.9282 73.1113 52.5986 74.2207 53.3872 74.8379 cv53.1631 75.4668 53.229 76.3184 52.5488 76.6641 cv52.3857 76.6504 52.3027 76.7266 52.2148 76.8477 cv52.2285 76.9824 li52.5488 77.2051 53.0664 77.2051 53.4985 77.1328 cv54.2622 75.2441 li54.4341 75.168 54.8306 74.9609 55.1021 75.0234 cv54.8306 76.5898 li54.8306 76.6641 54.8306 76.7871 54.9282 76.8477 cv56.1372 76.9102 li56.311 76.9102 56.3462 76.7266 56.2974 76.5898 cv56.2466 76.5039 56.0649 76.5527 55.8911 76.5137 cv55.4731 76.2324 56.1606 75.7148 55.9888 75.2441 cv55.9888 75.1211 56.0864 75.1094 56.2622 75.0352 cv57.1841 74.2695 56.397 73.0605 56.6294 72.0996 cv56.6899 71.1016 57.7642 70.3262 57.3188 69.3242 cv57.9634 68.9668 58.0239 68.127 58.2583 67.4883 cv58.2349 67.3516 58.1958 67.3066 58.1841 67.2422 cv57.9888 67.1914 li57.8013 67.2891 li57.3462 67.7461 57.3462 68.623 56.6294 68.9297 cv56.1606 68.9297 li56.4575 68.252 56.311 67.4883 55.8032 67.0059 cv55.5688 66.9199 55.4106 66.8203 55.2134 66.7813 cv54.6313 66.8711 54.1509 67.0059 53.9067 67.4883 cv53.8813 68.1172 54.3716 68.5859 54.313 69.1523 cv54.1626 69.1523 54.313 69.2754 54.1509 69.1777 cv53.3872 68.3887 li53.2876 68.3262 53.229 68.3887 53.0879 68.3262 cv52.4941 67.2441 li52.3945 67.1582 52.1973 67.1836 52.0264 67.1836 cv52.0781 68.043 licpf52.0781 68.043 mo51.2193 68.27 li51.4537 69.1567 li52.3125 68.9297 li51.4331 68.8046 li51.4189 68.9037 51.4122 69.0024 51.4122 69.099 cv51.4122 69.5125 51.5349 69.8706 51.6753 70.1587 cv51.8897 70.5917 52.1422 70.9124 52.3028 71.1803 cv52.4703 71.4506 52.5261 71.6248 52.5233 71.7363 cv52.5224 71.7949 52.5145 71.8558 52.4717 71.9574 cv52.3417 72.2593 52.3882 72.6058 52.5933 72.8627 cv52.6496 72.8177 li52.5823 72.8394 li52.5933 72.8627 li52.6496 72.8177 li52.5823 72.8394 li52.5801 72.8396 li52.5854 72.8806 52.5446 73.0633 52.4572 73.3086 cv52.3787 73.5584 52.2484 73.8636 52.2406 74.3116 cv52.2399 74.5087 52.2757 74.7401 52.3792 74.9637 cv52.481 75.1878 52.6479 75.389 52.8397 75.5374 cv53.3872 74.8379 li52.5504 74.5397 li52.3939 74.9977 52.3584 75.3792 52.2855 75.611 cv52.2527 75.7265 52.2185 75.7964 52.1981 75.8257 cv52.1463 75.8722 li52.5488 76.6641 li52.6235 75.7789 li52.5123 75.7742 li52.2879 75.7685 52.0155 75.8522 51.8367 75.9824 cv51.6547 76.1105 51.5604 76.2395 51.4959 76.326 cv51.3667 76.504 51.3089 76.7185 51.3311 76.9373 cv51.3447 77.0721 li51.371 77.331 51.5078 77.5632 51.7215 77.7118 cv52.169 78.0123 52.6159 78.0587 53.0078 78.064 cv53.2332 78.0639 53.4469 78.0419 53.6449 78.009 cv53.9494 77.9581 54.2063 77.752 54.3221 77.4658 cv55.0857 75.5771 li54.2622 75.2441 li54.6221 76.0563 li54.7265 76.0093 54.8159 75.9657 54.9009 75.9337 cv54.9977 75.9024 li55.0136 75.8991 li54.9923 75.744 li54.9923 75.9001 li55.0136 75.8991 li54.9923 75.744 li54.9923 75.9001 li54.9923 75.499 li54.9022 75.889 li54.9923 75.9001 li54.9923 75.499 li54.9022 75.889 li55.1021 75.0234 li54.2268 74.8717 li53.9553 76.4381 li53.9423 76.5898 li53.9441 76.6306 53.9357 76.7556 53.9823 76.9445 cv54.0067 77.0393 54.0483 77.1545 54.1261 77.2751 cv54.2028 77.3951 54.3202 77.5169 54.4601 77.6026 cv54.588 77.6819 54.7321 77.727 54.8824 77.7348 cv56.0913 77.7973 li56.1372 77.7985 li56.2829 77.799 56.4484 77.7684 56.6013 77.695 cv56.8345 77.5864 57.0079 77.3867 57.0928 77.2055 cv57.1809 77.0216 57.2049 76.8547 57.2058 76.7052 cv57.2052 76.5588 57.1812 76.4252 57.1339 76.2911 cv57.0621 76.1379 li56.9879 76.0104 56.8792 75.9012 56.7745 75.8307 cv56.5873 75.706 56.4387 75.6796 56.3425 75.6625 cv56.1962 75.6416 56.1283 75.6466 56.0888 75.6438 cv56.0597 75.6424 li56.0402 75.85 li56.0859 75.647 li56.0597 75.6424 li56.0402 75.85 li56.0859 75.647 li55.8911 76.5137 li56.387 75.7767 li56.0695 76.2486 li56.5663 75.98 li56.5109 75.876 56.4312 75.8052 56.387 75.7767 cv56.0695 76.2486 li56.5663 75.98 li56.0229 76.2738 li56.6423 76.2738 li56.6438 76.2019 56.6234 76.0829 56.5663 75.98 cv56.0229 76.2738 li56.6423 76.2738 li56.1933 76.2738 li56.6327 76.3709 li56.6423 76.2738 li56.1933 76.2738 li56.6327 76.3709 li56.4318 76.3265 li56.6294 76.3839 li56.6327 76.3709 li56.4318 76.3265 li56.6294 76.3839 li56.6343 76.3708 li56.649 76.3291 56.7019 76.2218 56.7644 76.0684 cv56.8242 75.9141 56.9028 75.7023 56.9052 75.4082 cv56.9056 75.2631 56.8819 75.0993 56.8232 74.9395 cv55.9888 75.2441 li56.8771 75.2441 li56.1286 75.2441 li56.7656 75.6317 li56.8542 75.49 56.8794 75.3267 56.8771 75.2441 cv56.1286 75.2441 li56.7656 75.6317 li56.1205 75.2392 li56.5627 75.8526 li56.6187 75.813 56.702 75.7374 56.7656 75.6317 cv56.1205 75.2392 li56.5627 75.8526 li56.2048 75.3562 li56.4755 75.9056 li56.5627 75.8526 li56.2048 75.3562 li56.4755 75.9056 li56.3714 75.6942 li56.4624 75.9117 li56.4755 75.9056 li56.3714 75.6942 li56.4624 75.9117 li56.6077 75.8535 li56.8297 75.7185 li57.119 75.481 57.3362 75.1739 57.4562 74.86 cv57.5783 74.5456 57.6111 74.2391 57.6112 73.9689 cv57.6009 73.3309 57.4625 72.825 57.4725 72.5169 cv57.4724 72.4259 57.4809 72.3572 57.4928 72.3086 cv57.5161 72.1534 li57.5184 71.9978 57.6323 71.726 57.8341 71.3527 cv57.9311 71.1661 58.0428 70.9553 58.139 70.7048 cv58.2341 70.4554 58.3147 70.1585 58.315 69.8202 cv58.316 69.5426 58.2562 69.2435 58.1306 68.9634 cv57.3188 69.3242 li57.7496 70.1011 li58.0361 69.9433 58.2638 69.722 58.4257 69.4951 cv58.67 69.152 58.7869 68.808 58.878 68.5137 cv58.9664 68.2187 59.0289 67.9631 59.0922 67.7943 cv59.1457 67.6486 59.1601 67.4912 59.1338 67.3382 cv59.1124 67.2064 59.0707 67.0807 59.0446 67.0159 cv59.0313 66.9824 li59.0297 66.9784 li58.4763 67.1891 li59.0581 67.0833 li59.0297 66.9784 li58.4763 67.1891 li59.0581 67.0833 li58.9962 66.7434 58.742 66.4694 58.4076 66.3825 cv58.2123 66.3317 li57.9994 66.2763 57.7735 66.3019 57.5784 66.4036 cv57.3909 66.5012 li57.1718 66.6623 li56.9574 66.879 56.8285 67.1063 56.7315 67.2997 cv56.5896 67.5919 56.5033 67.824 56.4261 67.9518 cv56.344 68.0844 56.3275 68.0883 56.28 68.113 cv56.6294 68.9297 li56.6294 68.0414 li56.1606 68.0414 li56.1606 68.9297 li56.9743 69.2861 li57.126 68.9399 57.2013 68.5731 57.2013 68.2108 cv57.2022 67.5266 56.9306 66.8512 56.415 66.3618 cv56.3251 66.2764 56.2255 66.2146 56.109 66.1719 cv56.0355 66.1451 55.9602 66.1101 55.8476 66.0609 cv55.7366 66.0131 55.5828 65.9491 55.3859 65.9099 cv55.2824 65.8894 55.1821 65.8872 55.0779 65.9033 cv54.758 65.9544 54.4154 66.0165 54.0548 66.1839 cv53.6968 66.3457 53.3238 66.6598 53.1142 67.0872 cv53.0556 67.2029 53.0244 67.3226 53.0192 67.4523 cv53.0175 67.5357 li53.0206 68.0411 53.1918 68.4142 53.2928 68.6627 cv53.4051 68.9161 53.4359 69.0486 53.4295 69.0573 cv53.4294 69.0612 li54.313 69.1523 li54.313 68.264 li54.2018 68.2665 54.0486 68.2719 53.8419 68.3772 cv53.6893 68.4529 53.5271 68.6138 53.4503 68.7739 cv53.3899 68.8925 53.3685 68.9962 53.3589 69.0589 cv53.3506 69.1336 li54.2057 69.1981 li53.425 68.8455 li53.333 69.0761 53.3582 69.1312 53.3506 69.1336 cv54.2057 69.1981 li53.425 68.8455 li54.2282 69.2083 li53.7583 68.4628 li53.586 68.5691 53.4727 68.7339 53.425 68.8455 cv54.2282 69.2083 li53.7583 68.4628 li54.2274 69.207 li54.2274 68.3271 li54.112 68.3257 53.9291 68.3542 53.7583 68.4628 cv54.2274 69.207 li54.2274 68.3271 li54.2274 69.1851 li54.5026 68.372 li54.4519 68.3566 54.377 68.3293 54.2274 68.3271 cv54.2274 69.1851 li54.5026 68.372 li54.2724 69.0521 li54.61 68.4176 li54.5026 68.372 li54.2724 69.0521 li54.61 68.4176 li54.6092 68.4168 li54.1509 69.1777 li54.7892 68.56 li54.0255 67.7709 li53.8594 67.6363 li53.7464 67.5633 53.5969 67.5071 53.4755 67.4871 cv53.3534 67.4658 53.2739 67.4699 53.2531 67.4691 cv53.2531 67.497 li53.2542 67.4694 li53.2531 67.4691 li53.2531 67.497 li53.2542 67.4694 li53.2328 67.999 li53.4477 67.514 li53.2542 67.4694 li53.2328 67.999 li53.4477 67.514 li53.0879 68.3262 li53.8666 67.8988 li53.2729 66.8168 li53.2221 66.7243 53.1543 66.6405 53.0744 66.5716 cv52.88 66.406 52.6854 66.3485 52.5478 66.3205 cv52.4068 66.2934 52.3034 66.2924 52.2214 66.2918 cv52.1253 66.2921 52.0577 66.2957 52.0264 66.2953 cv51.7823 66.2953 51.5469 66.397 51.3796 66.5746 cv51.2124 66.7523 51.125 66.9934 51.1397 67.237 cv51.1914 68.0964 li51.2193 68.27 li52.0781 68.043 li52.9648 67.9896 li52.9131 67.1302 li52.0264 67.1836 li52.0264 68.0719 li52.122 68.0715 52.1886 68.068 52.2214 68.0684 cv52.2398 68.0687 li52.2797 67.4927 li51.9138 67.9167 li52.121 68.0816 52.2399 68.0629 52.2398 68.0687 cv52.2797 67.4927 li51.9138 67.9167 li52.4941 67.2441 li51.7154 67.6715 li52.3091 68.7535 li52.4024 68.9234 52.5509 69.0599 52.7281 69.1384 cv52.9364 69.2397 53.2102 69.2502 53.2531 69.2457 cv53.2598 69.2457 li53.2667 68.6277 li53.1308 69.2295 li53.2598 69.2457 li53.2667 68.6277 li53.1308 69.2295 li53.2832 68.5544 li52.915 69.1411 li53.1308 69.2295 li53.2832 68.5544 li52.915 69.1411 li53.3872 68.3887 li52.7489 69.0064 li53.5126 69.7955 li53.6926 69.9387 li53.8127 70.005 li53.9332 70.0549 li53.9918 70.073 54.073 70.1015 54.2274 70.1037 cv54.3232 70.1039 54.4554 70.088 54.5962 70.0245 cv54.7278 69.967 54.8537 69.8643 54.9329 69.7606 cv55.0833 69.5593 55.0981 69.4156 55.1125 69.3495 cv55.1223 69.2663 li54.3083 69.205 li55.0902 69.4377 li55.1213 69.3303 55.1213 69.2664 55.1223 69.2663 cv54.3083 69.205 li55.0902 69.4377 li54.2726 69.1944 li54.9444 69.7199 li55.0204 69.6236 55.067 69.5175 55.0902 69.4377 cv54.2726 69.1944 li54.9444 69.7199 li54.2814 69.2012 li54.5508 70 li54.6652 69.9642 54.831 69.8684 54.9444 69.7199 cv54.2814 69.2012 li54.5508 70 li54.313 69.2949 li54.313 70.0406 li54.3579 70.0398 54.4332 70.0385 54.5508 70 cv54.313 69.2949 li54.313 70.0406 li54.7686 70.0406 55.1499 69.6967 55.1966 69.2435 cv55.2061 69.0573 li55.1998 68.5552 55.0246 68.212 54.9308 67.9748 cv54.8258 67.7327 54.791 67.6004 54.7941 67.5357 cv54.7943 67.5243 li53.9067 67.4883 li54.6993 67.8894 li54.8119 67.7912 li54.8981 67.7482 55.0868 67.6979 55.3489 67.6591 cv55.2134 66.7813 li55.0408 67.6526 li55.1411 67.691 li55.2156 67.7229 55.3366 67.7806 55.4974 67.8399 cv55.8032 67.0059 li55.1914 67.6499 li55.3402 67.7916 55.4237 67.988 55.4247 68.2108 cv55.4246 68.328 55.4006 68.4507 55.347 68.5733 cv55.2266 68.848 55.253 69.1647 55.4171 69.4157 cv55.5812 69.6668 55.8607 69.818 56.1606 69.818 cv56.6294 69.818 li56.7476 69.818 56.8701 69.7929 56.9788 69.7464 cv57.3008 69.6106 57.5612 69.3913 57.7396 69.1693 cv58.009 68.833 58.1297 68.5117 58.2325 68.2861 cv58.3299 68.055 58.4098 67.9298 58.4307 67.9158 cv57.8013 67.2891 li58.2116 68.0769 li58.3991 67.9792 li57.9888 67.1914 li57.7652 68.0511 li57.9606 68.1019 li58.1841 67.2422 li57.3101 67.4011 li57.3449 67.576 57.3904 67.6563 57.389 67.6604 cv57.5022 67.6163 li57.3858 67.6503 li57.389 67.6604 li57.5022 67.6163 li57.3858 67.6503 li57.489 67.6201 li57.3828 67.6384 li57.3858 67.6503 li57.489 67.6201 li57.3828 67.6384 li58.2583 67.4883 li57.4244 67.1823 li57.2768 67.5947 57.2044 67.9583 57.1103 68.2007 cv57.0655 68.3216 57.0201 68.4075 56.9835 68.4576 cv56.8881 68.5474 li56.4849 68.7709 56.3199 69.2637 56.5071 69.685 cv56.5384 69.8202 li56.5386 69.8706 56.5258 69.9496 56.4793 70.0711 cv56.4121 70.253 56.2666 70.5081 56.1073 70.8263 cv55.9518 71.1446 55.7752 71.5433 55.7427 72.0458 cv56.6294 72.0996 li55.766 71.8906 li55.7127 72.1116 55.696 72.3224 55.6959 72.5169 cv55.706 73.1578 55.8448 73.6668 55.8346 73.9689 cv55.8346 74.0947 55.8183 74.1708 55.8006 74.2154 cv55.6947 74.3518 li56.2622 75.0352 li55.9167 74.2168 li55.8655 74.2429 55.8072 74.2467 55.6055 74.3579 cv55.5078 74.4151 55.3584 74.5262 55.2479 74.7083 cv55.1356 74.8892 55.0981 75.1001 55.1005 75.2441 cv55.1005 75.3497 55.1181 75.4497 55.1543 75.5488 cv55.5395 75.4082 li55.1286 75.4082 li55.1543 75.5488 li55.5395 75.4082 li55.1286 75.4082 li55.3864 75.4082 li55.1324 75.3608 li55.1286 75.4082 li55.3864 75.4082 li55.1324 75.3608 li55.1902 75.3716 li55.1332 75.3572 li55.1324 75.3608 li55.1902 75.3716 li55.1332 75.3572 li55.1341 75.3624 55.0996 75.4497 55.0377 75.5852 cv54.9834 75.7256 54.8759 75.9106 54.8657 76.2738 cv54.8643 76.4367 54.903 76.6418 55.0035 76.825 cv55.1023 77.0093 55.2505 77.1545 55.3952 77.2506 cv55.4881 77.3132 55.587 77.3558 55.6964 77.3804 cv55.9235 77.4286 56.0746 77.4171 56.0991 77.4215 cv56.1093 77.203 li56.0822 77.4197 li56.0991 77.4215 li56.1093 77.203 li56.0822 77.4197 li56.1655 76.7528 li55.8879 77.3627 li55.9952 77.4101 56.0557 77.4154 56.0822 77.4197 cv56.1655 76.7528 li55.8879 77.3627 li56.2185 76.6364 li55.5326 77.0417 li55.6257 77.2045 55.7839 77.3189 55.8879 77.3627 cv56.2185 76.6364 li55.5326 77.0417 li56.2974 76.5898 li55.4608 76.8885 li55.9744 76.7052 li55.4292 76.7052 li55.4608 76.8885 li55.9744 76.7052 li55.4292 76.7052 li56.0897 76.7052 li55.5707 76.3064 li55.444 76.478 55.4312 76.6151 55.4292 76.7052 cv56.0897 76.7052 li55.5707 76.3064 li56.1525 76.7534 li55.8369 76.0912 li55.7293 76.1416 55.6333 76.2235 55.5707 76.3064 cv56.1525 76.7534 li55.8369 76.0912 li56.1372 76.7213 li56.1372 76.0219 li56.0552 76.0213 55.9441 76.0396 55.8369 76.0912 cv56.1372 76.7213 li56.1372 76.0219 li56.1372 76.9102 li56.1831 76.023 li54.9741 75.9605 li54.9282 76.8477 li55.3963 76.0927 li55.0235 76.694 li55.6174 76.3095 li55.5682 76.2318 55.4874 76.1481 55.3963 76.0927 cv55.0235 76.694 li55.6174 76.3095 li55.0892 76.6515 li55.7149 76.5612 li55.7079 76.5182 55.6928 76.4283 55.6174 76.3095 cv55.0892 76.6515 li55.7149 76.5612 li55.3307 76.6166 li55.7188 76.6016 li55.7149 76.5612 li55.3307 76.6166 li55.7188 76.6016 li55.7189 76.5898 li54.8306 76.5898 li55.7058 76.7415 li55.9773 75.1751 li56.0579 74.7103 55.7615 74.264 55.3019 74.1579 cv55.1892 74.132 55.0857 74.1236 54.9923 74.1235 cv54.6751 74.1278 54.4545 74.2063 54.2712 74.2724 cv54.0936 74.34 53.9478 74.4126 53.9023 74.432 cv53.6916 74.5254 53.5251 74.6975 53.4387 74.9111 cv52.675 76.7998 li53.4985 77.1328 li53.3521 76.2567 li53.2365 76.2761 53.1139 76.2876 53.0078 76.2874 cv52.9146 76.2877 52.8342 76.2783 52.7848 76.2666 cv52.735 76.2516 li52.7328 76.2569 li52.7355 76.253 li52.735 76.2516 li52.7328 76.2569 li52.7355 76.253 li52.2285 76.9824 li53.1123 76.8928 li53.0986 76.758 li52.2148 76.8477 li52.9338 77.3693 li52.9395 77.3616 li52.5795 77.0744 li52.8111 77.4667 li52.9023 77.412 52.9388 77.3617 52.9395 77.3616 cv52.5795 77.0744 li52.8111 77.4667 li52.5123 76.9604 li52.5123 77.5508 li52.8111 77.4667 li52.5123 76.9604 li52.5123 77.5508 li52.5123 77.0973 li52.4741 77.5492 li52.5123 77.5508 li52.5123 77.0973 li52.4741 77.5492 li52.638 77.563 52.8047 77.5304 52.9513 77.4559 cv53.2597 77.3016 53.5092 77.0635 53.6724 76.817 cv53.9195 76.4435 54.004 76.0818 54.0704 75.7915 cv54.1325 75.4995 54.1762 75.2632 54.224 75.1361 cv54.3527 74.7747 54.2368 74.3748 53.9347 74.1384 cv53.801 74.3092 li53.993 74.2208 li53.9347 74.1384 li53.801 74.3092 li53.993 74.2208 li53.7958 74.3116 li54.0172 74.3116 li53.993 74.2208 li53.7958 74.3116 li54.0172 74.3116 li54.0407 74.1902 li54.0707 74.0728 54.1376 73.8927 54.2083 73.6711 cv54.2768 73.4483 54.3547 73.1783 54.3567 72.8396 cv54.3627 72.5039 54.2506 72.0822 53.9819 71.7545 cv53.2876 72.3086 li54.1035 72.6598 li54.235 72.3566 54.3007 72.0381 54.2999 71.7363 cv54.3001 71.3198 54.1813 70.9548 54.0407 70.6592 cv53.8266 70.2149 53.5693 69.8862 53.4064 69.6184 cv53.2356 69.3481 53.1846 69.1803 53.1888 69.099 cv53.1919 69.0548 li53.2086 68.9378 53.2015 68.817 53.1713 68.7027 cv52.9369 67.816 li52.0781 68.043 li52.9648 67.9896 li52.0781 68.043 licpf52.3047 67.3203 mo52.1504 67.3203 52.0996 67.2852 52.0264 67.1836 cv50.9102 65.6758 51.2764 62.6641 49.2148 61.7285 cv48.8594 61.5625 48.6563 61.5117 48.3916 61.3477 cv48.7461 60.4512 48.9863 59.0942 48.166 58.2593 cv47.748 57.9058 46.8857 58.0952 46.4316 58.3101 cv46.1396 58.437 46.0645 58.4868 45.8867 58.5747 cv45.8242 58.6792 45.6816 58.7534 45.6816 58.9312 cv45.8867 61.2461 li45.0137 61.373 44.1523 61.6387 43.5195 62.3477 cv42.5195 63.6406 41.6445 65.3086 41.2422 66.8906 cv41.3662 67.0293 41.4551 67.1699 41.4551 67.3203 cv40.9863 68.1836 li40.9863 68.4238 40.8857 68.6621 41.0664 68.8789 cv41.2148 68.9805 41.5195 68.9922 41.7715 68.9551 cv42.3047 68.1836 li42.3672 68.0938 42.5703 68.0938 42.8613 68.0938 cv44.0137 67.0684 li44.4551 68.8789 li44.4961 68.9551 44.709 68.9805 44.7852 69.0938 cv44.4434 71.4473 44.4551 73.8926 45.0762 76.2832 cv45.0762 76.5605 44.6582 76.4453 44.5449 76.8145 cv44.873 77.2949 45.7852 77.1055 46.4316 77.0664 cv46.9727 74.9414 li47.1885 74.9414 46.9727 74.7773 47.2148 74.9414 cv47.5078 76.7012 li49.4561 76.7773 li49.5449 76.7773 49.5449 76.7012 49.6074 76.5762 cv49.6074 76.4453 49.5449 76.3223 49.4561 76.2832 cv48.9629 76.1055 li49.1016 73.6621 49.9727 70.9941 49.2148 68.4238 cv49.4023 67.8906 49.3164 67.3867 49.6074 66.9805 cv50.1914 66.8906 50.6563 67.2852 51.0645 67.6758 cv51.1387 67.8535 51.1387 67.9297 51.3398 68.043 cv51.5996 68.1133 51.8916 68.1699 52.1709 68.1582 cvf52.3047 66.8203 mo52.2869 66.8199 li52.2774 66.954 li52.3139 66.8256 li52.2869 66.8199 li52.2774 66.954 li52.3139 66.8256 li52.2365 67.0978 li52.4198 66.8825 li52.3139 66.8256 li52.2365 67.0978 li52.4198 66.8825 li52.3001 67.023 li52.4404 66.9025 li52.4198 66.8825 li52.3001 67.023 li52.4404 66.9025 li52.4319 66.8911 li52.4302 66.8888 li52.4282 66.8861 li51.9704 66.2872 51.7635 65.1993 51.4555 64.1027 cv51.2965 63.5545 51.1033 63.0006 50.7911 62.4988 cv50.4808 61.9982 50.0363 61.5504 49.4215 61.2732 cv49.2148 61.7285 li49.4264 61.2755 li49.0294 61.0927 48.8493 61.0462 48.655 60.9227 cv48.3916 61.3477 li48.8566 61.5315 li49.0515 61.0358 49.2181 60.4181 49.2194 59.77 cv49.2215 59.1354 49.047 58.442 48.5227 57.9089 cv48.5065 57.8924 li48.4889 57.8775 li48.1818 57.6234 47.823 57.5645 47.5002 57.5625 cv47.0156 57.566 46.5583 57.7001 46.2178 57.8581 cv46.4316 58.3101 li46.2323 57.8515 li45.9245 57.9851 45.8184 58.0511 45.6651 58.1265 cv45.5332 58.1917 li45.4576 58.318 li45.59 58.3972 li45.4692 58.3008 li45.4576 58.318 li45.59 58.3972 li45.4692 58.3008 li45.471 58.3025 45.4167 58.351 45.3407 58.4517 cv45.265 58.5499 45.1783 58.7331 45.1816 58.9312 cv45.1816 58.9532 li45.3887 61.2902 li45.8867 61.2461 li45.8148 60.7513 li44.8967 60.884 43.8951 61.1771 43.1465 62.0147 cv43.1347 62.0279 li43.124 62.0418 li42.0845 63.3884 41.1835 65.1001 40.7576 66.7674 cv40.692 67.0255 li40.8695 67.2239 li40.9532 67.3349 li40.9579 67.3446 li41.0444 67.3203 li40.9551 67.3203 li40.9579 67.3446 li41.0444 67.3203 li40.9551 67.3203 li41.4551 67.3203 li41.0157 67.0817 li40.5469 67.945 li40.4863 68.0566 li40.4863 68.1836 li40.4898 68.2373 40.462 68.361 40.4584 68.5588 cv40.4534 68.7323 40.5076 68.9967 40.6823 69.199 cv40.7267 69.2523 li40.7841 69.2916 li41.0506 69.4601 41.2796 69.4669 41.5097 69.4744 cv41.624 69.4743 41.7362 69.4656 41.8441 69.4498 cv42.0592 69.4182 li42.7174 68.4658 li42.7151 68.4691 li42.4319 68.2721 li42.5589 68.5974 li42.7151 68.4691 li42.4319 68.2721 li42.5589 68.5974 li42.4991 68.4443 li42.5395 68.6039 li42.5589 68.5974 li42.4991 68.4443 li42.5395 68.6039 li42.5582 68.6013 li42.6058 68.5952 42.719 68.5933 42.8613 68.5937 cv43.0516 68.5937 li43.7248 67.9946 li43.9693 68.9973 li43.9845 69.0595 li44.0148 69.116 li44.1127 69.2841 44.2133 69.3297 44.2716 69.3664 cv44.3634 69.4152 44.4151 69.4324 44.4366 69.4443 cv44.444 69.4482 li44.5633 69.2429 li44.3702 69.3727 li44.444 69.4482 li44.5633 69.2429 li44.3702 69.3727 li44.7852 69.0938 li44.2903 69.0219 li44.1438 70.0307 44.0605 71.0585 44.0605 72.0946 cv44.0605 73.5271 44.2199 74.9757 44.5922 76.4089 cv45.0762 76.2832 li44.5762 76.2832 li44.8863 76.2832 li44.6899 76.0464 li44.5762 76.2832 li44.8863 76.2832 li44.6899 76.0464 li44.7994 76.1785 li44.7164 76.0275 li44.6899 76.0464 li44.7994 76.1785 li44.7164 76.0275 li44.7171 76.0319 44.6118 76.0649 44.4662 76.1514 cv44.3201 76.235 44.1355 76.4246 44.0669 76.6678 cv43.9963 76.8978 li44.132 77.0964 li44.2946 77.3364 44.538 77.4785 44.7642 77.5479 cv44.9934 77.6192 45.2182 77.6353 45.4358 77.636 cv45.817 77.635 46.1887 77.581 46.4618 77.5655 cv46.8261 77.5435 li47.4572 75.0648 li46.9727 74.9414 li46.9727 75.4414 li47.0503 75.4405 47.136 75.4347 47.244 75.3903 cv47.4758 75.2085 li47.5692 75.0817 47.5768 74.9552 47.5783 74.9544 cv47.1153 74.8872 li47.5329 75.0963 li47.5845 74.982 47.5748 74.9545 47.5783 74.9544 cv47.1153 74.8872 li47.5329 75.0963 li47.0922 74.8755 li47.3564 75.2916 li47.4482 75.2339 47.5061 75.1516 47.5329 75.0963 cv47.0922 74.8755 li47.3564 75.2916 li47.0924 74.8759 li47.0924 75.3685 li47.1606 75.3696 47.2654 75.3504 47.3564 75.2916 cv47.0924 74.8759 li47.0924 75.3685 li47.0924 74.9008 li46.9011 75.3286 li46.9273 75.3374 46.968 75.3646 47.0924 75.3685 cv47.0924 74.9008 li46.9011 75.3286 li47.0321 75.0355 li46.8724 75.3142 li46.9011 75.3286 li47.0321 75.0355 li46.8724 75.3142 li46.8732 75.3148 li46.9344 75.3553 li47.2148 74.9414 li46.7216 75.0235 li47.0815 77.1849 li49.4463 77.2773 li49.4561 77.2773 li49.5467 77.2794 49.6814 77.2521 49.7881 77.1779 cv49.9508 77.0614 49.9896 76.9419 50.0137 76.8948 cv50.0546 76.7998 li50.1074 76.6942 li50.1074 76.5762 li50.1067 76.431 50.0751 76.2954 50.0097 76.1667 cv49.9435 76.0405 49.8406 75.9087 49.6573 75.8255 cv49.6416 75.8186 li49.1324 75.6351 li48.9629 76.1055 li49.4621 76.1338 li49.5522 74.481 50.0174 72.6375 50.0209 70.7252 cv50.0209 69.9201 49.9356 69.1003 49.6944 68.2824 cv49.2148 68.4238 li49.6865 68.5897 li49.8039 68.253 49.8299 67.9547 49.8662 67.7323 cv49.9015 67.5052 49.9414 67.3717 50.0139 67.2716 cv49.6074 66.9805 li49.6835 67.4746 li49.775 67.4675 li49.9082 67.4677 50.0437 67.5125 50.2067 67.6136 cv50.3678 67.7134 50.5421 67.8672 50.7188 68.037 cv51.0645 67.6758 li50.6031 67.8684 li50.6315 67.93 50.6475 68.0081 50.7298 68.1474 cv50.8139 68.2876 50.9567 68.4042 51.0945 68.4786 cv51.1489 68.5093 li51.2092 68.5256 li51.4698 68.5956 51.7716 68.6591 52.0962 68.6597 cv52.1916 68.6578 li52.1502 67.6586 li52.0962 67.6597 li51.9083 67.6604 51.6833 67.6185 51.4705 67.5603 cv51.3398 68.043 li51.5852 67.6073 li51.5556 67.5893 li51.5515 67.5864 li51.4653 67.688 li51.5716 67.6085 li51.5515 67.5864 li51.4653 67.688 li51.5716 67.6085 li51.4632 67.6895 li51.583 67.6261 li51.5716 67.6085 li51.4632 67.6895 li51.583 67.6261 li51.5704 67.5954 li51.5258 67.4831 li51.4856 67.3867 li51.4101 67.3145 li51.2184 67.1318 51.0013 66.9315 50.7363 66.7653 cv50.4733 66.6004 50.1483 66.4673 49.775 66.4675 cv49.5314 66.4863 li49.3235 66.5183 li49.201 66.6893 li48.9824 66.9954 48.9198 67.3171 48.8784 67.5768 cv48.8381 67.8412 48.8133 68.0615 48.7432 68.258 cv48.6896 68.4103 li48.7353 68.5652 li48.943 69.27 49.0208 69.9901 49.0209 70.7252 cv49.0243 72.4725 48.5688 74.2907 48.4637 76.0771 cv48.4426 76.4494 li49.2865 76.7536 li49.4561 76.2832 li49.2549 76.7409 li49.3606 76.5004 li49.1204 76.6239 li49.1331 76.646 49.1604 76.6968 49.2549 76.7409 cv49.3606 76.5004 li49.1204 76.6239 li49.2132 76.5762 li49.1074 76.5762 li49.1204 76.6239 li49.2132 76.5762 li49.1074 76.5762 li49.6074 76.5762 li49.1602 76.3526 li49.1076 76.47 li49.0987 76.4914 li49.097 76.4952 li49.422 76.6473 li49.1961 76.3734 li49.097 76.4952 li49.422 76.6473 li49.1961 76.3734 li49.4561 76.6886 li49.4561 76.2773 li49.1961 76.3734 li49.4561 76.6886 li49.4561 76.2773 li49.4561 76.7773 li49.4756 76.2777 li47.9342 76.2175 li47.6728 74.6477 li47.4953 74.5275 li47.3845 74.4554 li47.3092 74.4157 li47.2716 74.4018 47.2227 74.3723 47.0924 74.3685 cv46.8515 74.4292 li46.6696 74.5953 li46.6015 74.7044 46.5994 74.7629 46.5922 74.7889 cv46.5887 74.8103 li46.9148 74.8578 li46.5916 74.7937 li46.5887 74.8103 li46.9148 74.8578 li46.5916 74.7937 li47.0321 74.881 li46.7898 74.5034 li46.6707 74.5691 46.5924 74.744 46.5916 74.7937 cv47.0321 74.881 li46.7898 74.5034 li46.9727 74.7884 li46.9727 74.4414 li46.9674 74.4435 46.9029 74.435 46.7898 74.5034 cv46.9727 74.7884 li46.9727 74.4414 li46.584 74.4414 li45.9471 76.943 li46.4316 77.0664 li46.4015 76.5673 li46.0691 76.5884 45.7186 76.6369 45.4358 76.636 cv45.2765 76.6367 45.1431 76.6197 45.0647 76.5941 cv44.9578 76.5325 li44.5449 76.8145 li45.0229 76.9611 li44.9405 76.9358 li44.9938 77.0005 li45.0229 76.9611 li44.9405 76.9358 li44.9938 77.0005 li44.9941 77.0007 li45.0083 76.9885 45.0779 76.9688 45.2178 76.8927 cv45.2863 76.8528 45.3801 76.7877 45.4584 76.6741 cv45.5377 76.5617 45.5784 76.4096 45.5762 76.2832 cv45.5762 76.2193 li45.5601 76.1575 li45.2116 74.816 45.0605 73.4531 45.0605 72.0946 cv45.0605 71.1122 45.1396 70.1322 45.28 69.1656 cv45.3077 68.9748 li45.2001 68.8148 li45.0402 68.5959 44.8831 68.5554 44.8092 68.5152 cv44.7646 68.4954 li44.7533 68.4901 li44.5897 68.8064 li44.8953 68.6419 li44.8064 68.4966 44.7508 68.4953 44.7533 68.4901 cv44.5897 68.8064 li44.8953 68.6419 li44.4551 68.8789 li44.9408 68.7605 li44.3025 66.1421 li42.5289 67.7202 li42.8613 68.0938 li42.8613 67.5938 li42.7149 67.5943 42.5825 67.5922 42.4386 67.6084 cv42.366 67.6175 42.2888 67.6301 42.1954 67.6659 cv42.1046 67.7009 41.9847 67.7686 41.8942 67.8981 cv41.8928 67.9001 li41.3602 68.6708 li41.7715 68.9551 li41.6988 68.4604 li41.5097 68.4744 li41.3579 68.4619 li41.3277 68.454 li41.2922 68.5488 li41.3487 68.4662 li41.3277 68.454 li41.2922 68.5488 li41.3487 68.4662 li41.0664 68.8789 li41.4505 68.5588 li41.414 68.5893 li41.4586 68.5757 li41.4505 68.5588 li41.414 68.5893 li41.4586 68.5757 li41.4456 68.5796 li41.4593 68.5779 li41.4586 68.5757 li41.4456 68.5796 li41.4593 68.5779 li41.4584 68.5588 li41.4548 68.5113 41.4829 68.383 41.4863 68.1836 cv40.9863 68.1836 li41.4257 68.4222 li41.8945 67.5589 li41.9551 67.4473 li41.9551 67.3203 li41.9552 67.145 41.9023 66.9898 41.8371 66.8672 cv41.7712 66.7435 41.693 66.6452 41.6149 66.5573 cv41.2422 66.8906 li41.7268 67.0139 li42.1056 65.5171 42.9546 63.8928 43.915 62.6535 cv43.5195 62.3477 li43.8926 62.6806 li44.4096 62.1002 45.1307 61.8621 45.9587 61.7409 cv46.4265 61.6729 li46.1797 58.887 li45.6816 58.9312 li46.1816 58.9312 li45.9765 58.9312 li46.1647 59.0115 li46.1816 58.9312 li45.9765 58.9312 li46.1647 59.0115 li46.0307 58.9543 li46.149 59.0405 li46.1647 59.0115 li46.0307 58.9543 li46.149 59.0405 li46.1438 59.0364 46.2078 58.9959 46.3158 58.8314 cv45.8867 58.5747 li46.1084 59.0229 li46.3105 58.9226 46.3548 58.8889 46.631 58.7686 cv46.6383 58.7654 li46.6455 58.762 li46.8472 58.6634 47.2233 58.5591 47.5002 58.5625 cv47.6911 58.5606 47.8134 58.6103 47.8431 58.641 cv48.166 58.2593 li47.8093 58.6097 li48.1002 58.9063 48.2173 59.3004 48.2194 59.77 cv48.2207 60.24 48.0884 60.7574 47.9266 61.1638 cv47.773 61.5524 li48.1282 61.7726 li48.4632 61.9772 48.6894 62.0323 49.0033 62.1815 cv49.0055 62.1826 li49.0082 62.1838 li49.4241 62.3744 49.7069 62.6539 49.9427 63.0282 cv50.2951 63.5872 50.4997 64.3644 50.7059 65.1674 cv50.918 65.969 51.1265 66.8 51.6245 67.4811 cv52.0264 67.1836 li51.6208 67.4761 li51.6703 67.5443 51.755 67.655 51.9037 67.7332 cv52.0525 67.8101 52.1943 67.8201 52.3047 67.8203 cv52.3047 66.8203 licp0 0 0 1 cmykf42.2285 66.6641 mo42.4434 67.0684 li44.293 65.4219 li44.3809 65.3086 44.5957 65.3086 44.8105 65.3086 cv45.3301 65.6543 li45.291 68.3965 li48.166 68.2715 li48.8086 64.793 li48.8086 64.6641 49.0371 64.4238 49.2148 64.3477 cv49.7354 64.5508 li50.3271 65.9688 li50.1914 64.8926 49.7734 63.3711 48.9629 62.5 cv47.9746 61.9063 46.7852 62.3477 45.7344 62.1094 cv43.458 62.9063 43.0645 64.8418 42.1543 66.6016 cv42.2285 66.6641 licp0 0 0 0 cmykf45.5059 70.7402 mo45.8867 75.2578 li46.9492 71.2832 li47.0391 71.1816 47.2676 71.1816 47.5078 71.1816 cv47.7227 71.2207 47.8994 71.4238 48.0381 71.6504 cv48.1787 73.5723 li48.3916 69.2949 li46.0244 69.2949 li45.5059 70.7402 licpf46.6836 59.2461 mo46.8115 61.0059 li46.8613 61.207 47.0391 61.082 47.2148 61.1348 cv47.748 60.6641 47.8594 59.7793 47.6582 59.1699 cv47.584 58.9692 47.5313 58.8667 47.4551 58.8667 cv46.6836 59.0942 li46.6836 59.2461 licpf39.855 7.36182 mo39.8418 7.48096 39.8159 8.00391 39.7896 8.14648 cv39.6851 8.27734 li39.5933 8.13477 li39.5933 8.03955 39.5542 7.8374 39.4756 7.68311 cv39.397 7.52832 39.0962 7.31445 38.5864 7.30225 cv36.5718 7.2666 li36.4937 7.2666 36.4541 7.30225 36.4541 7.39746 cv36.4541 10.6792 li36.5459 10.7861 li38.2202 10.7744 li38.4424 10.7744 38.6255 10.7744 38.8086 10.7627 cv39.1226 10.7388 39.2925 10.7031 39.4102 10.5483 cv39.5542 10.4297 li39.6196 10.5249 li39.6196 10.5962 39.5542 10.7983 39.5146 11.1904 cv39.4888 11.4282 39.4624 11.9038 39.4624 11.9873 cv39.4624 12.0942 39.4624 12.2134 39.3711 12.2134 cv39.2793 12.106 li39.2661 11.9873 39.2534 11.8208 39.2012 11.6782 cv39.1357 11.5117 38.9263 11.2979 38.521 11.25 cv38.1938 11.2144 36.7681 11.2144 36.5459 11.2144 cv36.4541 11.3213 li36.4541 12.332 li36.4541 13.4736 36.4541 14.4131 36.5195 14.9121 cv36.5591 15.2573 36.6372 15.5186 37.0298 15.5664 cv37.2129 15.5898 37.5005 15.6138 37.6182 15.6138 cv37.7231 15.6851 li37.7231 15.7446 37.6577 15.7803 37.5137 15.7803 cv36.7944 15.7803 35.9702 15.7446 35.9048 15.7446 cv35.8394 15.7446 35.0156 15.7803 34.623 15.7803 cv34.4795 15.7803 34.4141 15.7563 34.4141 15.6851 cv34.5186 15.6138 li34.6362 15.6138 34.793 15.5898 34.9111 15.5664 cv35.1724 15.5186 35.2378 15.2573 35.29 14.9121 cv35.3555 14.4131 35.3555 13.4736 35.3555 12.332 cv35.3555 10.2393 li35.3555 8.38428 35.3555 8.05176 35.3296 7.6709 cv35.3032 7.2666 35.1987 7.07666 34.7671 6.99316 cv34.6626 6.96973 34.4399 6.95752 34.3223 6.95752 cv34.2178 6.88623 li34.2178 6.81494 34.2832 6.79102 34.4268 6.79102 cv35.0156 6.79102 35.8394 6.82666 35.9048 6.82666 cv36.1665 6.82666 38.8218 6.82666 39.1226 6.81494 cv39.3711 6.80322 39.5801 6.80322 39.6978 6.76758 cv39.8809 6.6958 li39.9595 6.80322 li39.9595 6.88623 39.894 7.02881 39.855 7.36182 cvcp/0 <</Name (PANTONE 121 CVC)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.09 0.69 0 ] >>/CSD add_res1 /0 /CSD get_res sepcs0 sepf46.1328 7.02881 mo43.9487 7.02881 42.314 8.33691 42.314 10.9409 cv42.314 13.7114 44.145 15.4951 46.499 15.4951 cv47.6763 15.4951 50.1089 14.8765 50.1089 11.4165 cv50.1089 8.56299 48.1997 7.02881 46.1328 7.02881 cvcp46.146 15.9468 mo42.5625 15.9468 41.0713 13.4141 41.0713 11.2739 cv41.0713 9.34766 42.6147 6.62451 46.2246 6.62451 cv49.1675 6.62451 51.3647 8.31299 51.3647 11.0835 cv51.3647 13.7471 49.2983 15.9468 46.146 15.9468 cvcpf56.0073 7.17188 mo55.6157 7.17188 55.2622 7.20752 55.1313 7.24316 cv55.0269 7.38574 li55.0269 11.2739 li55.1187 11.4165 li55.3149 11.5234 55.9165 11.6069 56.4917 11.6069 cv56.8052 11.6069 57.1714 11.5713 57.4731 11.3809 cv57.9302 11.0957 58.271 10.4536 58.271 9.5498 cv58.271 8.06348 57.4077 7.17188 56.0073 7.17188 cvcp62.4165 15.7803 mo61.4878 15.7803 li60.7554 15.7803 60.4282 15.7207 60.0884 15.5542 cv59.5259 15.2808 59.0688 14.6982 58.3228 13.8066 cv57.7739 13.1523 57.1587 12.356 56.897 12.0469 cv56.7271 11.9756 li55.1187 11.9517 li55.0269 12.0469 li55.0269 12.332 li55.0269 13.4736 55.0269 14.4131 55.0923 14.9121 cv55.1313 15.2573 55.2095 15.5186 55.6021 15.5664 cv55.7856 15.5898 56.0728 15.6138 56.1909 15.6138 cv56.2954 15.6851 li56.2954 15.7446 56.23 15.7803 56.0864 15.7803 cv55.3667 15.7803 54.5425 15.7446 54.4771 15.7446 cv54.4644 15.7446 53.6401 15.7803 53.2476 15.7803 cv53.104 15.7803 53.0386 15.7563 53.0386 15.6851 cv53.1436 15.6138 li53.2612 15.6138 53.4185 15.5898 53.5356 15.5664 cv53.7974 15.5186 53.8628 15.2573 53.9155 14.9121 cv53.981 14.4131 53.981 13.4736 53.981 12.332 cv53.981 10.2393 li53.981 8.38428 53.981 8.05176 53.9546 7.6709 cv53.9282 7.2666 53.8237 7.08838 53.3921 6.99316 cv53.2876 6.98145 53.0649 6.95752 52.9473 6.95752 cv52.8428 6.88623 li52.8428 6.81494 52.9082 6.79102 53.0518 6.79102 cv53.6401 6.79102 54.4644 6.82666 54.5298 6.82666 cv54.6733 6.82666 55.6675 6.79102 56.0728 6.79102 cv56.897 6.79102 57.7739 6.8623 58.4663 7.31445 cv58.7935 7.52832 59.3696 8.11084 59.3696 8.93164 cv59.3696 9.81152 58.9634 10.6914 57.7866 11.6782 cv58.8589 12.9268 59.7485 13.9849 60.5073 14.7222 cv61.2134 15.3999 61.7759 15.5308 62.103 15.5781 cv62.3511 15.6138 62.5347 15.6138 62.6128 15.6138 cv62.731 15.6851 li62.731 15.7563 62.6519 15.7803 62.4165 15.7803 cvcpf69.6626 8.53906 mo68.4331 7.36182 66.9419 7.19531 65.3853 7.19531 cv65.1245 7.19531 64.6401 7.23096 64.5356 7.27881 cv64.4175 7.32617 64.3784 7.38574 64.3784 7.5166 cv64.3657 7.9209 64.3657 9.13379 64.3657 10.0493 cv64.3657 11.5234 li64.3657 12.7837 64.3784 13.8779 64.3921 14.1035 cv64.4048 14.4009 64.4312 14.8765 64.5356 15.0073 cv64.7056 15.2334 65.2153 15.4829 66.7593 15.4829 cv67.9751 15.4829 69.1001 15.0786 69.8716 14.3774 cv70.5522 13.771 70.9185 12.6294 70.9185 11.5356 cv70.9185 10.0254 70.1987 9.05029 69.6626 8.53906 cvcp70.6831 14.52 mo70.1206 15.0552 68.9429 15.8872 66.7202 15.8872 cv65.5952 15.8872 63.9468 15.7446 63.8159 15.7446 cv63.7505 15.7446 62.9272 15.7803 62.5347 15.7803 cv62.3901 15.7803 62.3247 15.7563 62.3247 15.6851 cv62.4302 15.6138 li62.5474 15.6138 62.7046 15.5898 62.8218 15.5664 cv63.0835 15.5186 63.1489 15.2573 63.2017 14.9121 cv63.2671 14.4131 63.2671 13.4736 63.2671 12.332 cv63.2671 10.2393 li63.2671 8.38428 63.2671 8.05176 63.2407 7.6709 cv63.2144 7.2666 63.1099 7.07666 62.6782 6.99316 cv62.5737 6.96973 62.3511 6.95752 62.2339 6.95752 cv62.1294 6.88623 li62.1294 6.81494 62.1948 6.79102 62.3384 6.79102 cv62.9272 6.79102 63.7505 6.82666 63.8159 6.82666 cv63.9731 6.82666 64.7974 6.79102 65.5815 6.79102 cv66.8765 6.79102 69.27 6.68408 70.8267 8.14648 cv71.481 8.76514 72.0952 9.75195 72.0952 11.167 cv72.0952 12.665 71.4155 13.8184 70.6831 14.52 cvcpf40.6504 21.7554 mo40.6377 21.8745 40.6113 22.3975 40.585 22.54 cv40.4805 22.6709 li40.3892 22.5283 li40.3892 22.4331 40.3496 22.231 40.2715 22.0767 cv40.1929 21.9219 39.8921 21.708 39.3818 21.6958 cv37.3677 21.6602 li37.2891 21.6602 37.25 21.6958 37.25 21.791 cv37.25 25.0728 li37.3413 25.1797 li39.0156 25.168 li39.2378 25.168 39.4209 25.168 39.604 25.1563 cv39.918 25.1323 40.0884 25.0967 40.2061 24.9419 cv40.3496 24.8232 li40.415 24.9185 li40.415 24.9897 40.3496 25.1919 40.3105 25.584 cv40.2842 25.8218 40.2583 26.2974 40.2583 26.3809 cv40.2583 26.4878 40.2583 26.6069 40.1665 26.6069 cv40.0752 26.4995 li40.062 26.3809 40.0488 26.2144 39.9966 26.0718 cv39.9312 25.9053 39.7217 25.6914 39.3164 25.6436 cv38.9893 25.6079 37.564 25.6079 37.3413 25.6079 cv37.25 25.7148 li37.25 26.7256 li37.25 27.8672 37.25 28.8066 37.3154 29.3057 cv37.3545 29.6509 37.4331 29.9121 37.8252 29.96 cv38.0083 29.9834 38.2964 30.0073 38.4141 30.0073 cv38.5186 30.0786 li38.5186 30.1382 38.4531 30.1738 38.3096 30.1738 cv37.5898 30.1738 36.7661 30.1382 36.7007 30.1382 cv36.6353 30.1382 35.811 30.1738 35.4189 30.1738 cv35.2749 30.1738 35.2095 30.1499 35.2095 30.0786 cv35.314 30.0073 li35.4316 30.0073 35.5889 29.9834 35.7065 29.96 cv35.9683 29.9121 36.0337 29.6509 36.0859 29.3057 cv36.1514 28.8066 36.1514 27.8672 36.1514 26.7256 cv36.1514 24.6328 li36.1514 22.7778 36.1514 22.4453 36.125 22.0645 cv36.0991 21.6602 35.9941 21.4702 35.5625 21.3867 cv35.458 21.3633 35.2358 21.3511 35.1182 21.3511 cv35.0132 21.2798 li35.0132 21.2085 35.0786 21.1846 35.2227 21.1846 cv35.811 21.1846 36.6353 21.2202 36.7007 21.2202 cv36.9624 21.2202 39.6172 21.2202 39.918 21.2085 cv40.1665 21.1968 40.376 21.1968 40.4937 21.1611 cv40.6768 21.0894 li40.7554 21.1968 li40.7554 21.2798 40.6899 21.4224 40.6504 21.7554 cvcpf47.5171 21.5654 mo47.125 21.5654 46.7715 21.6011 46.6411 21.6367 cv46.5361 21.7793 li46.5361 25.6675 li46.6279 25.8101 li46.8242 25.917 47.4258 26.0005 48.001 26.0005 cv48.3149 26.0005 48.6812 25.9648 48.9819 25.7744 cv49.4399 25.4893 49.7798 24.8472 49.7798 23.9434 cv49.7798 22.457 48.9165 21.5654 47.5171 21.5654 cvcp53.9263 30.1738 mo52.9976 30.1738 li52.2651 30.1738 51.938 30.1143 51.5981 29.9478 cv51.0356 29.6743 50.5776 29.0918 49.832 28.2002 cv49.2827 27.5459 48.668 26.7495 48.4067 26.4404 cv48.2368 26.3691 li46.6279 26.3452 li46.5361 26.4404 li46.5361 26.7256 li46.5361 27.8672 46.5361 28.8066 46.6016 29.3057 cv46.6411 29.6509 46.7192 29.9121 47.1118 29.96 cv47.2949 29.9834 47.5825 30.0073 47.7002 30.0073 cv47.8052 30.0786 li47.8052 30.1382 47.7397 30.1738 47.5957 30.1738 cv46.8765 30.1738 46.0522 30.1382 45.9868 30.1382 cv45.9736 30.1382 45.1499 30.1738 44.7573 30.1738 cv44.6138 30.1738 44.5483 30.1499 44.5483 30.0786 cv44.6528 30.0073 li44.7705 30.0073 44.9272 29.9834 45.0454 29.96 cv45.3066 29.9121 45.3721 29.6509 45.4243 29.3057 cv45.4897 28.8066 45.4897 27.8672 45.4897 26.7256 cv45.4897 24.6328 li45.4897 22.7778 45.4897 22.4453 45.4639 22.0645 cv45.4375 21.6602 45.333 21.4819 44.9014 21.3867 cv44.7969 21.375 44.5742 21.3511 44.4565 21.3511 cv44.3521 21.2798 li44.3521 21.2085 44.4175 21.1846 44.561 21.1846 cv45.1499 21.1846 45.9736 21.2202 46.0391 21.2202 cv46.1831 21.2202 47.1772 21.1846 47.5825 21.1846 cv48.4067 21.1846 49.2827 21.2559 49.9761 21.708 cv50.3032 21.9219 50.8784 22.5044 50.8784 23.3252 cv50.8784 24.2051 50.4731 25.085 49.2959 26.0718 cv50.3687 27.3203 51.2578 28.3784 52.0166 29.1157 cv52.7227 29.7935 53.2856 29.9243 53.6118 29.9717 cv53.8608 30.0073 54.0435 30.0073 54.1226 30.0073 cv54.2397 30.0786 li54.2397 30.1499 54.1616 30.1738 53.9263 30.1738 cvcpf61.7476 29.9004 mo61.6558 30.2095 61.5513 30.2095 61.0415 30.2095 cv59.0659 30.2095 58.1899 30.1382 57.811 30.1382 cv57.7456 30.1382 56.9214 30.1738 56.5288 30.1738 cv56.3853 30.1738 56.3198 30.1499 56.3198 30.0786 cv56.4243 30.0073 li56.5425 30.0073 56.6987 29.9834 56.8169 29.96 cv57.0786 29.9121 57.144 29.6509 57.1958 29.3057 cv57.2612 28.8066 57.2612 27.8672 57.2612 26.7256 cv57.2612 24.6328 li57.2612 22.7778 57.2612 22.4453 57.2349 22.0645 cv57.2095 21.6602 57.104 21.4702 56.6724 21.3867 cv56.5679 21.3633 56.3462 21.3511 56.228 21.3511 cv56.1235 21.2798 li56.1235 21.2085 56.189 21.1846 56.3325 21.1846 cv56.9214 21.1846 57.7456 21.2202 57.811 21.2202 cv57.9019 21.2202 60.5054 21.2202 60.8062 21.2085 cv61.0542 21.1968 61.2642 21.1729 61.3687 21.1489 cv61.5513 21.0894 li61.604 21.1968 li61.604 21.2798 61.5386 21.4224 61.4995 21.7554 cv61.4858 21.8745 61.4595 22.3975 61.4341 22.54 cv61.3423 22.6709 li61.2642 22.6709 61.2378 22.6113 61.2378 22.5166 cv61.2378 22.4331 61.2241 22.231 61.1587 22.0884 cv61.0679 21.8979 60.937 21.7554 60.23 21.6841 cv60.0083 21.6602 58.5825 21.6484 58.439 21.6484 cv58.3599 21.7676 li58.3599 25.0493 li58.439 25.168 li58.6089 25.168 60.2173 25.168 60.5181 25.144 cv60.8325 25.1206 61.0151 25.0967 61.1333 24.9775 cv61.2241 24.8828 61.2769 24.8232 61.3286 24.8232 cv61.394 24.9185 li61.394 24.9897 61.3286 25.1919 61.2896 25.584 cv61.2642 25.8218 61.2378 26.2617 61.2378 26.3452 cv61.2378 26.4404 61.2378 26.5713 61.146 26.5713 cv61.0542 26.4639 li61.0542 26.3452 61.0542 26.2261 61.0024 26.0718 cv60.9497 25.9053 60.8325 25.7031 60.3218 25.6553 cv59.9692 25.6196 58.6743 25.5962 58.4517 25.5962 cv58.3599 25.6792 li58.3599 26.7256 li58.3599 27.1299 58.3472 28.5093 58.3599 28.7588 cv58.3989 29.5791 58.5952 29.7339 59.8774 29.7339 cv60.2173 29.7339 60.7925 29.7339 61.1333 29.603 cv61.4731 29.4722 61.6304 29.2344 61.7212 28.7471 cv61.7476 28.6162 61.7739 28.5688 61.8394 28.5688 cv61.9175 28.7471 li61.9175 28.8423 61.813 29.6509 61.7476 29.9004 cvcpf71.2954 29.9004 mo71.2036 30.2095 71.0991 30.2095 70.5894 30.2095 cv68.6138 30.2095 67.7378 30.1382 67.3589 30.1382 cv67.2935 30.1382 66.4692 30.1738 66.0767 30.1738 cv65.9331 30.1738 65.8677 30.1499 65.8677 30.0786 cv65.9722 30.0073 li66.0894 30.0073 66.2466 29.9834 66.3647 29.96 cv66.6265 29.9121 66.6919 29.6509 66.7437 29.3057 cv66.8091 28.8066 66.8091 27.8672 66.8091 26.7256 cv66.8091 24.6328 li66.8091 22.7778 66.8091 22.4453 66.7827 22.0645 cv66.7573 21.6602 66.6519 21.4702 66.2202 21.3867 cv66.1157 21.3633 65.894 21.3511 65.7759 21.3511 cv65.6714 21.2798 li65.6714 21.2085 65.7368 21.1846 65.8804 21.1846 cv66.4692 21.1846 67.2935 21.2202 67.3589 21.2202 cv67.4497 21.2202 70.0532 21.2202 70.354 21.2085 cv70.6021 21.1968 70.811 21.1729 70.9165 21.1489 cv71.0991 21.0894 li71.1519 21.1968 li71.1519 21.2798 71.0864 21.4224 71.0474 21.7554 cv71.0337 21.8745 71.0073 22.3975 70.9819 22.54 cv70.8901 22.6709 li70.811 22.6709 70.7856 22.6113 70.7856 22.5166 cv70.7856 22.4331 70.772 22.231 70.7065 22.0884 cv70.6157 21.8979 70.4849 21.7554 69.7778 21.6841 cv69.5562 21.6602 68.1304 21.6484 67.9868 21.6484 cv67.9077 21.7676 li67.9077 25.0493 li67.9868 25.168 li68.1567 25.168 69.7651 25.168 70.0659 25.144 cv70.3794 25.1206 70.563 25.0967 70.6812 24.9775 cv70.772 24.8828 70.8247 24.8232 70.8765 24.8232 cv70.9419 24.9185 li70.9419 24.9897 70.8765 25.1919 70.8374 25.584 cv70.811 25.8218 70.7856 26.2617 70.7856 26.3452 cv70.7856 26.4404 70.7856 26.5713 70.6938 26.5713 cv70.6021 26.4639 li70.6021 26.3452 70.6021 26.2261 70.5503 26.0718 cv70.4976 25.9053 70.3794 25.7031 69.8696 25.6553 cv69.5171 25.6196 68.2222 25.5962 67.9995 25.5962 cv67.9077 25.6792 li67.9077 26.7256 li67.9077 27.1299 67.895 28.5093 67.9077 28.7588 cv67.9468 29.5791 68.1431 29.7339 69.4253 29.7339 cv69.7651 29.7339 70.3403 29.7339 70.6812 29.603 cv71.021 29.4722 71.1772 29.2344 71.269 28.7471 cv71.2954 28.6162 71.3218 28.5688 71.3872 28.5688 cv71.4653 28.7471 li71.4653 28.8423 71.3608 29.6509 71.2954 29.9004 cvcpf35.561 40.6255 mo35.2432 40.8472 34.8442 40.9355 34.4448 40.9355 cv34.0977 40.9355 33.7578 40.8838 33.4546 40.7363 cv33.3511 40.6846 33.3438 40.6548 33.3438 40.4551 cv33.3438 40.0859 33.373 39.79 33.3809 39.6719 cv33.4399 39.5537 li33.4917 39.6348 li33.4917 39.7012 33.4917 39.8047 33.5137 39.9082 cv33.6245 40.4551 34.1123 40.6621 34.6074 40.6621 cv35.3174 40.6621 35.6646 40.1523 35.6646 39.6792 cv35.6646 39.1689 35.4502 38.8735 34.8145 38.3486 cv34.4819 38.0752 li33.6982 37.4321 33.521 36.9741 33.521 36.4712 cv33.521 35.6802 34.1123 35.1406 35.0513 35.1406 cv35.3394 35.1406 35.5537 35.1777 35.7383 35.2148 cv35.8789 35.2515 35.938 35.2515 35.9971 35.2515 cv36.0713 35.3032 li36.0713 35.3403 36.0415 35.5845 36.0415 36.0869 cv36.0415 36.2051 36.0269 36.2568 35.9897 36.2568 cv35.9307 36.1606 li35.8345 35.791 li35.79 35.71 35.5908 35.3994 34.9106 35.3994 cv34.4009 35.3994 34.0015 35.7173 34.0015 36.2568 cv34.0015 36.6782 34.1938 36.9443 34.9033 37.4985 cv35.1104 37.6611 li35.9824 38.3486 36.1895 38.8071 36.1895 39.3984 cv36.1895 39.7012 36.0713 40.2632 35.561 40.6255 cvcpf43.2632 35.3477 mo43.0781 35.3701 li42.8784 35.4141 42.8193 35.5327 42.8047 35.791 cv42.79 36.0278 42.79 36.2349 42.79 37.3877 cv42.79 38.1787 li42.79 38.9771 42.7012 39.8638 42.1099 40.3887 cv41.5776 40.8618 41.0234 40.9355 40.5874 40.9355 cv40.3359 40.9355 39.5894 40.9063 39.0645 40.4111 cv38.7026 40.0635 38.4214 39.5459 38.4214 38.4668 cv38.4214 37.3877 li38.4214 36.2349 38.4214 36.0278 38.4067 35.791 cv38.3921 35.54 38.333 35.4219 38.0889 35.3701 cv37.8374 35.3477 li37.7783 35.3032 li37.897 35.2441 li38.2295 35.2441 38.6802 35.2666 38.7466 35.2666 cv38.8135 35.2666 39.2568 35.2441 39.4785 35.2441 cv39.5967 35.3032 li39.5376 35.3477 li39.353 35.3701 li39.1533 35.3994 39.0942 35.5327 39.0796 35.791 cv39.0645 36.0278 39.0645 36.2349 39.0645 37.3877 cv39.0645 38.4229 li39.0645 39.4868 39.3013 39.9453 39.6191 40.2485 cv39.981 40.5884 40.314 40.6548 40.7349 40.6548 cv41.186 40.6548 41.6294 40.4404 41.8955 40.1226 cv42.2354 39.7012 42.3242 39.0732 42.3242 38.3115 cv42.3242 37.3877 li42.3242 36.2349 42.3242 36.0278 42.3096 35.791 cv42.2944 35.54 42.2354 35.4219 41.9917 35.3701 cv41.7402 35.3477 li41.6812 35.3032 li41.7993 35.2441 li42.1318 35.2441 42.5386 35.2666 42.583 35.2666 cv42.6348 35.2666 42.9819 35.2441 43.2036 35.2441 cv43.3223 35.3032 li43.2632 35.3477 licpf50.5142 35.3477 mo50.3364 35.3701 li50.0928 35.4219 50.063 35.5845 50.063 36.0278 cv50.0483 40.3594 li50.0483 40.8472 50.0337 40.8838 49.9819 40.8838 cv49.9229 40.8838 49.834 40.8027 49.4424 40.4111 cv49.3608 40.3369 48.2964 39.2505 47.5132 38.4077 cv46.6558 37.4839 45.8203 36.5527 45.584 36.2866 cv45.6802 39.8271 li45.6948 40.4331 45.7686 40.6255 45.9683 40.6846 cv46.1089 40.7212 46.2715 40.7285 46.3379 40.7285 cv46.397 40.7729 li46.2637 40.832 li45.8428 40.832 45.5469 40.8101 45.4805 40.8101 cv45.4141 40.8101 45.1035 40.832 44.771 40.832 cv44.6523 40.7729 li44.7119 40.7285 li44.771 40.7285 44.9038 40.7212 45.0146 40.6846 cv45.1997 40.6328 45.2363 40.4185 45.2363 39.7456 cv45.2437 35.5103 li45.2437 35.2222 45.2661 35.1406 45.3252 35.1406 cv45.584 35.3774 li45.6948 35.5029 46.7959 36.6929 47.9346 37.9126 cv48.666 38.6963 49.4717 39.5977 49.7085 39.8418 cv49.627 36.0869 li49.6123 35.6064 49.5679 35.4438 49.3389 35.3848 cv49.2056 35.355 49.0356 35.3477 48.9766 35.3477 cv48.9175 35.2959 li49.0654 35.2441 li49.3979 35.2441 49.7524 35.2666 49.834 35.2666 cv49.915 35.2666 50.1592 35.2441 50.4624 35.2441 cv50.5952 35.2959 li50.5142 35.3477 licpf56.3755 36.3311 mo55.6802 35.5991 54.8384 35.4956 53.9585 35.4956 cv53.811 35.4956 53.5366 35.5176 53.478 35.5474 cv53.3892 35.6953 li53.3823 35.9463 53.3823 36.7002 53.3823 37.2695 cv53.3823 38.186 li53.3823 38.9697 53.3892 39.6494 53.397 39.79 cv53.4038 39.9746 53.4185 40.2705 53.478 40.3516 cv53.5737 40.4922 53.8628 40.6475 54.7349 40.6475 cv55.4224 40.6475 56.0571 40.396 56.4937 39.96 cv56.8784 39.583 57.0854 38.8735 57.0854 38.1934 cv57.0854 37.2549 56.6782 36.6484 56.3755 36.3311 cvcp56.9517 40.0488 mo56.6343 40.3813 55.9692 40.8989 54.7124 40.8989 cv54.0767 40.8989 53.1455 40.8101 53.0713 40.8101 cv53.0347 40.8101 52.5688 40.832 52.3472 40.832 cv52.229 40.7729 li52.2881 40.7285 li52.5098 40.6992 li52.6577 40.6694 52.6943 40.5068 52.7241 40.2925 cv52.7612 39.9824 52.7612 39.3984 52.7612 38.6885 cv52.7612 37.3877 li52.7612 36.2349 52.7612 36.0278 52.7461 35.791 cv52.7314 35.54 52.6724 35.4219 52.4282 35.3701 cv52.1772 35.3477 li52.1182 35.3032 li52.2363 35.2441 li52.5688 35.2441 53.0347 35.2666 53.0713 35.2666 cv53.1602 35.2666 53.6255 35.2441 54.0688 35.2441 cv54.8013 35.2441 56.1538 35.1777 57.0337 36.0869 cv57.4028 36.4712 57.7505 37.085 57.7505 37.9644 cv57.7505 38.8955 57.3657 39.6128 56.9517 40.0488 cvcpf61.3716 36.3384 mo61.3345 36.2275 61.2974 36.2275 61.2603 36.3384 cv60.6099 38.334 li60.6323 38.3857 li62.0444 38.3857 li62.0737 38.334 li61.3716 36.3384 licp64.1802 40.832 mo64.0698 40.832 63.5298 40.832 63.02 40.8174 cv62.8794 40.8101 62.7983 40.8101 62.7983 40.7656 cv62.8501 40.7139 li62.894 40.6992 62.939 40.6328 62.894 40.5142 cv62.2065 38.6963 li62.1401 38.6519 li60.5513 38.6519 li60.4771 38.7109 li60.0337 40.019 li59.9673 40.2041 59.9302 40.3813 59.9302 40.5142 cv59.9302 40.6621 60.0854 40.7285 60.2114 40.7285 cv60.2847 40.7285 li60.3589 40.7729 li60.2485 40.832 li60.0708 40.832 59.7524 40.8101 59.6714 40.8101 cv59.5903 40.8101 59.1841 40.832 58.8364 40.832 cv58.7407 40.832 58.6958 40.8174 58.6958 40.7729 cv58.7622 40.7285 li58.9771 40.7139 li59.3169 40.6694 59.4644 40.3887 59.5972 40.019 cv61.2759 35.4292 li61.3638 35.1851 61.394 35.1406 61.438 35.1406 cv61.4829 35.1406 61.5122 35.1777 61.6011 35.4067 cv61.7114 35.688 62.8716 38.7402 63.3228 39.8638 cv63.5894 40.522 63.8032 40.6401 63.9585 40.6846 cv64.0698 40.7212 64.1802 40.7285 64.2544 40.7285 cv64.3286 40.7729 li64.1802 40.832 licpf69.7749 35.3477 mo69.6938 35.3477 69.5532 35.3774 69.4351 35.4512 cv69.2866 35.54 69.2056 35.6284 69.0435 35.8281 cv68.7993 36.124 67.7642 37.8608 67.6313 38.1787 cv67.52 38.4448 67.52 38.6738 67.52 38.918 cv67.52 39.5537 li67.52 39.6719 67.52 39.9824 67.5425 40.2925 cv67.5571 40.5068 67.6235 40.6694 67.8462 40.6992 cv67.9487 40.7139 68.1118 40.7285 68.1782 40.7285 cv68.2378 40.7729 li68.1196 40.832 li67.7124 40.832 67.2466 40.8101 67.2104 40.8101 cv67.1733 40.8101 66.7075 40.832 66.4858 40.832 cv66.3677 40.7729 li66.4263 40.7285 li66.6479 40.6992 li66.7964 40.6694 66.8628 40.5068 66.8774 40.2925 cv66.8999 39.9824 66.8999 39.6719 66.8999 39.5537 cv66.8999 38.918 li66.8999 38.5186 66.8257 38.356 66.73 38.1416 cv66.6782 38.0234 65.687 36.3975 65.4282 36.0132 cv65.2437 35.7397 65.0591 35.5547 64.9263 35.4658 cv64.8149 35.3921 64.6743 35.3477 64.6079 35.3477 cv64.5347 35.2959 li64.6304 35.2441 li64.771 35.2441 65.3257 35.2666 65.3618 35.2666 cv65.4136 35.2666 65.6948 35.2441 65.9829 35.2441 cv66.0796 35.2959 li65.9683 35.3623 li65.8726 35.4956 li65.8726 35.5845 65.9087 35.6729 65.9683 35.7837 cv66.0864 35.998 67.1948 37.9053 67.3286 38.1196 cv67.4683 37.8091 68.4077 36.1904 68.5552 35.9463 cv68.6519 35.791 68.6812 35.6655 68.6812 35.5693 cv68.6812 35.4658 68.6519 35.3921 68.563 35.3623 cv68.4517 35.2886 li68.5698 35.2441 li68.7622 35.2441 68.9985 35.2666 69.0581 35.2666 cv69.1021 35.2666 69.6343 35.2441 69.7749 35.2441 cv69.8706 35.2886 li69.7749 35.3477 licpf72.7388 40.6255 mo72.4214 40.8472 72.022 40.9355 71.6226 40.9355 cv71.2749 40.9355 70.9351 40.8838 70.6323 40.7363 cv70.5288 40.6846 70.521 40.6548 70.521 40.4551 cv70.521 40.0859 70.5513 39.79 70.5581 39.6719 cv70.6177 39.5537 li70.6694 39.6348 li70.6694 39.7012 70.6694 39.8047 70.6919 39.9082 cv70.8022 40.4551 71.2905 40.6621 71.7856 40.6621 cv72.4946 40.6621 72.8423 40.1523 72.8423 39.6792 cv72.8423 39.1689 72.6284 38.8735 71.9927 38.3486 cv71.6597 38.0752 li70.8765 37.4321 70.6987 36.9741 70.6987 36.4712 cv70.6987 35.6802 71.2905 35.1406 72.229 35.1406 cv72.5171 35.1406 72.7319 35.1777 72.9165 35.2148 cv73.0571 35.2515 73.1157 35.2515 73.1753 35.2515 cv73.2485 35.3032 li73.2485 35.3403 73.2192 35.5845 73.2192 36.0869 cv73.2192 36.2051 73.2046 36.2568 73.1675 36.2568 cv73.1089 36.1606 li73.0122 35.791 li72.9683 35.71 72.7681 35.3994 72.0884 35.3994 cv71.5786 35.3994 71.1792 35.7173 71.1792 36.2568 cv71.1792 36.6782 71.3716 36.9443 72.0806 37.4985 cv72.2876 37.6611 li73.1606 38.3486 73.3667 38.8071 73.3667 39.3984 cv73.3667 39.7012 73.2485 40.2632 72.7388 40.6255 cvcpf31.7969 32.9976 mo34.5977 33.9829 38.6914 32.0161 41.9258 32.5073 cv41.7119 32.7544 41.4961 32.9976 41.4961 33.1226 cv43.6494 33.2456 52.4863 30.7856 52.2695 32.6284 cv55.5024 32.3843 58.9517 31.2798 62.397 31.5249 cv61.5376 34.106 69.5122 31.0327 72.0962 32.1392 cv72.0962 32.2612 72.0962 32.5073 72.0962 32.6284 cv73.1743 32.5073 74.4673 32.3843 75.5454 32.2612 cv0 0 0 1 cmykf31.6309 33.4692 mo32.2775 33.6964 32.965 33.7778 33.67 33.778 cv35.9937 33.7689 38.5861 32.9187 40.7863 32.9271 cv41.1546 32.9271 41.5105 32.95 41.8507 33.0017 cv41.9258 32.5073 li41.5477 32.1801 li41.4418 32.3027 41.3296 32.4296 41.2311 32.5602 cv41.0919 32.7733 li41.0516 32.8556 41.0007 32.9475 40.9961 33.1226 cv40.9961 33.5948 li41.4676 33.6217 li41.6671 33.627 li42.6292 33.6233 44.2535 33.3221 45.9943 33.0269 cv47.7238 32.7303 49.5507 32.4393 50.7283 32.4411 cv51.1651 32.439 51.5116 32.4861 51.6799 32.5507 cv51.7697 32.5922 li51.7917 32.608 li51.8302 32.5672 li51.7804 32.5891 li51.7917 32.608 li51.8302 32.5672 li51.7804 32.5891 li51.8388 32.5634 li51.7734 32.5634 li51.7804 32.5891 li51.8388 32.5634 li51.7734 32.5634 li51.7729 32.5702 li51.7023 33.1727 li52.3072 33.127 li55.2959 32.8963 58.3694 31.9851 61.3758 31.9896 cv61.7053 31.9896 62.0339 32.0003 62.3615 32.0236 cv62.397 31.5249 li61.9226 31.3669 li61.8663 31.5365 61.8327 31.7044 61.8325 31.8752 cv61.8306 32.0954 61.8966 32.325 62.0282 32.5046 cv62.2279 32.7775 62.5139 32.9108 62.8004 32.9872 cv63.0916 33.0632 63.4092 33.0876 63.7596 33.0882 cv64.6815 33.0868 65.8439 32.9072 67.0443 32.7332 cv68.2411 32.5581 69.471 32.3878 70.4526 32.3886 cv71.0681 32.3866 71.5829 32.4602 71.8994 32.5988 cv72.0962 32.1392 li71.5962 32.1392 li71.5962 32.2612 71.5962 32.5073 71.5962 32.6284 cv71.5962 33.1877 li72.152 33.1253 li73.2239 33.0049 74.5171 32.8818 75.6021 32.758 cv75.4887 31.7645 li74.4175 31.8867 73.1247 32.0098 72.0404 32.1315 cv72.0962 32.6284 li72.5962 32.6284 li72.5962 32.5073 72.5962 32.2612 72.5962 32.1392 cv72.5962 31.8093 li72.293 31.6795 li71.7619 31.4551 71.1392 31.3907 70.4526 31.3887 cv69.3619 31.3895 68.1029 31.5689 66.9 31.7437 cv65.7008 31.9194 64.5528 32.0896 63.7596 32.0882 cv63.362 32.091 63.0568 32.0389 62.9261 31.9761 cv62.8396 31.9202 li62.8325 31.8752 li62.8323 31.8399 62.8405 31.7751 62.8714 31.6829 cv63.0748 31.0719 li62.4325 31.0262 li62.0792 31.001 61.7269 30.9896 61.3758 30.9896 cv58.175 30.9942 55.0701 31.9204 52.2319 32.1298 cv52.2695 32.6284 li52.7661 32.6866 li52.7734 32.5634 li52.7773 32.3377 52.6845 32.0993 52.5352 31.9391 cv52.3092 31.696 52.0304 31.5968 51.7348 31.5292 cv51.4361 31.4646 51.1016 31.4415 50.7283 31.4411 cv49.4055 31.4429 47.5686 31.7448 45.826 32.0412 cv44.0947 32.339 42.4386 32.6308 41.6671 32.627 cv41.5246 32.6234 li41.4961 33.1226 li41.9961 33.1226 li41.6635 33.1226 li41.9805 33.2275 li41.9961 33.1226 li41.6635 33.1226 li41.9805 33.2275 li41.867 33.1899 li41.9739 33.2446 li41.9805 33.2275 li41.867 33.1899 li41.9739 33.2446 li41.9815 33.217 42.1402 33.0184 42.3038 32.8346 cv42.8971 32.1491 li42.0009 32.013 li41.6017 31.9524 41.1958 31.9271 40.7863 31.9271 cv38.3583 31.9356 35.7551 32.787 33.67 32.778 cv33.0418 32.7781 32.4681 32.7039 31.9628 32.5259 cv31.6309 33.4692 licp0 0 0 0 cmykf31.7969 19.1489 mo34.5977 20.1323 38.6914 18.166 41.9258 18.6572 cv41.7119 18.9033 41.4961 19.1489 41.4961 19.272 cv43.6494 19.396 52.4863 16.936 52.2695 18.7817 cv55.5024 18.5347 58.9517 17.4282 62.397 17.6748 cv61.5376 20.2554 69.5122 17.1821 72.0962 18.2886 cv72.0962 18.4111 72.0962 18.6572 72.0962 18.7817 cv73.1743 18.6572 74.4673 18.5347 75.5454 18.4111 cv0 0 0 1 cmykf31.6312 19.6207 mo32.2769 19.8471 32.9633 19.9282 33.6671 19.9284 cv35.9915 19.9193 38.585 19.0686 40.7861 19.077 cv41.1545 19.077 41.5104 19.0999 41.8507 19.1516 cv41.9258 18.6572 li41.5484 18.3292 li41.4417 18.4522 41.3292 18.5799 41.2308 18.7107 cv41.092 18.9232 li41.0521 19.0053 41.001 19.0954 40.9961 19.272 cv40.9961 19.744 li41.4674 19.7711 li41.6685 19.7765 li42.6307 19.7728 44.2537 19.4721 45.9932 19.1774 cv47.7213 18.8813 49.5468 18.5908 50.7247 18.5926 cv51.1626 18.5905 51.5099 18.6377 51.6788 18.7025 cv51.7691 18.7442 li51.7913 18.7602 li51.829 18.7203 li51.7803 18.7417 li51.7913 18.7602 li51.829 18.7203 li51.7803 18.7417 li51.8374 18.7166 li51.7734 18.7166 li51.7803 18.7417 li51.8374 18.7166 li51.7734 18.7166 li51.7729 18.7236 li51.7024 19.3265 li52.3076 19.2803 li55.295 19.047 58.3671 18.1346 61.3721 18.1392 cv61.7028 18.1392 62.0325 18.15 62.3613 18.1735 cv62.397 17.6748 li61.9226 17.5168 li61.8663 17.6864 61.8327 17.8542 61.8325 18.0251 cv61.8306 18.2452 61.8966 18.4748 62.0281 18.6543 cv62.2278 18.9272 62.5138 19.0605 62.8002 19.1368 cv63.0913 19.2128 63.4089 19.2372 63.7591 19.2378 cv64.681 19.2364 65.8435 19.0568 67.044 18.8827 cv68.2409 18.7076 69.471 18.5373 70.4527 18.5381 cv71.0681 18.5361 71.5829 18.6097 71.8994 18.7482 cv72.0962 18.2886 li71.5962 18.2886 li71.5962 18.4111 71.5962 18.6572 71.5962 18.7817 cv71.5962 19.3428 li72.1535 19.2784 li73.2242 19.1548 74.5171 19.0322 75.6023 18.9079 cv75.4885 17.9144 li74.4175 18.0371 73.1245 18.1597 72.0388 18.285 cv72.0962 18.7817 li72.5962 18.7817 li72.5962 18.6572 72.5962 18.4111 72.5962 18.2886 cv72.5962 17.9588 li72.293 17.8289 li71.7619 17.6046 71.1392 17.5401 70.4527 17.5381 cv69.3619 17.5389 68.1028 17.7184 66.8997 17.8932 cv65.7004 18.069 64.5523 18.2392 63.7591 18.2378 cv63.3617 18.2406 63.0566 18.1885 62.9259 18.1257 cv62.8395 18.0698 li62.8325 18.0251 li62.8323 17.9898 62.8405 17.925 62.8714 17.8328 cv63.0748 17.222 li62.4327 17.1761 li62.0781 17.1507 61.7245 17.1392 61.3721 17.1392 cv58.1724 17.1438 55.0687 18.0713 52.2314 18.2832 cv52.2695 18.7817 li52.7661 18.8398 li52.7734 18.7166 li52.7773 18.4906 52.6845 18.252 52.5349 18.0916 cv52.3087 17.8481 52.0294 17.7487 51.7332 17.6809 cv51.4339 17.6161 51.0988 17.593 50.7247 17.5926 cv49.4019 17.5944 47.5663 17.8958 45.825 18.1917 cv44.095 18.489 42.4403 18.7803 41.6685 18.7765 cv41.5248 18.7728 li41.4961 19.272 li41.9961 19.272 li41.6609 19.272 li41.9802 19.3783 li41.9961 19.272 li41.6609 19.272 li41.9802 19.3783 li41.8683 19.3411 li41.9737 19.3951 li41.9802 19.3783 li41.8683 19.3411 li41.9737 19.3951 li41.9821 19.3664 42.1407 19.1671 42.3032 18.9852 cv42.8992 18.2993 li42.0009 18.1629 li41.6016 18.1023 41.1956 18.077 40.7861 18.077 cv38.3571 18.0855 35.7528 18.9375 33.6671 18.9284 cv33.04 18.9286 32.4671 18.8546 31.9625 18.6772 cv31.6312 19.6207 licp0 0 0 0 cmykf57.2778 68.957 mo57.5591 68.9434 57.8325 68.8594 58.0513 68.6523 cv58.5083 68.2852 60.0552 66.8828 60.4634 66.998 cv60.2876 69.125 58.2935 72.5273 58.8638 74.6152 cv58.9888 74.7402 59.2915 74.791 59.5181 74.791 cv59.5845 74.7402 60.4829 74.2285 60.731 74.3867 cv60.9282 76.2773 li60.9009 76.4434 60.4536 76.9297 60.313 77.0957 cv60.2622 77.1973 60.3403 77.3301 60.6255 77.2383 cv61.4751 76.8613 li61.5864 76.791 61.6509 76.5391 61.5474 76.3809 cv61.3286 75.457 61.5962 74.748 61.6685 73.9785 cv61.7993 73.8926 62.02 73.8965 62.4497 73.7578 cv62.688 76.1563 li62.1255 76.9082 li62.1255 76.9199 62.2778 77.0488 62.3892 77.125 cv62.5571 77.2246 62.8345 76.793 63.0142 76.6914 cv63.3169 76.4648 63.2817 76.4609 63.2993 76.3066 cv63.3462 73.4727 li63.4614 73.3223 64.0532 73.293 64.3696 73.207 cv64.3696 73.207 64.4536 73.0059 64.4653 72.9043 cv63.9321 71.4883 63.1548 69.5898 63.8989 68.1973 cv63.9224 68.1973 63.897 67.1523 64.0376 67.2031 cv64.6157 70.332 li64.8052 70.8867 li65.0298 71.0703 65.231 70.3711 65.2896 70.1152 cv65.8247 68.0098 65.8501 65.0918 65.5728 64.7734 cv65.2954 64.4551 64.2446 63.9766 64.2446 63.9766 cv65.0317 63.0547 65.8853 61.1738 65.0942 60.3809 cv64.5474 59.8242 63.4517 60.0293 63.4517 60.0293 cv62.2817 60.6953 62.2329 62.4336 62.3872 63.6465 cv61.8931 63.6465 61.1821 63.5527 60.8638 63.832 cv60.5435 64.1113 57.6079 67.6914 57.6079 67.6914 cv57.6079 67.7793 57.6079 67.8691 57.5981 67.9844 cv57.4067 68.1211 li/1 <</Name (PANTONE 2766 CVC)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 1 0.87 0 0.34 ] >>/CSD add_res1 /1 /CSD get_res sepcs0 sepf57.321 69.8446 mo57.7439 69.8275 58.2568 69.6839 58.6621 69.2978 cv58.0513 68.6523 li58.6079 69.3451 li58.8609 69.1409 59.3123 68.7425 59.7641 68.39 cv59.9865 68.216 60.2065 68.0571 60.3674 67.9589 cv60.538 67.8661 li60.5337 67.8558 li60.5362 67.8655 li60.538 67.8661 li60.5337 67.8558 li60.5362 67.8655 li60.4102 67.3861 li60.4102 67.88 li60.5362 67.8655 li60.4102 67.3861 li60.4102 67.88 li60.4102 67.1854 li60.2206 67.8529 li60.4102 67.88 li60.4102 67.1854 li60.2206 67.8529 li60.4634 66.998 li59.5777 66.9249 li59.5246 67.659 59.1259 68.8158 58.7128 70.0232 cv58.3065 71.2426 57.8803 72.524 57.8729 73.7798 cv57.873 74.1377 57.9103 74.4966 58.0065 74.8494 cv58.2354 75.2436 li58.5161 75.5067 58.7452 75.5581 58.9481 75.6147 cv59.1525 75.6623 59.3386 75.6789 59.5181 75.6797 cv60.0579 75.4969 li59.6753 74.9966 li60.015 75.5274 li60.0579 75.4969 li59.6753 74.9966 li60.015 75.5274 li60.0188 75.5236 60.2005 75.4191 60.3621 75.3471 cv60.5855 75.2583 li60.6416 75.2429 li60.6335 75.202 li60.6382 75.2433 li60.6416 75.2429 li60.6335 75.202 li60.6382 75.2433 li60.6009 74.9168 li60.6009 75.2451 li60.6382 75.2433 li60.6009 74.9168 li60.6009 75.2451 li60.6009 74.5904 li60.2529 75.1358 li60.4331 75.2457 60.5538 75.2427 60.6009 75.2451 cv60.6009 74.5904 li60.2529 75.1358 li60.731 74.3867 li59.8471 74.4789 li60.0444 76.3696 li60.9282 76.2773 li60.0514 76.1329 li60.6676 76.2344 li60.1088 75.9481 li60.102 75.9665 60.0765 75.9993 60.0514 76.1329 cv60.6676 76.2344 li60.1088 75.9481 li60.2375 76.014 li60.1131 75.9401 li60.1088 75.9481 li60.2375 76.014 li60.1131 75.9401 li60.1062 75.9559 60.0083 76.0881 59.9105 76.202 cv59.8095 76.3222 59.7085 76.4348 59.6349 76.5213 cv59.5182 76.6982 li59.4529 76.8292 59.4102 76.9821 59.4099 77.1541 cv59.4026 77.4171 59.538 77.7363 59.7718 77.9205 cv60.0032 78.109 60.2601 78.1581 60.4571 78.1577 cv60.6221 78.1571 60.7635 78.1269 60.8976 78.0842 cv60.9859 78.0506 li61.8355 77.6736 li61.9497 77.6126 li62.203 77.4451 62.3049 77.2619 62.3808 77.0962 cv62.4522 76.9274 62.487 76.7593 62.4882 76.5714 cv62.4874 76.369 62.4441 76.1312 62.2909 75.8942 cv61.5474 76.3809 li62.4121 76.1761 li62.3682 75.9897 62.3519 75.8215 62.3517 75.65 cv62.3457 75.2128 62.4836 74.7291 62.5532 74.0616 cv61.6685 73.9785 li62.1563 74.7213 li61.9143 74.3529 li62.0431 74.7777 li62.1563 74.7213 li61.9143 74.3529 li62.0431 74.7777 li62.0436 74.7712 62.3413 74.7258 62.7226 74.6035 cv62.4497 73.7578 li61.5654 73.8457 li61.7695 75.9005 li61.4139 76.3759 li61.2368 76.9082 li61.2442 77.1475 61.3016 77.2358 61.3293 77.3035 cv61.3913 77.4226 61.4212 77.4493 61.4448 77.4811 cv61.5227 77.5712 61.5393 77.5794 61.5739 77.6126 cv61.6633 77.6913 61.7632 77.7723 61.8874 77.8584 cv61.936 77.8894 li62.0898 77.9829 62.2829 78.0305 62.4439 78.0285 cv62.8068 78.0166 62.9779 77.8829 63.0988 77.8052 cv63.2748 77.6757 63.3665 77.5694 63.4416 77.4958 cv63.5145 77.4236 li63.5179 77.4206 li63.2451 77.1001 li63.4513 77.4651 li63.5179 77.4206 li63.2451 77.1001 li63.4513 77.4651 li63.5466 77.4029 li63.7096 77.2705 63.8253 77.216 64.0111 76.9527 cv64.1006 76.8212 64.1573 76.6318 64.1684 76.534 cv64.1823 76.432 64.1807 76.4119 64.1823 76.4072 cv64.1878 76.3213 li64.2347 73.4874 li63.3462 73.4727 li64.0516 74.0131 li63.5061 73.5952 li63.8397 74.1996 li63.8795 74.1759 63.9561 74.1342 64.0516 74.0131 cv63.5061 73.5952 li63.8397 74.1996 li63.6769 73.9046 li63.7879 74.2239 li63.8397 74.1996 li63.6769 73.9046 li63.7879 74.2239 li63.7882 74.2212 63.9222 74.1905 64.0716 74.1676 cv64.2269 74.1412 64.4006 74.1181 64.6025 74.0646 cv65.1897 73.5494 li65.2501 73.3922 li65.2805 73.2968 65.3192 73.2135 65.3481 73.0062 cv65.297 72.5911 li64.9108 71.5868 64.471 70.4134 64.4809 69.5367 cv64.4815 69.1699 64.547 68.8705 64.6827 68.6161 cv63.8989 68.1973 li63.8989 69.0859 li64.1044 69.0878 64.2944 69.0079 64.4074 68.9263 cv64.6332 68.7561 64.6683 68.6361 64.7081 68.5664 cv64.7677 68.4275 64.7665 68.3881 64.7766 68.3479 cv64.796 68.2254 64.7913 68.2107 64.7954 68.1589 cv64.8014 68.0151 64.8048 67.8029 64.8175 67.6398 cv64.8271 67.5408 li64.832 67.5077 li64.3669 67.4173 li64.7921 67.618 li64.8349 67.5218 64.8302 67.5074 64.832 67.5077 cv64.3669 67.4173 li64.7921 67.618 li64.0716 67.2779 li64.6256 67.8488 li64.7328 67.7418 64.7675 67.6663 64.7921 67.618 cv64.0716 67.2779 li64.6256 67.8488 li64.0279 67.2328 li64.0279 68.09 li64.2964 68.0934 64.5269 67.9523 64.6256 67.8488 cv64.0279 67.2328 li64.0279 68.09 li64.0279 67.2298 li63.7327 68.0378 li63.8178 68.0693 63.9217 68.0903 64.0279 68.09 cv64.0279 67.2298 li63.7327 68.0378 li64.0376 67.2031 li63.1637 67.3646 li63.7419 70.4935 li63.7748 70.6193 li63.9642 71.1739 li64.2429 71.5748 li64.3824 71.694 64.6234 71.8087 64.8807 71.8057 cv65.1309 71.806 65.3356 71.7095 65.4618 71.6195 cv65.6847 71.455 65.7633 71.3125 65.838 71.1909 cv65.941 71.0074 65.9993 70.8455 66.0497 70.6948 cv66.0986 70.545 66.1329 70.413 66.1558 70.3137 cv65.2896 70.1152 li66.1508 70.3341 li66.4956 68.9686 66.6338 67.3822 66.6357 66.1995 cv66.6354 65.7998 66.6198 65.4485 66.5841 65.1482 cv66.5656 64.9968 66.5433 64.8591 66.506 64.7171 cv66.4596 64.5727 66.4366 64.4294 66.2428 64.1897 cv66.0649 63.9918 65.9052 63.8857 65.7335 63.7701 cv65.2316 63.4457 64.6326 63.1784 64.6129 63.1678 cv64.2446 63.9766 li64.9204 64.5536 li65.2663 64.1467 65.5904 63.637 65.8476 63.076 cv66.1006 62.5133 66.2938 61.9086 66.2981 61.2646 cv66.2979 61.0118 66.2655 60.7498 66.1764 60.488 cv66.0882 60.2272 65.9377 59.9671 65.7234 59.7533 cv65.7281 59.7581 li65.4257 59.4517 65.0711 59.2947 64.7586 59.2091 cv64.4431 59.1238 64.1554 59.1043 63.9177 59.1037 cv63.5681 59.1043 63.3245 59.1495 63.2881 59.1558 cv63.012 59.257 li62.3473 59.6335 61.9386 60.246 61.7212 60.853 cv61.5002 61.4656 61.4365 62.097 61.4352 62.6855 cv61.4353 63.0667 61.464 63.4304 61.5057 63.7587 cv62.3872 63.6465 li62.3872 62.7578 li62.2319 62.7585 61.9928 62.7432 61.7263 62.7427 cv61.5262 62.7433 61.3085 62.7505 61.0674 62.797 cv60.8298 62.8456 60.5481 62.931 60.2777 63.164 cv60.2797 63.1622 li60.1271 63.3125 li59.9529 63.4983 59.6839 63.8104 59.3544 64.1989 cv58.3732 65.3565 56.9223 67.1261 56.9207 67.1279 cv56.7193 67.6914 li56.7127 67.9093 li57.5981 67.9844 li57.0816 67.2612 li56.8902 67.398 li57.9233 68.8442 li58.1147 68.7075 li58.4836 68.0594 li58.4968 67.9053 58.4966 67.7786 58.4966 67.6914 cv57.6079 67.6914 li58.2951 68.2549 li58.2966 68.253 59.0274 67.3618 59.7988 66.4349 cv60.1843 65.9716 60.5797 65.4998 60.8956 65.1301 cv61.0533 64.9454 61.1915 64.7859 61.2957 64.6689 cv61.4217 64.5303 li61.455 64.4957 li61.459 64.4917 li61.2157 64.2356 li61.4478 64.5018 li61.459 64.4917 li61.2157 64.2356 li61.4478 64.5018 li61.4499 64.5 li61.2686 64.2935 li61.3764 64.5489 li61.4499 64.5 li61.2686 64.2935 li61.3764 64.5489 li61.3745 64.5443 li61.376 64.5492 li61.3764 64.5489 li61.3745 64.5443 li61.376 64.5492 li61.3942 64.5398 61.5418 64.5175 61.7263 64.52 cv61.9177 64.5195 62.1456 64.5345 62.3872 64.5351 cv63.2687 63.5343 li63.2349 63.2692 63.2124 62.9766 63.2125 62.6855 cv63.2112 62.2359 63.2696 61.7907 63.3915 61.4605 cv63.5171 61.1247 63.6723 60.9282 63.8913 60.8016 cv63.4517 60.0293 li63.6152 60.9028 li63.5561 60.5873 li63.6101 60.9037 li63.6152 60.9028 li63.5561 60.5873 li63.6101 60.9037 li63.6168 60.9023 63.7533 60.8807 63.9177 60.881 cv64.0449 60.8804 64.188 60.8949 64.2908 60.9238 cv64.3967 60.9523 64.4479 60.9895 64.4603 61.0036 cv64.4651 61.0084 li64.4944 61.0623 li64.5072 61.0989 64.521 61.167 64.5208 61.2646 cv64.5251 61.5138 64.4185 61.934 64.2305 62.3385 cv64.0465 62.7446 63.7882 63.1444 63.5688 63.3995 cv63.8763 64.7853 li63.9135 64.8025 li64.0045 64.845 64.2506 64.963 64.4856 65.0938 cv64.6027 65.1587 64.7171 65.2273 64.8005 65.284 cv64.8953 65.3532 li64.9131 65.3684 li65.0162 65.2583 li64.9027 65.3572 li64.9131 65.3684 li65.0162 65.2583 li64.9027 65.3572 li65.3809 64.9406 li64.7962 65.1926 li64.9027 65.3571 li65.3809 64.9406 li64.7962 65.1926 li65.0794 65.0705 li64.7877 65.1708 li64.7962 65.1926 li65.0794 65.0705 li64.7877 65.1708 li64.8092 65.1633 li64.7872 65.1696 li64.7877 65.1708 li64.8092 65.1633 li64.7872 65.1696 li64.7945 65.1899 64.8206 65.3279 64.8343 65.5097 cv64.8495 65.694 64.8584 65.9311 64.8583 66.1995 cv64.8602 67.2374 64.7229 68.7464 64.4283 69.8963 cv64.4233 69.9168 li64.407 69.992 64.3578 70.166 64.3175 70.2598 cv64.2957 70.3075 li64.2942 70.3103 li64.658 70.5263 li64.377 70.2155 li64.2942 70.3103 li64.658 70.5263 li64.377 70.2155 li64.8807 70.7726 li64.8807 70.0284 li64.6097 70.0309 64.4407 70.1569 64.377 70.2155 cv64.8807 70.7726 li64.8807 70.0284 li64.8807 70.7943 li65.3675 70.1986 li65.279 70.1212 65.0885 70.0254 64.8807 70.0284 cv64.8807 70.7943 li65.3675 70.1986 li64.8052 70.8867 li65.6461 70.5995 li65.4777 70.1065 li64.9115 67.0417 li64.3425 66.3684 li64.2507 66.3345 64.1403 66.3124 64.0279 66.3127 cv63.7208 66.3095 63.4686 66.4787 63.3623 66.5992 cv63.1564 66.8358 63.152 66.9522 63.115 67.0498 cv63.0716 67.214 63.0619 67.3285 63.0496 67.4527 cv63.034 67.6332 63.0287 67.8119 63.0244 67.9449 cv63.0194 68.0883 li63.019 68.096 li63.6148 68.1394 li63.0261 68.0406 li63.019 68.096 li63.6148 68.1394 li63.0261 68.0406 li63.8633 68.1811 li63.066 67.8901 li63.0337 67.983 63.0316 68.0141 63.0261 68.0406 cv63.8633 68.1811 li63.066 67.8901 li63.8945 68.1925 li63.1932 67.6579 li63.1062 67.7761 63.0856 67.8419 63.066 67.8901 cv63.8945 68.1925 li63.1932 67.6579 li63.8984 68.1955 li63.4195 67.4492 li63.3038 67.5245 63.2384 67.5996 63.1932 67.6579 cv63.8984 68.1955 li63.4195 67.4492 li63.8989 68.1963 li63.8989 67.3086 li63.7104 67.307 63.5322 67.3745 63.4195 67.4492 cv63.8989 68.1963 li63.8989 67.3086 li63.1152 67.7784 li62.8117 68.3458 62.703 68.9563 62.7036 69.5367 cv62.7135 70.9229 63.2681 72.2253 63.6337 73.2174 cv64.4653 72.9043 li63.5825 72.8024 li64.0637 72.8579 li63.5908 72.7518 li63.5825 72.8024 li64.0637 72.8579 li63.5908 72.7518 li63.6638 72.7681 li63.5917 72.7479 li63.5908 72.7518 li63.6638 72.7681 li63.5917 72.7479 li63.5661 72.8223 li63.5528 72.8567 li63.5496 72.8647 li64.3696 73.207 li64.1367 72.3494 li64.0803 72.3674 63.8541 72.4009 63.6229 72.4415 cv63.5034 72.4638 63.3789 72.4881 63.2322 72.5357 cv63.1583 72.5605 63.0778 72.5906 62.9808 72.6436 cv62.8854 72.698 62.7651 72.7735 62.6408 72.9322 cv62.4577 73.458 li62.4108 76.2919 li63.2993 76.3066 li62.4164 76.206 li62.409 76.2823 li62.4084 76.2889 li63.0478 76.3529 li62.4471 76.1299 li62.4137 76.2203 62.4089 76.2873 62.4084 76.2889 cv63.0478 76.3529 li62.4471 76.1299 li63.0308 76.3466 li62.5978 75.8895 li62.5919 75.8929 62.4991 75.9869 62.4471 76.1299 cv63.0308 76.3466 li62.5978 75.8895 li62.6567 75.9517 li62.5995 75.8879 li62.5978 75.8895 li62.6567 75.9517 li62.5995 75.8879 li62.4817 75.9799 li63.0142 76.6914 li62.577 75.9177 li62.4074 76.0174 62.3341 76.0957 62.2626 76.1615 cv62.1635 76.2588 62.0912 76.3362 62.063 76.3601 cv62.0567 76.3656 li62.2661 76.6152 li62.1137 76.3297 li62.0567 76.3656 li62.2661 76.6152 li62.1137 76.3297 li62.4439 76.9484 li62.4439 76.2511 li62.2628 76.2536 62.163 76.3051 62.1137 76.3297 cv62.4439 76.9484 li62.4439 76.2511 li62.4439 77.0327 li62.8424 76.3606 li62.7228 76.2875 62.5664 76.2491 62.4439 76.2511 cv62.4439 77.0327 li62.8424 76.3606 li62.3892 77.125 li62.891 76.3916 li62.7835 76.309 li62.7627 76.2913 li62.7561 76.2855 li62.4501 76.621 li62.78 76.3094 li62.7561 76.2855 li62.4501 76.621 li62.78 76.3094 li62.195 76.862 li62.8392 76.38 li62.78 76.3094 li62.195 76.862 li62.8392 76.38 li62.1431 76.9008 li62.9111 76.4935 li62.8392 76.38 li62.1431 76.9008 li62.9111 76.4935 li62.1292 76.9082 li63.0141 76.9082 li63.0038 76.6411 62.9385 76.5602 62.9111 76.4935 cv62.1292 76.9082 li63.0141 76.9082 li62.1255 76.9082 li62.8371 77.4405 li63.3996 76.6885 li63.5723 76.0684 li63.334 73.67 li62.1768 72.9121 li62.0053 72.9671 61.8894 72.9912 61.7591 73.0194 cv61.6337 73.0528 61.4566 73.0655 61.1806 73.2357 cv60.7837 73.8954 li60.7492 74.3364 60.5804 74.8984 60.5744 75.65 cv60.5742 75.9401 60.6042 76.2552 60.6826 76.5856 cv60.8038 76.8675 li61.2563 76.5714 li60.7109 76.5714 li60.7116 76.6394 60.7237 76.7422 60.8038 76.8675 cv61.2563 76.5714 li60.7109 76.5714 li61.1593 76.5714 li60.7479 76.3945 li60.7109 76.5714 li61.1593 76.5714 li60.7479 76.3945 li61.3413 76.6496 li61.0005 76.11 li60.8192 76.2321 60.7795 76.3317 60.7479 76.3945 cv61.3413 76.6496 li61.0005 76.11 li61.4751 76.8613 li61.1147 76.049 li60.2651 76.426 li60.6255 77.2383 li60.3534 76.3923 li60.4571 76.7148 li60.4571 76.3804 li60.3534 76.3923 li60.4571 76.7148 li60.4571 76.3804 li60.4571 77.0873 li60.9007 76.5478 li60.721 76.4018 60.5434 76.3801 60.4571 76.3804 cv60.4571 77.0873 li60.9007 76.5478 li60.4021 77.1541 li61.1872 77.1541 li61.1944 76.9514 61.083 76.6897 60.9007 76.5478 cv60.4021 77.1541 li61.1872 77.1541 li60.4297 77.1541 li61.1078 77.4932 li61.1542 77.4001 61.1869 77.2872 61.1872 77.1541 cv60.4297 77.1541 li61.1078 77.4932 li60.313 77.0957 li60.9911 77.6701 li61.0435 77.6077 61.2024 77.4314 61.3521 77.2477 cv61.4286 77.1535 61.5047 77.0563 61.5784 76.9469 cv61.6906 76.7586 li61.7276 76.6812 61.7731 76.5968 61.8051 76.4218 cv61.8121 76.1851 li61.6148 74.2945 li61.209 73.6376 li60.9628 73.4856 60.7531 73.4703 60.6009 73.4678 cv60.3498 73.4714 60.1815 73.5229 60.017 73.5743 cv59.7762 73.6544 59.5641 73.755 59.3905 73.8433 cv59.1679 73.9637 li59.0837 74.0136 li58.9782 74.0851 li59.5181 74.791 li59.5181 73.9024 li59.3575 73.8852 li59.3416 73.881 li59.2843 74.0566 li59.3711 73.8947 li59.3416 73.881 li59.2843 74.0566 li59.3711 73.8947 li59.1246 74.3543 li59.4921 73.9869 li59.3711 73.8947 li59.1246 74.3543 li59.4921 73.9869 li58.8638 74.6152 li59.721 74.3811 li59.6753 74.2142 59.6501 74.0129 59.6502 73.7798 cv59.6428 72.9562 59.9906 71.7779 60.3967 70.5919 cv60.796 69.3938 61.2482 68.1994 61.349 67.0712 cv60.7062 66.1432 li60.5952 66.1119 60.4957 66.1028 60.4102 66.1027 cv60.1484 66.1076 59.9913 66.1712 59.843 66.2303 cv59.5911 66.3393 59.3764 66.4773 59.1494 66.6337 cv58.8137 66.8675 58.471 67.1439 58.1709 67.3928 cv57.8738 67.6396 57.613 67.8649 57.4947 67.9596 cv57.4404 68.0069 li57.4083 68.0349 57.3743 68.0592 57.2347 68.0694 cv57.321 69.8446 licpf57.2778 68.957 mo57.5591 68.9434 57.8325 68.8594 58.0513 68.6523 cv58.5083 68.2852 60.0552 66.8828 60.4634 66.998 cv60.2876 69.125 58.2935 72.5273 58.8638 74.6152 cv58.9888 74.7402 59.2915 74.791 59.5181 74.791 cv59.5845 74.7402 60.4829 74.2285 60.6938 74.2285 cv60.8481 76.1563 li60.8618 76.4844 60.3364 77.0488 60.1938 77.2148 cv60.145 77.3145 60.2075 77.5859 60.4927 77.4941 cv61.4751 76.8613 li61.5864 76.791 61.6509 76.5391 61.5474 76.3809 cv61.3286 75.457 61.5962 74.748 61.6685 73.9785 cv61.7993 73.8926 62.02 73.8965 62.4497 73.7578 cv62.688 76.1563 li62.2349 76.9473 li62.2349 76.9648 62.0688 77.3418 62.3931 77.3457 cv62.7192 77.3516 63.3872 76.6797 63.3442 76.4336 cv63.3462 73.4727 li63.4614 73.3223 64.0532 73.293 64.3696 73.207 cv64.3696 73.207 64.4536 73.0059 64.4653 72.9043 cv64.0591 71.4785 63.231 68.9668 63.9399 67.2207 cv64.6157 70.332 li64.731 70.6602 li64.9536 70.8457 65.231 70.3711 65.2896 70.1152 cv65.8247 68.0098 65.8501 65.0918 65.5728 64.7734 cv65.2954 64.4551 64.2446 63.9766 64.2446 63.9766 cv65.0317 63.0547 66.0942 61.2383 65.0942 60.3809 cv64.5474 59.8242 63.4517 60.0293 63.4517 60.0293 cv62.2817 60.6953 62.2329 62.4336 62.3872 63.6465 cv61.8931 63.6465 61.1821 63.5527 60.8638 63.832 cv60.5435 64.1113 57.6079 67.6914 57.6079 67.6914 cv57.6079 67.7793 57.6079 67.8691 57.5981 67.9844 cv57.4067 68.1211 li0 0 0 0 cmykf57.3021 69.4564 mo57.6631 69.4408 58.0712 69.3233 58.395 69.0155 cv58.0513 68.6523 li58.3644 69.0421 li58.6028 68.8501 59.0628 68.4443 59.525 68.0837 cv59.7541 67.9046 59.9823 67.7388 60.1643 67.6275 cv60.2547 67.572 60.3338 67.5304 60.386 67.5084 cv60.4374 67.4897 li60.4356 67.4829 li60.4366 67.4896 li60.4374 67.4897 li60.4356 67.4829 li60.4366 67.4896 li60.4102 67.3122 li60.4102 67.4913 li60.4366 67.4896 li60.4102 67.3122 li60.4102 67.4913 li60.4102 67.1854 li60.3268 67.479 li60.4102 67.4913 li60.4102 67.1854 li60.3268 67.479 li60.4634 66.998 li59.9651 66.9569 li59.9015 67.7772 59.4911 68.9422 59.081 70.1475 cv58.6747 71.3596 58.2657 72.6185 58.2615 73.7798 cv58.2616 74.1104 58.2963 74.4349 58.3814 74.747 cv58.4164 74.875 li58.5102 74.9688 li58.6955 75.1442 58.8711 75.1923 59.0376 75.2365 cv59.205 75.2757 59.3676 75.2906 59.5181 75.291 cv59.6873 75.291 li59.8218 75.1882 li59.6236 74.929 li59.8057 75.1998 li59.8218 75.1882 li59.6236 74.929 li59.8057 75.1998 li59.8056 75.1993 59.8831 75.1521 59.9738 75.1013 cv60.114 75.0221 60.3108 74.9164 60.48 74.8357 cv60.6954 74.7416 li60.7475 74.724 li60.6938 74.5197 li60.6938 74.7285 li60.7475 74.724 li60.6938 74.5197 li60.6938 74.7285 li60.6938 74.2285 li60.1954 74.2684 li60.3497 76.1961 li60.8481 76.1563 li60.3486 76.1766 li60.5364 76.169 li60.3484 76.169 li60.3486 76.1766 li60.5364 76.169 li60.3484 76.169 li60.4668 76.169 li60.3498 76.149 li60.3484 76.169 li60.4668 76.169 li60.3498 76.149 li60.3395 76.179 li60.3112 76.2558 60.2092 76.4149 60.1006 76.5509 cv59.9907 76.6911 59.8813 76.8116 59.8145 76.8891 cv59.773 76.9375 li59.7449 76.9947 li59.6907 77.1091 59.6802 77.2007 59.6788 77.2907 cv59.6808 77.4367 59.7151 77.5871 59.8285 77.7409 cv59.9369 77.8954 60.1674 78.0197 60.385 78.0128 cv60.477 78.0127 60.5642 77.9963 60.6456 77.9702 cv60.7082 77.9501 li61.7437 77.2831 li61.7421 77.284 li61.9004 77.1798 61.9714 77.0585 62.0237 76.9428 cv62.0735 76.8253 62.0989 76.704 62.0995 76.5714 cv62.0991 76.4282 62.0679 76.2648 61.9657 76.107 cv61.5474 76.3809 li62.0339 76.2656 li61.9824 76.0477 61.9631 75.8474 61.963 75.65 cv61.9596 75.1441 62.1043 74.6432 62.1663 74.0253 cv61.6685 73.9785 li61.9429 74.3964 li61.8612 74.272 li61.9204 74.409 li61.9429 74.3964 li61.8612 74.272 li61.9204 74.409 li61.9271 74.4068 li61.9796 74.3859 62.2406 74.35 62.6033 74.2336 cv62.4497 73.7578 li61.9522 73.8072 li62.1746 76.0465 li61.801 76.6987 li61.7349 76.8142 li61.7349 76.9473 li62.2235 76.9473 li61.7492 76.8293 li61.7468 76.8471 61.7377 76.8557 61.7349 76.9473 cv62.2235 76.9473 li61.7492 76.8293 li62.0784 76.9112 li61.7553 76.8071 li61.7492 76.8293 li62.0784 76.9112 li61.7553 76.8071 li61.7484 76.8365 61.6946 76.9632 61.6924 77.1551 cv61.6929 77.2684 61.7131 77.4426 61.8518 77.6095 cv61.9917 77.7787 62.2176 77.8486 62.387 77.8457 cv62.385 77.8456 li62.3973 77.8457 li62.6396 77.8391 62.7902 77.7559 62.9383 77.6716 cv63.1547 77.5391 63.3464 77.3665 63.5087 77.1798 cv63.5893 77.0857 63.6613 76.9891 63.7222 76.881 cv63.7799 76.7703 63.8409 76.6562 63.8462 76.4576 cv63.8368 76.3479 li63.3442 76.4336 li63.8442 76.4339 li63.8462 73.473 li63.3462 73.4727 li63.7431 73.7768 li63.5061 73.5952 li63.6519 73.8593 li63.7431 73.7768 li63.5061 73.5952 li63.6519 73.8593 li63.627 73.8142 li63.6474 73.8617 li63.6519 73.8593 li63.627 73.8142 li63.6474 73.8617 li63.6641 73.8511 63.8149 73.8143 63.9755 73.7896 cv64.141 73.7614 64.3225 73.737 64.5007 73.6895 cv64.7368 73.6254 li64.831 73.3997 li64.884 73.2617 li64.911 73.1805 64.9432 73.1005 64.962 72.9616 cv64.9734 72.8629 li64.9462 72.7673 li64.6486 71.7327 64.1599 70.1809 64.1629 68.8324 cv64.1626 68.307 64.2358 67.8196 64.4032 67.4088 cv63.9399 67.2207 li63.4513 67.3268 li64.1337 70.4685 li64.2592 70.8258 li64.3049 70.956 li64.4109 71.0443 li64.5182 71.1374 64.6832 71.2047 64.8388 71.2021 cv65.0505 71.1996 65.1976 71.1101 65.2979 71.0309 cv65.4493 70.9064 65.5378 70.7725 65.6144 70.6379 cv65.6887 70.5018 65.7431 70.3699 65.7769 70.2269 cv65.2896 70.1152 li65.7741 70.2384 li66.1079 68.92 66.2459 67.3506 66.247 66.1995 cv66.2468 65.811 66.2312 65.4714 66.1982 65.1944 cv66.1813 65.0553 66.1608 64.9323 66.1303 64.8168 cv66.0948 64.7001 66.071 64.5939 65.9498 64.445 cv65.8193 64.2988 65.678 64.2 65.5212 64.0957 cv65.0585 63.7956 64.4629 63.5275 64.4518 63.5215 cv64.2446 63.9766 li64.6249 64.3012 li64.9273 63.9465 65.2593 63.4822 65.5259 62.9704 cv65.7899 62.4576 65.9975 61.9007 66.0009 61.3241 cv66.0071 60.8575 65.8335 60.3496 65.4197 60.0013 cv65.0942 60.3809 li65.4509 60.0304 li65.2119 59.788 64.9236 59.6572 64.6563 59.5841 cv64.3873 59.5111 64.1312 59.4927 63.9177 59.4924 cv63.6034 59.4927 63.3801 59.5343 63.3596 59.5378 cv63.2772 59.5533 li63.2043 59.5948 li62.637 59.9166 62.2837 60.4382 62.0865 60.9858 cv61.8871 61.5367 61.8246 62.1273 61.8239 62.6855 cv61.8239 63.047 61.8512 63.3952 61.8912 63.7096 cv62.3872 63.6465 li62.3872 63.1465 li62.213 63.1469 61.9764 63.1316 61.7263 63.1314 cv61.5391 63.1317 61.3432 63.1394 61.1423 63.1784 cv60.9433 63.2185 60.7278 63.2885 60.534 63.4562 cv60.5352 63.4552 li60.4501 63.5313 60.3774 63.6134 60.2584 63.7456 cv59.4651 64.6374 57.2243 67.3709 57.2213 67.3744 cv57.1079 67.5126 li57.1079 67.6914 li57.1079 67.7797 57.1078 67.8488 57.0999 67.9421 cv57.5981 67.9844 li57.3075 67.5775 li57.1161 67.7142 li57.6974 68.528 li57.8888 68.3912 li58.0768 68.2569 li58.0964 68.0266 li58.108 67.8895 58.1079 67.7789 58.1079 67.6914 cv57.6079 67.6914 li57.9945 68.0084 li57.996 68.0066 58.7275 67.1145 59.5 66.1863 cv59.8862 65.7223 60.2823 65.2496 60.6001 64.8776 cv60.7589 64.6917 60.8983 64.5308 61.0054 64.4105 cv61.1386 64.264 li61.18 64.221 li61.1913 64.21 li61.1924 64.2089 li61.1935 64.2079 li61.1934 64.2062 61.2354 64.1781 61.3349 64.1597 cv61.4324 64.1401 61.5724 64.131 61.7263 64.1314 cv61.9341 64.1311 62.1644 64.1461 62.3872 64.1465 cv62.9549 64.1465 li62.8832 63.5834 li62.8477 63.3044 62.8238 62.9963 62.8239 62.6855 cv62.8231 62.2055 62.8827 61.7196 63.0262 61.3277 cv63.1719 60.9326 63.3825 60.6451 63.699 60.4638 cv63.4517 60.0293 li63.5437 60.5208 li63.5621 60.5178 li63.6118 60.5101 63.7503 60.4923 63.9177 60.4924 cv64.069 60.492 64.2438 60.5076 64.3931 60.5488 cv64.5442 60.5898 64.6617 60.6532 64.7376 60.7313 cv64.7526 60.7466 li64.7688 60.7604 li64.9352 60.9096 64.9947 61.0607 65.0009 61.3241 cv65.0042 61.6403 64.8631 62.0825 64.6387 62.5091 cv64.4168 62.9367 64.1207 63.3522 63.8644 63.6519 cv63.4335 64.1566 li64.0374 64.4316 li64.0376 64.4317 64.0968 64.4586 64.1951 64.5063 cv64.3424 64.5776 64.5717 64.6931 64.7797 64.8139 cv64.9845 64.9281 65.1808 65.0757 65.1957 65.1019 cv65.3809 64.9406 li65.1531 65.0388 li65.1957 65.1019 li65.3809 64.9406 li65.1531 65.0388 li65.157 65.0387 65.1972 65.1931 65.2146 65.3989 cv65.2352 65.6088 65.2471 65.8846 65.247 66.1995 cv65.248 67.269 65.1105 68.795 64.805 69.9921 cv64.8035 69.9977 li64.8022 70.0036 li64.7067 70.2072 li64.6793 70.243 li64.6709 70.2518 li64.7675 70.3606 li64.7052 70.2309 li64.6709 70.2518 li64.7675 70.3606 li64.7052 70.2309 li64.8388 70.5089 li64.8388 70.2021 li64.7052 70.2309 li64.8388 70.5089 li64.8388 70.2021 li64.8388 70.5308 li65.0511 70.276 li64.8388 70.2021 li64.8388 70.5308 li65.0511 70.276 li64.731 70.6602 li65.2027 70.4945 li65.0977 70.1956 li64.0852 65.534 li63.4767 67.0326 li63.2457 67.6027 63.1632 68.2171 63.1629 68.8324 cv63.1659 70.4035 63.6978 72.0253 63.9845 73.0413 cv64.4653 72.9043 li63.9686 72.847 li64.0637 72.8579 li63.97 72.8369 li63.9686 72.847 li64.0637 72.8579 li63.97 72.8369 li63.9355 72.9441 li63.9082 73.0144 li64.3696 73.207 li64.2386 72.7245 li64.1377 72.7534 63.9111 72.7849 63.6927 72.8238 cv63.5813 72.8444 63.4698 72.8671 63.3538 72.9049 cv63.2397 72.9498 63.1075 72.9802 62.9493 73.1685 cv62.8463 73.303 li62.8442 76.4766 li62.8516 76.5192 li63.2062 76.4576 li62.8462 76.4576 li62.8516 76.5192 li63.2062 76.4576 li62.8462 76.4576 li63.0511 76.4576 li62.8581 76.3757 li62.8462 76.4576 li63.0511 76.4576 li62.8581 76.3757 li62.856 76.3975 62.7244 76.5786 62.5866 76.6921 cv62.3988 76.8287 li62.3532 76.8503 li62.3973 76.9825 li62.3973 76.8457 li62.3532 76.8503 li62.3973 76.9825 li62.3973 76.8457 li62.3973 77.0831 li62.4012 76.8458 li62.3973 76.8457 li62.3973 77.0831 li62.4012 76.8458 li62.3993 76.8457 li62.3991 76.8457 li62.3955 77.1471 li62.6135 76.9616 li62.5339 76.8633 62.4084 76.8409 62.3991 76.8457 cv62.3955 77.1471 li62.6135 76.9616 li62.3861 77.1551 li62.6924 77.1551 li62.6918 77.1374 62.6919 77.0575 62.6135 76.9616 cv62.3861 77.1551 li62.6924 77.1551 li62.6249 77.1551 li62.6919 77.1665 li62.6924 77.1551 li62.6249 77.1551 li62.6919 77.1665 li62.6992 77.1385 li62.7067 77.1152 li62.7146 77.0893 li62.723 77.0563 li62.7349 76.9473 li62.2349 76.9473 li62.6687 77.1958 li63.1218 76.4048 li63.2014 76.266 li62.886 73.0916 li62.2961 73.282 li62.1057 73.3433 61.9694 73.3715 61.8413 73.3992 cv61.716 73.4299 61.5779 73.446 61.394 73.5606 cv61.1931 73.6925 li61.1706 73.9317 li61.1285 74.4222 60.9664 74.9672 60.963 75.65 cv60.9629 75.9142 60.9899 76.1971 61.0608 76.4961 cv61.081 76.5813 li61.129 76.6547 li61.2563 76.5714 li61.0995 76.5714 li61.129 76.6547 li61.2563 76.5714 li61.0995 76.5714 li61.1593 76.5714 li61.1049 76.548 li61.0995 76.5714 li61.1593 76.5714 li61.1049 76.548 li61.3413 76.6496 li61.2081 76.4386 li61.1049 76.548 li61.3413 76.6496 li61.2081 76.4386 li61.2066 76.4395 li60.2219 77.0738 li60.4927 77.4941 li60.3398 77.0181 li60.385 77.159 li60.385 77.0128 li60.3398 77.0181 li60.385 77.159 li60.385 77.0128 li60.385 77.3173 li60.6242 77.1352 li60.385 77.0128 li60.385 77.3173 li60.6242 77.1352 li60.42 77.2907 li60.6788 77.2907 li60.6242 77.1352 li60.42 77.2907 li60.6788 77.2907 li60.3485 77.2907 li60.6428 77.435 li60.6788 77.2907 li60.3485 77.2907 li60.6428 77.435 li60.1938 77.2148 li60.5732 77.5406 li60.6337 77.4695 60.8125 77.2749 60.9775 77.0492 cv61.061 76.9346 61.1436 76.8104 61.2131 76.6721 cv61.2803 76.5325 61.345 76.3812 61.3484 76.169 cv61.3477 76.1358 li61.3473 76.126 li61.1554 73.7285 li60.6938 73.7285 li60.5701 73.7311 60.5067 73.7533 60.4357 73.7736 cv60.207 73.8476 59.9565 73.976 59.7209 74.0997 cv59.6054 74.1612 59.4992 74.2204 59.4157 74.2684 cv59.308 74.3318 li59.2143 74.3938 li59.5181 74.791 li59.5181 74.291 li59.268 74.2634 li59.1925 74.2397 li59.1875 74.2372 li59.1246 74.3544 li59.2173 74.2617 li59.1875 74.2372 li59.1246 74.3544 li59.2173 74.2617 li58.8638 74.6152 li59.3461 74.4835 li59.2893 74.276 59.2615 74.0402 59.2615 73.7798 cv59.2574 72.8617 59.6223 71.6608 60.0285 70.4675 cv60.4308 69.2674 60.8713 68.0812 60.9617 67.0392 cv60.9955 66.6294 li60.6 66.5171 li60.4102 66.4913 li60.2369 66.4941 60.1159 66.5388 59.995 66.588 cv59.5906 66.7652 59.1561 67.0997 58.7267 67.4403 cv58.3063 67.778 57.9127 68.1227 57.7381 68.2626 cv57.7223 68.2752 li57.7076 68.2892 li57.5938 68.3955 57.4551 68.4459 57.2536 68.4576 cv57.3021 69.4564 licp0 0 0 1 cmykf59.8325 73.6504 mo63.3032 72.4082 li62.5591 69.1914 li61.1528 69.0762 li60.3794 69.6309 59.8325 73.6504 59.8325 73.6504 cvcp0 0 0 0 cmykf59.2817 66.6738 mo59.7485 66.4473 60.8032 65.6758 61.3306 65.7949 cv61.7095 66.248 61.3872 68.4297 61.3872 68.4297 cv61.3872 68.4297 62.7524 68.8301 62.8149 68.5508 cv62.8071 67.541 64.1431 65.457 64.3169 65.9102 cv64.5728 66.5762 64.9028 69.252 64.9712 68.8301 cv65.6431 64.6621 63.8794 64.5449 63.8794 64.5449 cv63.8794 64.5449 62.3442 64.1445 61.7993 64.3887 cv61.2524 64.6309 59.2817 66.6738 59.2817 66.6738 cvcpf64.5083 62.3125 mo64.7837 61.5039 64.7134 61.0156 64.2778 60.8691 cv63.8481 60.7227 63.4224 61.0684 63.147 61.877 cv62.9751 62.3809 63.0063 62.7188 63.1235 63.0527 cv63.1938 63.2539 63.3345 63.3379 63.4946 63.3926 cv63.688 63.459 64.356 62.7656 64.5083 62.3125 cvcpf52.0781 68.043 mo52.3125 68.9297 li52.1406 70.1387 53.8813 70.9297 53.2876 72.3086 cv53.9282 73.1113 52.5986 74.2207 53.3872 74.8379 cv53.1631 75.4668 53.229 76.3184 52.5488 76.6641 cv52.3857 76.6504 52.3027 76.7266 52.2148 76.8477 cv52.2285 76.9824 li52.5488 77.2051 53.0664 77.2051 53.4985 77.1328 cv54.2622 75.2441 li54.4341 75.168 54.8306 74.9609 55.1021 75.0234 cv54.8306 76.5898 li54.8306 76.6641 54.8306 76.7871 54.9282 76.8477 cv56.1372 76.9102 li56.311 76.9102 56.3462 76.7266 56.2974 76.5898 cv56.2466 76.5039 56.0649 76.5527 55.8911 76.5137 cv55.4731 76.2324 56.1606 75.7148 55.9888 75.2441 cv55.9888 75.1211 56.0864 75.1094 56.2622 75.0352 cv57.1841 74.2695 56.397 73.0605 56.6294 72.0996 cv56.6899 71.1016 57.7642 70.3262 57.3188 69.3242 cv57.9634 68.9668 58.0239 68.127 58.2583 67.4883 cv58.2349 67.3516 58.1958 67.3066 58.1841 67.2422 cv57.9888 67.1914 li57.8013 67.2891 li57.3462 67.7461 57.3462 68.623 56.6294 68.9297 cv56.1606 68.9297 li56.4575 68.252 56.311 67.4883 55.8032 67.0059 cv55.5688 66.9199 55.4106 66.8203 55.2134 66.7813 cv54.6313 66.8711 54.1509 67.0059 53.9067 67.4883 cv53.8813 68.1172 54.3716 68.5859 54.313 69.1523 cv54.1626 69.1523 54.313 69.2754 54.1509 69.1777 cv53.3872 68.3887 li53.2876 68.3262 53.229 68.3887 53.0879 68.3262 cv52.4941 67.2441 li52.3945 67.1582 52.1973 67.1836 52.0264 67.1836 cv52.0781 68.043 licpf52.0781 68.043 mo51.5947 68.1707 li51.8291 69.0575 li52.3125 68.9297 li51.8175 68.8593 li51.8005 69.099 li51.8005 69.4349 51.8999 69.7331 52.0245 69.9889 cv52.2135 70.373 52.458 70.6873 52.6338 70.9773 cv52.8135 71.2686 52.9132 71.5113 52.9116 71.7363 cv52.9111 71.8481 52.8905 71.9653 52.8283 72.1109 cv52.7098 72.3862 li52.8968 72.6205 li52.9529 72.6958 52.965 72.7387 52.9684 72.8396 cv52.9714 72.9703 52.9113 73.1854 52.825 73.4331 cv52.7437 73.6834 52.6333 73.9622 52.6289 74.3116 cv52.6173 74.6185 52.7694 75.0034 53.079 75.2316 cv53.3872 74.8379 li52.9162 74.67 li52.7791 75.0653 52.7418 75.4418 52.6586 75.7186 cv52.619 75.8568 52.5725 75.9654 52.5203 76.0423 cv52.4669 76.1196 52.4145 76.1701 52.3223 76.2183 cv52.5488 76.6641 li52.5909 76.1658 li52.5123 76.1625 li52.3555 76.1593 52.1785 76.2144 52.0574 76.3018 cv51.9345 76.3881 51.8642 76.4809 51.8102 76.554 cv51.6981 76.7084 li51.7311 77.0329 li51.7543 77.2617 li51.9431 77.393 li52.2842 77.6241 52.66 77.6727 53.0078 77.6757 cv53.2072 77.6757 53.4009 77.656 53.5809 77.626 cv53.8571 77.5798 li54.7257 75.4316 li54.2622 75.2441 li54.4648 75.7013 li54.5563 75.6603 54.658 75.6104 54.7633 75.5706 cv54.8654 75.53 54.9679 75.5095 54.9923 75.5118 cv54.9969 75.512 li55.0032 75.4517 li54.9896 75.5106 li54.9969 75.512 li55.0032 75.4517 li54.9896 75.5106 li55.1021 75.0234 li54.6094 74.938 li54.3306 76.5468 li54.3306 76.5898 li54.3316 76.629 54.3269 76.7209 54.3584 76.8481 cv54.3867 76.9716 54.4798 77.1603 54.6647 77.2726 cv54.774 77.3403 li56.1244 77.4102 li56.1372 77.4102 li56.3293 77.4176 56.5585 77.3109 56.6716 77.1522 cv56.7884 76.9963 56.8163 76.839 56.8175 76.7052 cv56.8172 76.6058 56.8006 76.5131 56.7682 76.4217 cv56.7521 76.3766 li56.7278 76.3355 li56.6354 76.176 56.4766 76.0942 56.3814 76.0685 cv56.2319 76.0276 56.1559 76.0369 56.0966 76.0325 cv56.0007 76.0258 li55.8911 76.5137 li56.1703 76.0988 li56.0695 76.2486 li56.2247 76.1647 li56.1703 76.0988 li56.0695 76.2486 li56.2247 76.1647 li56.0229 76.2738 li56.254 76.2738 li56.2247 76.1647 li56.0229 76.2738 li56.254 76.2738 li56.1934 76.2738 li56.2535 76.2871 li56.254 76.2738 li56.1934 76.2738 li56.2535 76.2871 li56.255 76.2663 56.3035 76.153 56.3688 76.0082 cv56.4304 75.8607 56.5141 75.6691 56.5169 75.4082 cv56.5172 75.3025 56.5001 75.1863 56.4584 75.0727 cv55.9888 75.2441 li56.4888 75.2441 li56.1286 75.2441 li56.4339 75.4299 li56.4888 75.2441 li56.1286 75.2441 li56.4339 75.4299 li56.1205 75.2392 li56.3356 75.5376 li56.4339 75.4299 li56.1205 75.2392 li56.3356 75.5376 li56.2048 75.3562 li56.3039 75.5573 li56.3356 75.5376 li56.2048 75.3562 li56.3039 75.5573 li56.3439 75.541 li56.4567 75.4958 li56.5248 75.467 li56.5817 75.4198 li56.8237 75.2203 56.9962 74.9742 57.0943 74.7191 cv57.1936 74.4637 57.2228 74.2075 57.2229 73.9689 cv57.2171 73.4043 57.0786 72.8978 57.0842 72.5169 cv57.0842 72.4033 57.0944 72.3036 57.1154 72.2172 cv57.1258 72.1741 li57.1285 72.1299 li57.1408 71.8614 57.292 71.5443 57.4899 71.1728 cv57.6787 70.8028 57.9211 70.3753 57.9267 69.8202 cv57.9272 69.5939 57.8797 69.3536 57.7757 69.1211 cv57.3188 69.3242 li57.5613 69.7615 li58.0317 69.5008 58.2701 69.0676 58.4107 68.6868 cv58.5531 68.3005 58.6276 67.9274 58.7277 67.6605 cv58.7737 67.5353 li58.7511 67.4038 li58.7339 67.2997 58.7036 67.2091 58.6827 67.1568 cv58.6665 67.1158 li58.4591 67.1922 li58.676 67.1527 li58.6665 67.1158 li58.4591 67.1922 li58.676 67.1527 li58.6189 66.8386 li58.1146 66.7075 li57.9284 66.6591 li57.5703 66.8456 li57.5016 66.8814 li57.447 66.9363 li57.11 67.2857 56.9971 67.6758 56.8602 67.9548 cv56.7948 68.0962 56.7302 68.2109 56.6632 68.2925 cv56.595 68.3745 56.5315 68.4266 56.4327 68.47 cv56.6294 68.9297 li56.6294 68.4297 li56.1606 68.4297 li56.1606 68.9297 li56.6186 69.1303 li56.7489 68.833 56.813 68.5196 56.813 68.2108 cv56.8135 67.6274 56.583 67.0567 56.1476 66.6434 cv56.0725 66.572 li55.9753 66.5364 li55.794 66.4751 55.6242 66.3591 55.3105 66.2908 cv55.2241 66.2737 li55.1371 66.2871 li54.8298 66.3355 54.5209 66.395 54.2203 66.5352 cv53.9211 66.6722 53.632 66.9165 53.4606 67.2625 cv53.4115 67.3594 li53.4071 67.468 li53.4058 67.5357 li53.4075 67.9448 53.5489 68.2653 53.6508 68.5124 cv53.759 68.7622 53.8214 68.9407 53.8178 69.0573 cv53.8156 69.1011 li54.313 69.1523 li54.313 68.6523 li54.2387 68.6537 54.1448 68.6585 54.0236 68.7203 cv53.9341 68.7649 53.8406 68.8579 53.7961 68.9506 cv53.7429 69.1167 li53.7378 69.1628 li54.2057 69.1981 li53.7789 69.0054 li53.7276 69.134 53.742 69.163 53.7378 69.1628 cv54.2057 69.1981 li53.7789 69.0054 li54.2282 69.2083 li53.9654 68.7913 li53.8689 68.8508 53.8055 68.9431 53.7789 69.0054 cv54.2282 69.2083 li53.9654 68.7913 li54.2274 69.207 li54.2274 68.7154 li54.1633 68.7146 54.061 68.7305 53.9654 68.7913 cv54.2274 69.207 li54.2274 68.7154 li54.2274 69.1565 li54.4223 68.7578 li54.4048 68.7556 54.3888 68.7243 54.2274 68.7154 cv54.2274 69.1565 li54.4223 68.7578 li54.3466 68.9127 li54.4276 68.7604 li54.4223 68.7578 li54.3466 68.9127 li54.4276 68.7604 li54.4089 68.7494 li54.1509 69.1777 li54.5102 68.83 li53.7043 67.9974 li53.653 67.9652 li53.4995 67.8602 53.2863 67.8531 53.2531 67.8574 cv53.252 67.8587 li53.2311 68.0028 li53.2904 67.869 li53.252 67.8587 li53.2311 68.0028 li53.2904 67.869 li53.0879 68.3262 li53.5262 68.0856 li52.8891 66.9245 li52.8208 66.8656 li52.6976 66.7606 52.5702 66.7212 52.4723 66.7014 cv52.3725 66.6821 52.2914 66.6805 52.2214 66.6801 cv52.0264 66.6836 li51.4954 66.6836 li51.582 68.1227 li51.5947 68.1707 li52.0781 68.043 li52.5772 68.0129 li52.5255 67.1535 li52.0264 67.1836 li52.0264 67.6836 li52.2214 67.6801 li52.2666 67.6813 li52.2672 67.6796 li52.3448 67.4172 li52.1675 67.6227 li52.2672 67.6796 li52.3448 67.4172 li52.1675 67.6227 li52.4941 67.2441 li52.0558 67.4847 li52.7309 68.7149 li52.8854 68.7833 li53.0334 68.854 53.2094 68.8599 53.2531 68.8574 cv53.2633 68.8574 li53.2766 68.565 li53.1214 68.8122 li53.2633 68.8574 li53.2766 68.565 li53.1214 68.8122 li53.3872 68.3887 li53.0279 68.7364 li53.837 69.5724 li53.8929 69.606 li53.9832 69.6562 li54.0251 69.6702 54.0564 69.7065 54.2274 69.7154 cv54.4367 69.6705 li54.596 69.6031 54.6908 69.4422 54.7095 69.3676 cv54.7342 69.248 li54.7351 69.2371 li54.3083 69.205 li54.7181 69.3269 li54.7351 69.2371 li54.3083 69.205 li54.7181 69.3269 li54.2749 69.195 li54.4943 69.6026 li54.5969 69.5557 54.6995 69.415 54.7181 69.3269 cv54.2749 69.195 li54.4943 69.6026 li54.313 69.2658 li54.313 69.6523 li54.3336 69.6509 54.394 69.6542 54.4943 69.6026 cv54.313 69.2658 li54.313 69.6523 li54.7641 69.6523 li54.8103 69.2036 li54.8178 69.0573 li54.8142 68.663 54.6706 68.3659 54.5728 68.1251 cv54.4687 67.8817 54.404 67.6967 54.4058 67.5357 cv54.4063 67.5085 li53.9067 67.4883 li54.3529 67.7141 li54.4256 67.5776 54.4988 67.5133 54.6464 67.4399 cv54.7926 67.3697 55.0149 67.3168 55.2897 67.2754 cv55.2134 66.7813 li55.1163 67.2717 li55.1971 67.2815 55.3437 67.3647 55.6311 67.4753 cv55.8032 67.0059 li55.4588 67.3684 li55.6878 67.5861 55.8124 67.8872 55.813 68.2108 cv55.8129 68.3816 55.7777 68.5576 55.7027 68.7291 cv55.3958 69.4297 li56.6294 69.4297 li56.7319 69.4297 li56.826 69.3894 li57.0856 69.2794 57.2909 69.1069 57.4386 68.924 cv57.6609 68.6479 57.7736 68.3604 57.8771 68.1296 cv57.9776 67.8959 58.0692 67.7246 58.1556 67.6419 cv57.8013 67.2891 li58.0322 67.7325 li58.0491 67.7237 li58.0583 67.7261 li58.1841 67.2422 li57.6921 67.3316 li57.7143 67.4442 57.7454 67.5013 57.7509 67.5195 cv57.7655 67.5728 li58.2583 67.4883 li57.7889 67.316 li57.6546 67.6878 57.5816 68.054 57.474 68.3367 cv57.3647 68.6248 57.2505 68.7902 57.0764 68.8869 cv56.676 69.109 li56.8619 69.5273 li56.9101 69.6372 56.9261 69.726 56.9267 69.8202 cv56.9322 70.0425 56.8011 70.3409 56.6038 70.7095 cv56.4156 71.0764 56.1682 71.5103 56.1303 72.0693 cv56.6294 72.0996 li56.1434 71.982 li56.0991 72.1653 56.0843 72.345 56.0842 72.5169 cv56.0899 73.0851 56.2286 73.5934 56.2229 73.9689 cv56.2229 74.1263 56.2029 74.2527 56.1625 74.3563 cv56.1208 74.46 56.063 74.549 55.9428 74.6505 cv56.2622 75.0352 li56.0677 74.5745 li56.0005 74.6054 55.9378 74.617 55.804 74.6916 cv55.7389 74.7298 55.647 74.7991 55.5796 74.9101 cv55.5112 75.0205 55.4874 75.1496 55.4888 75.2441 cv55.4888 75.3326 li55.5191 75.4156 li55.5395 75.4082 li55.5169 75.4082 li55.5191 75.4156 li55.5395 75.4082 li55.5169 75.4082 li55.5215 75.4179 55.4951 75.5209 55.4288 75.6613 cv55.3714 75.8067 55.2642 75.9729 55.254 76.2738 cv55.2532 76.3854 55.279 76.5196 55.3451 76.6403 cv55.4102 76.7616 55.5086 76.8596 55.612 76.9285 cv55.6899 76.9809 li55.7815 77.0015 li55.9473 77.0372 56.0713 77.0297 56.1171 77.0336 cv56.1303 77.0344 li56.1655 76.7528 li56.0488 77.0093 li56.1303 77.0344 li56.1655 76.7528 li56.0488 77.0093 li56.2185 76.6364 li55.8669 76.8442 li56.0488 77.0093 li56.2185 76.6364 li55.8669 76.8442 li56.2974 76.5898 li55.8265 76.758 li55.9744 76.7052 li55.8175 76.7052 li55.8265 76.758 li55.9744 76.7052 li55.8175 76.7052 li56.0897 76.7052 li55.8786 76.543 li55.8175 76.7052 li56.0897 76.7052 li55.8786 76.543 li56.1372 76.7417 li56.1372 76.4101 li55.8786 76.543 li56.1372 76.7417 li56.1372 76.4101 li56.1372 76.9102 li56.163 76.4108 li54.954 76.3483 li54.9282 76.8477 li55.1917 76.4227 li55.0356 76.6744 li55.3271 76.5997 li55.1917 76.4227 li55.0356 76.6744 li55.3271 76.5997 li55.2203 76.6271 li55.331 76.6197 li55.3271 76.5997 li55.2203 76.6271 li55.331 76.6197 li55.3306 76.5898 li54.8306 76.5898 li55.3232 76.6752 li55.6755 74.6427 li55.2145 74.5362 li54.9923 74.5118 li54.757 74.5142 54.5694 74.5766 54.4089 74.6355 cv54.2515 74.6953 54.118 74.7615 54.0596 74.787 cv53.8745 74.869 li53.035 76.9454 li53.4985 77.1328 li53.4161 76.6396 li53.2825 76.6621 53.14 76.6758 53.0078 76.6757 cv52.7734 76.6787 52.5809 76.6244 52.5139 76.5719 cv52.2285 76.9824 li52.726 76.932 li52.7123 76.7972 li52.2148 76.8477 li52.6195 77.1413 li52.6439 77.1101 li52.589 77.0596 li52.6351 77.1177 li52.6439 77.1101 li52.589 77.0596 li52.6351 77.1177 li52.5123 76.9628 li52.5123 77.1625 li52.6351 77.1177 li52.5123 76.9628 li52.5123 77.1625 li52.5123 77.0973 li52.5068 77.1623 li52.5123 77.1625 li52.5123 77.0973 li52.5068 77.1623 li52.6485 77.1742 li52.7754 77.1098 li53.0233 76.9851 53.2177 76.7995 53.3502 76.6003 cv53.5502 76.2994 53.6288 75.9853 53.6912 75.7082 cv53.7511 75.4302 53.7946 75.1804 53.8582 75.0057 cv53.9792 74.6663 li53.6954 74.4442 li53.6289 74.3116 li53.6245 74.2161 53.6838 74.005 53.7723 73.7536 cv53.8557 73.4996 53.9654 73.2011 53.9684 72.8396 cv53.9718 72.5696 53.8876 72.2538 53.6784 71.9967 cv53.2876 72.3086 li53.7468 72.5063 li53.859 72.2471 53.9121 71.9849 53.9116 71.7363 cv53.9044 71.0429 53.5434 70.5403 53.2724 70.1237 cv53.1326 69.9143 53.0066 69.7229 52.9237 69.5515 cv52.84 69.3789 52.8005 69.2351 52.8005 69.099 cv52.8075 69.0001 li52.8218 68.8998 li52.5615 67.9152 li52.0781 68.043 li52.5772 68.0129 li52.0781 68.043 licp0 0 0 1 cmykf52.8301 69.3242 mo53.2524 70.1133 54.313 70.9297 53.981 72.0137 cv54.0513 72.123 li55.8032 72.3945 li56.6899 69.709 li54.7427 70.0176 li54.5103 70.0039 54.4224 69.7695 54.2622 69.6953 cv53.0664 68.9434 li52.8555 68.9668 52.9668 69.1387 52.8066 69.2754 cv52.8301 69.3242 licp0 0 0 0 cmykf53.8208 74.1465 mo53.8208 74.2832 li54.4341 74.5039 li54.9282 73.5938 li55.0767 73.457 55.4204 73.5156 55.5688 73.6563 cv55.5083 74.4551 li55.5688 74.5039 55.6685 74.543 55.8032 74.543 cv55.8911 74.4668 55.8032 74.543 55.9146 74.4551 cv55.9146 73.0254 li54.1626 72.8145 li53.8208 74.1465 licpf54.6313 67.7109 mo55.1509 69.3516 li55.5083 69.0547 55.6567 68.3262 55.5083 67.918 cv55.4731 67.7109 55.4204 67.5879 55.3853 67.4883 cv55.2134 67.3262 54.9048 67.4883 54.7427 67.5605 cv54.6313 67.6738 li54.6313 67.7109 licpf65.0864 70.8477 mo64.9263 71.1113 64.6255 71.1699 64.5122 71.1016 cv64.4009 71.0352 64.4399 70.7656 64.5981 70.5059 cv64.7583 70.2441 64.9751 70.0879 65.0884 70.1563 cv65.1997 70.2227 65.2427 70.5859 65.0864 70.8477 cvcp1 /1 /CSD get_res sepcs1 sepf38.7207 79.5176 mo38.6953 79.5137 li38.6543 79.502 li38.5938 79.5 li38.5488 79.4941 li38.5186 79.502 li38.3994 79.5332 li38.3584 79.5527 li38.3115 79.5684 li38.2783 79.5918 li38.2031 79.623 li38.1201 79.6895 li38.0068 79.7734 li37.9609 79.8379 li37.9053 79.8945 li37.8555 79.9648 li37.7422 80.125 li37.6846 80.2227 li37.6465 80.2813 li37.6133 80.3633 li37.4912 80.625 li37.4307 80.748 37.3613 80.9297 37.3438 80.9922 cv37.2852 81.2578 li37.2676 81.3262 li37.252 81.416 li37.2275 81.5254 li37.2109 81.7129 li37.1973 81.8379 li37.1904 81.9316 37.2148 82.1094 37.2363 82.168 cv37.2578 82.2207 37.2793 82.2324 37.3936 82.2656 cv37.4668 82.291 li37.5244 82.2676 li37.5566 82.2598 li37.5664 82.2559 li37.5879 82.2188 li37.6152 82.207 li37.6465 82.1777 li37.7588 82.0723 li37.7725 82.0449 li37.8105 82.002 li37.8477 81.9434 li37.8721 81.9004 li37.9316 81.834 li37.9512 81.793 li37.9863 81.7285 li38.0039 81.7246 li38.0508 81.6465 li38.0566 81.6328 li38.0664 81.6133 38.0908 81.5469 38.2207 81.3242 cv38.2324 81.2754 li38.2793 81.1992 li38.3047 81.1504 li38.3477 81.0977 li38.3613 81.0645 li38.3691 81.0586 li38.3994 81.0742 li38.4004 81.0781 li38.3828 81.4375 li38.4014 81.6367 li38.4141 81.7324 li38.4316 81.752 li38.4541 81.7793 li38.459 81.8047 li38.502 81.8359 li38.5703 81.8633 li38.6123 81.8613 li38.668 81.8594 li38.6816 81.8555 li38.7295 81.832 li38.7715 81.8008 li38.873 81.7246 38.9238 81.6563 38.9805 81.5352 cv39.1113 81.2598 li39.1875 81.1211 li39.2207 81.0332 li39.2852 80.9043 li39.3086 80.8242 li39.3164 80.8184 li39.3467 80.7363 li39.3574 80.6406 li39.3447 80.6367 li39.3398 80.6211 li39.3242 80.6406 li39.2891 80.7266 li39.0645 81.1563 li39.0039 81.2773 38.8965 81.4512 38.8564 81.5 cv38.7559 81.6055 li38.6963 81.6621 li38.6387 81.6465 li38.6201 81.5371 li38.6123 81.4531 li38.6123 81.3086 li38.6074 81.2754 li38.6152 81.2188 li38.6172 81.1328 li38.6309 81.0078 li38.6621 80.793 li38.6699 80.6875 li38.6885 80.6406 li38.7041 80.5547 li38.7168 80.4922 li38.7559 80.3008 li38.793 80.2344 li38.8057 80.1523 li38.8477 80.0977 li38.8613 80.0215 li38.8984 79.9297 li38.9414 79.8398 li38.9746 79.7734 li39.0449 79.6641 li39.0449 79.5801 li39.0215 79.5156 38.9834 79.4961 38.8457 79.4902 cv38.7969 79.5508 li38.7207 79.5176 licp37.5313 82.0176 mo37.5059 81.9961 li37.5039 81.9902 li37.502 81.9199 li37.4883 81.8535 li37.4922 81.7441 li37.4922 81.6758 li37.5059 81.5977 li37.5127 81.4863 li37.5566 81.3184 li37.5586 81.2637 li37.5645 81.2148 li37.6211 81.0078 li37.6563 80.9043 37.6504 80.8828 37.6465 80.8555 cv37.6934 80.7852 li37.7129 80.6777 li37.7559 80.5898 li37.7559 80.5566 li37.8223 80.4355 li37.8223 80.416 li37.8965 80.2813 li37.9385 80.1855 li37.9824 80.1172 li38.0645 79.998 li38.1016 79.9395 li38.1738 79.8691 li38.2129 79.8242 li38.25 79.7988 li38.2793 79.7676 li38.3691 79.7109 li38.4102 79.6855 li38.4199 79.6836 li38.4453 79.6758 li38.5137 79.668 li38.5801 79.668 li38.6221 79.6719 li38.6963 79.6953 li38.7559 79.7051 li38.7344 79.748 li38.7109 79.8262 li38.6826 79.877 li38.6172 80.082 li38.5771 80.1855 li38.5586 80.2266 li38.5449 80.2871 li38.502 80.4668 38.4941 80.457 38.4941 80.457 cv38.4053 80.6895 li38.3965 80.7188 li38.375 80.7539 li38.3477 80.8223 li38.3262 80.8672 li38.335 80.8691 li38.3047 80.916 li38.2129 81.1133 li38.1875 81.1699 li38.1602 81.2285 li38.1318 81.2637 li38.1074 81.3184 li38.0332 81.4434 li37.8906 81.6445 li37.8359 81.7344 li37.7998 81.7676 li37.6563 81.9531 li37.5703 82.0254 li37.5469 82.0117 li37.5313 82.0176 licp0 0 0 0 cmykf39.6602 80.2266 mo39.7031 79.998 li39.8262 79.5332 li39.9551 79.1426 li39.957 79.1191 li39.9111 79.1055 li39.8652 79.1289 li39.7842 79.1621 li39.6211 79.252 li39.5693 79.2734 li39.5488 79.2461 li39.5381 79.252 li39.5166 79.2246 li39.5596 79.1152 li39.5596 79.0859 li40.041 78.8672 li40.0742 78.8164 li40.1094 78.6895 40.293 78.0684 40.3359 78.0078 cv40.4434 77.9023 li40.4863 77.9277 li40.5273 77.957 li40.5918 78 li40.5742 78.0488 li40.4023 78.6934 li40.418 78.7129 li40.5117 78.7031 li40.6143 78.6602 li40.7539 78.6152 li40.8594 78.584 li41.0352 78.623 li41.0703 78.6602 li41.0029 78.6621 li40.9941 78.6738 li40.8398 78.6895 li40.7988 78.7051 li40.709 78.75 li40.5313 78.8125 li40.4512 78.8535 li40.373 78.9004 li40.2578 79.0098 li40.0742 79.5273 li40.0322 79.7012 li39.9883 79.8223 39.9883 79.8828 39.9824 79.9023 cv39.957 79.9727 li39.9199 80.1406 li39.8896 80.2871 li39.8711 80.4492 li39.8408 80.5273 li39.8467 80.5859 li39.8262 80.6406 li39.8184 80.7617 39.8184 80.7773 39.8184 80.7949 cv39.8057 80.8223 li39.8105 80.8828 li39.793 81.1074 li39.8027 81.166 li39.8164 81.3281 li39.8184 81.332 li39.875 81.377 li40.0078 81.25 li40.1797 81 li40.2324 80.9023 li40.2656 80.8555 li40.4346 80.5059 li40.6016 80.1309 li40.8203 79.6191 li40.8438 79.5547 li40.8711 79.5957 li40.8711 79.6426 li40.8164 79.7969 li40.7598 79.959 li40.7422 79.998 li40.7227 80.0547 li40.6445 80.248 li40.5996 80.3809 li40.5635 80.4238 li40.5488 80.4961 li40.5156 80.5547 li40.4863 80.6367 li40.4453 80.7188 li40.4121 80.7852 li40.3027 81.0078 li40.2314 81.1699 40.0469 81.418 39.9111 81.5371 cv39.7773 81.6074 li39.7305 81.623 39.6855 81.625 39.5879 81.625 cv39.5332 81.5762 li39.5313 81.5 li39.5205 81.3184 li39.541 81.1602 li39.5371 81.0859 li39.5586 80.9707 li39.5742 80.8574 39.5693 80.8496 39.5693 80.8301 cv39.5957 80.6094 li39.6602 80.2266 licpf44.5 81.0547 mo44.4766 81 li44.4395 81 44.3027 81.0449 44.0098 81.0449 cv42.2598 81.0449 li42.2051 81.0449 42.0273 81.0332 41.8965 81.0234 cv41.7715 81.0117 41.7227 80.9668 41.6777 80.9668 cv41.6348 81.0547 li41.5264 81.5723 li41.5537 81.6094 li41.6084 81.5664 li41.6895 81.4141 li41.7656 81.2988 41.873 81.2715 42.1611 81.2676 cv42.8301 81.2559 li42.8301 83.1855 li42.8301 83.625 42.8301 83.9805 42.8105 84.1758 cv42.793 84.3066 42.7656 84.4082 42.6719 84.4258 cv42.5254 84.4453 li42.4883 84.4785 li42.5645 84.5215 li42.7051 84.5215 43.0264 84.5059 43.0479 84.5059 cv43.0762 84.5059 43.3906 84.5215 43.6406 84.5215 cv43.7168 84.4785 li43.6797 84.4453 li43.4727 84.4297 li43.3359 84.4082 43.3105 84.3105 43.293 84.1758 cv43.2705 83.9805 43.2705 83.625 43.2705 83.1855 cv43.2705 81.2559 li43.8359 81.2676 li44.2754 81.2715 44.374 81.3691 44.3965 81.5156 cv44.4072 81.582 li44.4492 81.6641 li44.4883 81.6035 li44.4883 81.5508 44.5 81.1914 44.5 81.0547 cvcpf48.918 84.4863 mo48.8857 84.4531 li48.6738 84.4297 li48.5371 84.4141 48.5098 84.3105 48.4941 84.1797 cv48.4707 83.9844 48.4707 83.6309 48.4707 83.1855 cv48.4707 82.375 li48.4707 81.6523 48.4707 81.5332 48.4824 81.3867 cv48.4883 81.2246 48.5273 81.1465 48.6504 81.127 cv48.7666 81.1094 li48.8047 81.0781 li48.7324 81.0332 li48.5928 81.0332 48.2715 81.0488 48.2441 81.0488 cv48.2227 81.0488 47.9082 81.0332 47.6992 81.0332 cv47.625 81.0781 li47.6621 81.1094 li47.8203 81.127 li47.9727 81.1582 48.0098 81.2285 48.0215 81.3867 cv48.0273 81.5332 48.0273 81.6328 48.0273 82.3535 cv48.0273 82.4512 li47.998 82.4785 li46.043 82.4785 li46.0156 82.4512 li46.0156 82.3535 li46.0156 81.6328 46.0156 81.5332 46.0195 81.3867 cv46.0313 81.2246 46.0693 81.1465 46.1953 81.127 cv46.3086 81.1094 li46.3467 81.0781 li46.2715 81.0332 li46.1348 81.0332 45.8193 81.0488 45.793 81.0488 cv45.7695 81.0488 45.4512 81.0332 45.2441 81.0332 cv45.168 81.0781 li45.2051 81.1094 li45.3623 81.127 li45.5156 81.1582 45.5488 81.2285 45.5605 81.3867 cv45.5693 81.5332 45.5693 81.6523 45.5693 82.375 cv45.5693 83.1855 li45.5693 83.6309 45.5693 83.9844 45.5488 84.1797 cv45.5313 84.3105 45.5039 84.4141 45.4121 84.4297 cv45.2764 84.4531 li45.2383 84.4863 li45.3086 84.5273 li45.4512 84.5273 45.7695 84.5059 45.793 84.5059 cv45.8193 84.5059 46.1348 84.5273 46.3906 84.5273 cv46.4609 84.4863 li46.4238 84.4531 li46.2168 84.4297 li46.0811 84.4141 46.0537 84.3105 46.0371 84.1797 cv46.0156 83.9844 46.0156 83.6309 46.0156 83.1855 cv46.0156 82.7012 li46.043 82.6758 li47.998 82.6758 li48.0273 82.7012 li48.0273 83.1855 li48.0273 83.6309 48.0273 83.9844 48.0059 84.1797 cv47.9883 84.3105 47.9629 84.4141 47.8691 84.4297 cv47.7334 84.4531 li47.6953 84.4863 li47.7715 84.5273 li47.9082 84.5273 48.2227 84.5059 48.2441 84.5059 cv48.2715 84.5059 48.5928 84.5273 48.8457 84.5273 cv48.918 84.4863 licpf51.875 83.9414 mo51.8359 83.8711 li51.793 83.9414 li51.7598 84.1328 51.707 84.2246 51.5879 84.2734 cv51.4668 84.3223 51.25 84.3223 51.1289 84.3223 cv50.6777 84.3223 50.6133 84.2598 50.6016 83.9453 cv50.5977 83.8477 50.6016 83.3379 50.6016 83.1797 cv50.6016 82.7793 li50.6357 82.7461 li50.7109 82.7461 51.1738 82.752 51.2988 82.7676 cv51.4775 82.7832 51.5215 82.8711 51.5381 82.9355 cv51.5596 83.0918 li51.5918 83.1367 li51.6309 83.0488 li51.6309 83.0176 51.6406 82.8164 51.6523 82.7246 cv51.6641 82.5723 51.6895 82.4688 51.6895 82.4414 cv51.6572 82.4023 li51.5879 82.4727 li51.543 82.5176 51.4775 82.5332 51.3691 82.5391 cv51.2598 82.5488 50.6895 82.5488 50.6299 82.5488 cv50.6016 82.5059 li50.6016 81.2813 li50.6299 81.2344 li51.2598 81.25 li51.5098 81.2793 51.5537 81.332 51.5879 81.4082 cv51.6133 81.5859 li51.6572 81.6465 li51.6953 81.5996 li51.7227 81.25 li51.7383 81.1191 51.7598 81.0645 51.7598 81.0332 cv51.7383 80.9941 li51.668 81.0156 li51.6309 81.0234 51.5596 81.0332 51.4668 81.0391 cv51.3633 81.0449 50.418 81.0449 50.3848 81.0449 cv50.3633 81.0449 50.0488 81.0273 49.8418 81.0273 cv49.7656 81.0723 li49.8037 81.1035 li49.9609 81.1191 li50.1123 81.1523 50.1455 81.2246 50.1582 81.3809 cv50.167 81.5273 50.167 81.6465 50.167 82.3711 cv50.167 83.1797 li50.167 83.625 50.167 83.9805 50.1455 84.1758 cv50.1289 84.3105 50.1016 84.4082 50.0098 84.4297 cv49.873 84.4453 li49.8379 84.4785 li49.9063 84.5215 li50.0488 84.5215 50.3633 84.5059 50.3848 84.5059 cv50.5195 84.5059 50.8633 84.5352 51.5645 84.5352 cv51.7441 84.5352 51.7822 84.5215 51.8145 84.4043 cv51.8359 84.3066 51.875 83.9805 51.875 83.9414 cvcpf41.9521 89.1641 mo41.9092 89.1387 li41.8545 89.1387 41.7129 89.1387 41.5547 89.0898 cv41.3223 89.0117 41.2832 88.709 41.2617 88.5137 cv40.8965 85.1758 li40.8867 85.0742 40.8711 85.0293 40.832 85.0293 cv40.75 85.1152 li39.1533 88.5293 li37.4902 85.1113 li37.4072 85.0293 li37.3496 85.127 li36.957 88.6699 li36.9346 88.8789 36.918 89.0898 36.7383 89.123 cv36.5762 89.1387 li36.5215 89.1641 li36.6143 89.2148 li36.7598 89.2148 37.0234 89.1992 37.0723 89.1992 cv37.1133 89.1992 37.375 89.2148 37.5762 89.2148 cv37.6748 89.1641 li37.6309 89.1387 li37.5977 89.1387 37.5156 89.1328 37.4248 89.1113 cv37.2832 88.9434 li37.2832 88.8516 37.2832 88.7539 37.2891 88.666 cv37.5059 86.1426 li37.5273 86.1426 li37.5879 86.291 38.1953 87.5957 38.2461 87.6934 cv38.2715 87.7461 38.7402 88.6875 38.8809 88.9531 cv38.9844 89.1504 39.0117 89.2031 39.0488 89.2031 cv39.0977 89.2031 39.1152 89.1543 39.2305 88.916 cv40.5605 86.0898 li40.5762 86.0898 li40.8379 88.8945 li40.8477 88.9922 40.8428 89.0859 40.8164 89.0898 cv40.7773 89.127 li40.7773 89.1543 40.8047 89.1719 40.9297 89.1836 cv41.1309 89.1992 41.7178 89.2148 41.8379 89.2148 cv41.9521 89.1641 licpf43.7207 89.1719 mo43.6836 89.1387 li43.4766 89.123 li43.335 89.0996 43.3066 89.0039 43.291 88.8711 cv43.2695 88.6777 43.2695 88.3164 43.2695 87.877 cv43.2695 87.0625 li43.2695 86.3398 43.2695 86.2246 43.2813 86.0723 cv43.291 85.916 43.3252 85.834 43.4492 85.8105 cv43.5693 85.7969 li43.6016 85.7637 li43.5303 85.7246 li43.3887 85.7246 43.0742 85.7422 43.0469 85.7422 cv43.0254 85.7422 42.709 85.7246 42.5586 85.7246 cv42.4824 85.7637 li42.5195 85.7969 li42.6611 85.8164 li42.7646 85.8398 42.8086 85.916 42.8184 86.0723 cv42.8301 86.2246 42.8301 86.3398 42.8301 87.0625 cv42.8301 87.877 li42.8301 88.3164 42.8301 88.6777 42.8027 88.8711 cv42.7852 89.0039 42.7646 89.0996 42.6719 89.123 cv42.5313 89.1387 li42.498 89.1719 li42.5684 89.2148 li42.709 89.2148 43.0254 89.1992 43.0469 89.1992 cv43.0742 89.1992 43.3887 89.2148 43.6445 89.2148 cv43.7207 89.1719 licpf48.3047 85.7637 mo48.2168 85.7246 li48.0273 85.7246 47.8584 85.7422 47.8047 85.7422 cv47.7559 85.7422 47.5107 85.7246 47.3047 85.7246 cv47.2129 85.7637 li47.249 85.7969 li47.4844 85.8223 li47.625 85.8613 47.6582 85.9629 47.6621 86.2637 cv47.707 88.5137 li47.5596 88.3594 47.0977 87.8398 46.6426 87.3496 cv45.9277 86.5898 45.2383 85.8613 45.168 85.7793 cv45.0059 85.6543 li44.9727 85.6543 44.9512 85.709 44.9512 85.8867 cv44.9453 88.5176 li44.9453 88.9434 44.9229 89.0723 44.8105 89.1055 cv44.6133 89.1387 li44.5762 89.1719 li44.6514 89.2148 li44.8594 89.2148 45.0703 89.1992 45.1133 89.1992 cv45.1523 89.1992 45.3574 89.2148 45.6191 89.2148 cv45.7012 89.1719 li45.668 89.1387 li45.4287 89.1055 li45.3047 89.0723 45.2617 88.9531 45.25 88.5723 cv45.1953 86.4531 li45.3418 86.623 45.8262 87.166 46.3652 87.7402 cv46.8535 88.2676 47.5156 88.9316 47.5645 88.9805 cv47.8164 89.2207 47.8584 89.252 47.9082 89.252 cv47.9453 89.252 47.9512 89.2246 47.9512 88.9199 cv47.9629 86.2246 li47.9629 85.9492 47.9844 85.8477 48.1367 85.8164 cv48.25 85.7969 li48.3047 85.7637 licpf52.9355 85.7637 mo52.8496 85.7246 li52.6592 85.7246 52.4902 85.7422 52.4355 85.7422 cv52.3867 85.7422 52.1426 85.7246 51.9346 85.7246 cv51.8438 85.7637 li51.8828 85.7969 li52.1152 85.8223 li52.2559 85.8613 52.2891 85.9629 52.2949 86.2637 cv52.3398 88.5137 li52.1914 88.3594 51.7295 87.8398 51.2715 87.3496 cv50.5605 86.5898 49.8691 85.8613 49.8008 85.7793 cv49.6367 85.6543 li49.6035 85.6543 49.582 85.709 49.582 85.8867 cv49.5771 88.5176 li49.5771 88.9434 49.5566 89.0723 49.4414 89.1055 cv49.2441 89.1387 li49.207 89.1719 li49.2832 89.2148 li49.4902 89.2148 49.7021 89.1992 49.7461 89.1992 cv49.7832 89.1992 49.9902 89.2148 50.25 89.2148 cv50.333 89.1719 li50.3008 89.1387 li50.0605 89.1055 li49.9355 89.0723 49.8926 88.9531 49.8809 88.5723 cv49.8281 86.4531 li49.9727 86.623 50.459 87.166 50.9941 87.7402 cv51.4844 88.2676 52.1484 88.9316 52.1973 88.9805 cv52.4463 89.2207 52.4902 89.252 52.5391 89.252 cv52.5781 89.252 52.584 89.2246 52.584 88.9199 cv52.5938 86.2246 li52.5938 85.9492 52.6152 85.8477 52.7666 85.8164 cv52.8809 85.7969 li52.9355 85.7637 licpf55.9634 88.6328 mo55.9243 88.5625 li55.8833 88.6328 li55.8501 88.8223 55.7954 88.916 55.6763 88.9648 cv55.5571 89.0117 55.3384 89.0117 55.2173 89.0117 cv54.7681 89.0117 54.7017 88.9531 54.6919 88.6387 cv54.688 88.541 54.6919 88.0293 54.6919 87.873 cv54.6919 87.4707 li54.7251 87.4375 li54.8032 87.4375 55.2642 87.4414 55.3872 87.459 cv55.5669 87.4746 55.6099 87.5625 55.6274 87.627 cv55.6489 87.7852 li55.6821 87.8301 li55.7212 87.7402 li55.7212 87.709 55.731 87.5078 55.7407 87.4141 cv55.7524 87.2637 55.7798 87.1582 55.7798 87.1328 cv55.7466 87.0957 li55.6763 87.166 li55.6333 87.209 55.5669 87.2246 55.4575 87.2305 cv55.3501 87.2422 54.7778 87.2422 54.7192 87.2422 cv54.6919 87.1973 li54.6919 85.9766 li54.7192 85.9238 li55.3501 85.9414 li55.6001 85.9688 55.6431 86.0234 55.6763 86.1016 cv55.7036 86.2793 li55.7466 86.3398 li55.7856 86.291 li55.811 85.9414 li55.8286 85.8105 55.8501 85.7578 55.8501 85.7246 cv55.8286 85.6875 li55.7583 85.709 li55.7212 85.7148 55.6489 85.7246 55.5571 85.7305 cv55.4517 85.7363 54.5083 85.7363 54.4751 85.7363 cv54.4536 85.7363 54.1392 85.7188 53.9321 85.7188 cv53.854 85.7637 li53.8931 85.7969 li54.0513 85.8105 li54.2017 85.8438 54.2368 85.916 54.2466 86.0723 cv54.2583 86.2188 54.2583 86.3398 54.2583 87.0625 cv54.2583 87.873 li54.2583 88.3164 54.2583 88.6699 54.2368 88.8672 cv54.2192 89.0039 54.1919 89.0996 54.1001 89.123 cv53.9634 89.1387 li53.9243 89.1719 li53.9966 89.2148 li54.1392 89.2148 54.4536 89.1992 54.4751 89.1992 cv54.6118 89.1992 54.9517 89.2246 55.6548 89.2246 cv55.8325 89.2246 55.8716 89.2148 55.9048 89.0957 cv55.9243 88.998 55.9634 88.6699 55.9634 88.6328 cvcpf58.5903 87.6816 mo58.5747 87.709 li57.7349 87.709 li57.7271 87.6816 li58.1177 86.5078 li58.1821 86.5078 li58.5903 87.6816 licp60.063 89.1719 mo60.0161 89.1387 li59.8247 89.1113 li59.731 89.0801 59.5962 89.0176 59.4282 88.6055 cv59.1431 87.9043 58.3989 86.0078 58.3345 85.8281 cv58.2759 85.6875 58.2544 85.6543 58.2251 85.6543 cv58.1978 85.6543 58.1724 85.6934 58.1177 85.8438 cv57.0474 88.6934 li56.9595 88.9277 56.8735 89.0996 56.6606 89.127 cv56.5239 89.1387 li56.4868 89.1719 li56.5747 89.2148 li56.7915 89.2148 57.0845 89.1992 57.1392 89.1992 cv57.188 89.1992 57.4009 89.2148 57.5083 89.2148 cv57.5747 89.1719 li57.5298 89.1387 li57.481 89.1328 li57.4106 89.127 57.3071 89.0957 57.3071 89.0039 cv57.3071 88.916 57.3286 88.8125 57.3735 88.6934 cv57.6353 87.9316 li57.6763 87.8926 li58.6431 87.8926 li58.6841 87.9199 li59.0903 89.0039 li59.0513 89.127 li59.0259 89.1641 li59.0259 89.1934 59.0728 89.1992 59.1665 89.1992 cv59.4868 89.209 59.9106 89.2148 59.981 89.2148 cv60.063 89.1719 licpf62.8228 86.5352 mo62.8228 86.291 62.6919 86.084 62.5884 85.9844 cv62.5181 85.9199 62.311 85.7246 61.731 85.7246 cv61.5181 85.7246 61.1821 85.7422 61.0767 85.7422 cv61.0396 85.7422 60.7231 85.7246 60.52 85.7246 cv60.4517 85.7676 li60.4907 85.8066 li60.6489 85.8164 li60.7896 85.8438 60.8325 85.9238 60.8442 86.084 cv60.854 86.2305 60.854 86.3438 60.854 87.0625 cv60.854 87.877 li60.854 88.3242 60.854 88.6602 60.8286 88.8555 cv60.813 88.9922 60.7837 89.0957 60.686 89.1113 cv60.5396 89.1328 li60.5005 89.1719 li60.561 89.2148 li60.7036 89.2148 61.0552 89.1992 61.0728 89.1992 cv61.0942 89.1992 61.4263 89.2148 61.6743 89.2148 cv61.7466 89.1719 li61.7075 89.1328 li61.5024 89.1172 li61.3618 89.0957 61.3325 88.998 61.3208 88.8613 cv61.3013 88.666 61.2954 88.3242 61.2954 87.877 cv61.2954 86.002 li61.3325 85.916 li61.5337 85.8867 li61.6372 85.8867 61.9087 85.8711 62.1528 86.1211 cv62.397 86.3711 62.4146 86.6543 62.4146 86.8066 cv62.4146 87.2305 62.0688 87.5508 61.6216 87.5508 cv61.5239 87.5508 61.5024 87.5625 61.5024 87.5996 cv61.5513 87.6387 li61.6646 87.6445 li62.3169 87.6445 62.8228 87.1914 62.8228 86.5352 cvcpf66.6782 87.5234 mo66.6782 88.8555 65.854 89.0957 65.4497 89.0957 cv64.6567 89.0957 64.0376 88.4121 64.0376 87.3457 cv64.0376 86.3438 64.5864 85.8398 65.3306 85.8398 cv66.0278 85.8398 66.6782 86.4316 66.6782 87.5234 cvcp67.1743 87.3887 mo67.1743 86.3125 66.397 85.6602 65.3599 85.6602 cv64.0825 85.6602 63.5376 86.7148 63.5376 87.4629 cv63.5376 88.2949 64.0649 89.2793 65.3306 89.2793 cv66.4458 89.2793 67.1743 88.4258 67.1743 87.3887 cvcpf70.1821 88.627 mo70.1509 88.5586 li70.1079 88.6152 li70.0903 88.709 70.0454 88.8281 69.981 88.9043 cv69.8735 89.0371 69.6724 89.0391 69.4263 89.0391 cv69.063 89.0391 68.9438 89.0078 68.8716 88.9375 cv68.7856 88.8516 68.77 88.5625 68.77 87.8828 cv68.77 87.0625 li68.77 86.3398 68.77 86.2246 68.7798 86.0723 cv68.7856 85.916 68.8247 85.834 68.9595 85.8105 cv69.1138 85.7969 li69.1489 85.7637 li69.0728 85.7246 li68.938 85.7246 68.5747 85.7422 68.5454 85.7422 cv68.5259 85.7422 68.2153 85.7246 68.0083 85.7246 cv67.9321 85.7637 li67.9712 85.7969 li68.1274 85.8105 li68.2817 85.8438 68.313 85.916 68.3247 86.0723 cv68.3345 86.2246 68.3345 86.3398 68.3345 87.0625 cv68.3345 87.877 li68.3345 88.3164 68.3345 88.6699 68.313 88.8672 cv68.2974 88.998 68.27 89.0996 68.1763 89.1172 cv68.0298 89.1387 li67.9985 89.1719 li68.0688 89.2148 li68.2095 89.2148 68.5083 89.1992 68.5454 89.1992 cv68.8188 89.1992 69.1606 89.2324 69.8247 89.2324 cv70.0688 89.2324 70.0864 89.209 70.1177 89.1055 cv70.1548 88.9707 70.1821 88.6836 70.1821 88.627 cvcpf72.0845 89.1719 mo72.0454 89.1387 li71.8384 89.123 li71.6978 89.0996 71.6704 89.0039 71.6548 88.8711 cv71.6333 88.6777 71.6333 88.3164 71.6333 87.877 cv71.6333 87.0625 li71.6333 86.3398 71.6333 86.2246 71.6431 86.0723 cv71.6548 85.916 71.686 85.834 71.813 85.8105 cv71.9321 85.7969 li71.9634 85.7637 li71.8931 85.7246 li71.7524 85.7246 71.438 85.7422 71.4106 85.7422 cv71.3892 85.7422 71.0728 85.7246 70.9204 85.7246 cv70.8462 85.7637 li70.8833 85.7969 li71.0239 85.8164 li71.1255 85.8398 71.1704 85.916 71.1821 86.0723 cv71.1938 86.2246 71.1938 86.3398 71.1938 87.0625 cv71.1938 87.877 li71.1938 88.3164 71.1938 88.6777 71.1646 88.8711 cv71.1489 89.0039 71.1255 89.0996 71.0356 89.123 cv70.8931 89.1387 li70.8618 89.1719 li70.9302 89.2148 li71.0728 89.2148 71.3892 89.1992 71.4106 89.1992 cv71.438 89.1992 71.7524 89.2148 72.0083 89.2148 cv72.0845 89.1719 licpf74.8364 88.3164 mo74.8364 87.9492 74.7173 87.6387 74.1724 87.209 cv74.0415 87.1113 li73.6294 86.7852 73.4868 86.584 73.4868 86.3555 cv73.4868 86.0352 73.731 85.834 74.0259 85.834 cv74.4497 85.834 74.5552 86.002 74.5903 86.0625 cv74.6567 86.2969 li74.6997 86.3555 li74.7368 86.248 li74.7368 85.9316 74.7603 85.7793 74.7603 85.7578 cv74.7173 85.7246 li74.5552 85.7031 li74.438 85.6758 74.2915 85.6543 74.1118 85.6543 cv73.5239 85.6543 73.145 85.9922 73.145 86.4844 cv73.145 86.8008 73.2427 87.1152 73.731 87.5176 cv73.938 87.6875 li74.3345 88.0117 74.481 88.2051 74.481 88.4922 cv74.481 88.791 74.2427 89.0898 73.8345 89.0898 cv73.5239 89.0898 73.2271 88.959 73.1606 88.6387 cv73.145 88.4648 li73.1079 88.416 li73.063 88.4863 li73.0571 88.5625 73.0356 88.7461 73.0356 88.9746 cv73.0356 89.0996 73.0435 89.123 73.1079 89.1543 cv73.2974 89.248 73.5142 89.2793 73.731 89.2793 cv73.9829 89.2793 74.2388 89.2324 74.4321 89.0898 cv74.7524 88.8613 74.8364 88.5078 74.8364 88.3164 cvcpf33.7793 93.873 mo33.7363 93.8398 li33.4902 93.8184 li33.3281 93.7969 33.2949 93.6758 33.2773 93.5195 cv33.252 93.291 33.252 92.8613 33.252 92.3379 cv33.252 91.3828 li33.252 90.5352 33.252 90.3828 33.2607 90.2109 cv33.2734 90.0195 33.3174 89.9258 33.4648 89.8984 cv33.5996 89.8828 li33.6426 89.8496 li33.5547 89.8066 li33.3936 89.8066 33.0508 89.8223 33.0234 89.8223 cv32.9961 89.8223 32.6543 89.8066 32.4746 89.8066 cv32.3867 89.8496 li32.4316 89.8828 li32.5996 89.9043 li32.7188 89.9316 32.7734 90.0254 32.7852 90.2109 cv32.7949 90.3828 32.7949 90.5352 32.7949 91.3828 cv32.7949 92.3379 li32.7949 92.8613 32.7949 93.291 32.7676 93.5195 cv32.7461 93.6758 32.7188 93.7969 32.6113 93.8184 cv32.4473 93.8398 li32.4043 93.873 li32.4902 93.916 li32.6543 93.916 32.9961 93.9004 33.0234 93.9004 cv33.0508 93.9004 33.3936 93.916 33.6924 93.916 cv33.7793 93.873 licpf38.3438 90.4648 mo38.2559 90.4258 li38.0674 90.4258 37.8984 90.4434 37.8438 90.4434 cv37.793 90.4434 37.5508 90.4258 37.3418 90.4258 cv37.25 90.4648 li37.2891 90.4961 li37.5234 90.5234 li37.6641 90.5625 37.6953 90.666 37.7021 90.9629 cv37.7461 93.2148 li37.5996 93.0625 37.1367 92.5391 36.6797 92.0527 cv35.9688 91.2891 35.2773 90.5625 35.207 90.4785 cv35.0449 90.3574 li35.0117 90.3574 34.9902 90.4102 34.9902 90.5879 cv34.9844 93.2207 li34.9844 93.6445 34.9629 93.7754 34.8477 93.8066 cv34.6523 93.8398 li34.6143 93.873 li34.6914 93.916 li34.8975 93.916 35.1094 93.9004 35.1523 93.9004 cv35.1904 93.9004 35.3984 93.916 35.6582 93.916 cv35.7402 93.873 li35.707 93.8398 li35.4678 93.8066 li35.3418 93.7754 35.3008 93.6543 35.2891 93.2754 cv35.2344 91.1543 li35.3809 91.3223 35.8633 91.8652 36.4023 92.4434 cv36.8926 92.9707 37.5547 93.6328 37.6035 93.6836 cv37.8535 93.9219 37.8984 93.9531 37.9473 93.9531 cv37.9854 93.9531 37.9902 93.9258 37.9902 93.6211 cv38 90.9258 li38 90.6504 38.0225 90.5508 38.1748 90.5176 cv38.2891 90.4961 li38.3438 90.4648 licpf41.0625 93.0195 mo41.0625 92.6484 40.9414 92.3379 40.3984 91.9102 cv40.2676 91.8105 li39.8555 91.4863 39.7139 91.2852 39.7139 91.0586 cv39.7139 90.7344 39.958 90.5352 40.252 90.5352 cv40.6758 90.5352 40.7773 90.7031 40.8174 90.7637 cv40.8809 90.9961 li40.9258 91.0586 li40.9648 90.9473 li40.9648 90.6328 40.9863 90.4785 40.9863 90.459 cv40.9414 90.4258 li40.7773 90.4043 li40.6641 90.377 40.5176 90.3574 40.3398 90.3574 cv39.752 90.3574 39.3711 90.6914 39.3711 91.1855 cv39.3711 91.502 39.4688 91.8164 39.958 92.2188 cv40.1641 92.3867 li40.5605 92.7148 40.709 92.9043 40.709 93.1934 cv40.709 93.4922 40.4688 93.791 40.0625 93.791 cv39.752 93.791 39.4531 93.6602 39.3887 93.3398 cv39.3711 93.166 li39.334 93.1172 li39.2891 93.1875 li39.2842 93.2637 39.2617 93.4473 39.2617 93.6758 cv39.2617 93.8008 39.2676 93.8223 39.334 93.8555 cv39.5234 93.9492 39.7412 93.9805 39.958 93.9805 cv40.209 93.9805 40.4629 93.9316 40.6582 93.791 cv40.9805 93.5605 41.0625 93.207 41.0625 93.0195 cvcpf44.7676 90.4473 mo44.7451 90.3926 li44.707 90.3926 44.5713 90.4375 44.2773 90.4375 cv42.5293 90.4375 li42.4727 90.4375 42.2939 90.4258 42.1641 90.416 cv42.0391 90.4043 41.9902 90.3613 41.9453 90.3613 cv41.9023 90.4473 li41.793 90.9629 li41.8213 91.002 li41.875 90.959 li41.957 90.8066 li42.0332 90.6914 42.1426 90.666 42.4297 90.6602 cv43.0986 90.6504 li43.0986 92.5801 li43.0986 93.0195 43.0986 93.373 43.0771 93.5684 cv43.0605 93.6973 43.0332 93.8008 42.9414 93.8184 cv42.793 93.8398 li42.7559 93.873 li42.832 93.916 li42.9727 93.916 43.293 93.9004 43.3154 93.9004 cv43.3438 93.9004 43.6582 93.916 43.9082 93.916 cv43.9844 93.873 li43.9453 93.8398 li43.7393 93.8223 li43.6035 93.8008 43.5781 93.7031 43.5615 93.5684 cv43.5391 93.373 43.5391 93.0195 43.5391 92.5801 cv43.5391 90.6504 li44.1035 90.6602 li44.5449 90.666 44.6416 90.7637 44.6641 90.9102 cv44.6738 90.9746 li44.7197 91.0586 li44.7559 90.9961 li44.7559 90.9414 44.7676 90.584 44.7676 90.4473 cvcpf46.8203 93.873 mo46.7832 93.8398 li46.5771 93.8223 li46.4355 93.8008 46.4082 93.7031 46.3906 93.5742 cv46.3711 93.377 46.3711 93.0195 46.3711 92.5801 cv46.3711 91.7637 li46.3711 91.041 46.3711 90.9258 46.3809 90.7734 cv46.3906 90.6172 46.4238 90.5352 46.5488 90.5137 cv46.668 90.4961 li46.7031 90.4648 li46.6309 90.4258 li46.4883 90.4258 46.1748 90.4434 46.1465 90.4434 cv46.127 90.4434 45.8105 90.4258 45.6582 90.4258 cv45.582 90.4648 li45.6191 90.4961 li45.7617 90.5176 li45.8652 90.5391 45.9082 90.6172 45.9189 90.7734 cv45.9297 90.9258 45.9297 91.041 45.9297 91.7637 cv45.9297 92.5801 li45.9297 93.0195 45.9297 93.377 45.9043 93.5742 cv45.8867 93.7031 45.8652 93.8008 45.7725 93.8223 cv45.6309 93.8398 li45.5977 93.873 li45.668 93.916 li45.8105 93.916 46.127 93.9004 46.1465 93.9004 cv46.1748 93.9004 46.4883 93.916 46.7441 93.916 cv46.8203 93.873 licpf50.4492 90.4473 mo50.4258 90.3926 li50.3887 90.3926 50.252 90.4375 49.959 90.4375 cv48.209 90.4375 li48.1563 90.4375 47.9746 90.4258 47.8457 90.416 cv47.7197 90.4043 47.6699 90.3613 47.627 90.3613 cv47.584 90.4473 li47.4756 90.9629 li47.502 91.002 li47.5566 90.959 li47.6367 90.8066 li47.7139 90.6914 47.8223 90.666 48.1094 90.6602 cv48.7793 90.6504 li48.7793 92.5801 li48.7793 93.0195 48.7793 93.373 48.7578 93.5684 cv48.7402 93.6973 48.7148 93.8008 48.6211 93.8184 cv48.4756 93.8398 li48.4375 93.873 li48.5117 93.916 li48.6543 93.916 48.9746 93.9004 48.998 93.9004 cv49.0234 93.9004 49.3398 93.916 49.5879 93.916 cv49.666 93.873 li49.627 93.8398 li49.4219 93.8223 li49.2852 93.8008 49.2568 93.7031 49.2422 93.5684 cv49.2188 93.373 49.2188 93.0195 49.2188 92.5801 cv49.2188 90.6504 li49.7852 90.6602 li50.2256 90.666 50.3242 90.7637 50.3438 90.9102 cv50.3555 90.9746 li50.4004 91.0586 li50.4375 90.9961 li50.4375 90.9414 50.4492 90.584 50.4492 90.4473 cvcpf54.5356 90.4688 mo54.4692 90.4199 li54.3345 90.4199 54.0688 90.4434 54.0356 90.4434 cv54.0083 90.4434 53.7134 90.4199 53.5083 90.4199 cv53.438 90.4688 li53.4751 90.5039 li53.6431 90.5176 li53.7974 90.5508 53.8442 90.627 53.856 90.7852 cv53.8618 90.9316 53.8618 91.041 53.8618 91.7637 cv53.8618 92.3281 li53.8618 92.8008 53.811 93.1875 53.5962 93.4473 cv53.4321 93.6484 53.1641 93.7793 52.8809 93.7793 cv52.6172 93.7793 52.4268 93.7363 52.1973 93.5254 cv51.9971 93.334 51.8672 93.0625 51.8672 92.3945 cv51.8672 91.7637 li51.8672 91.041 51.8672 90.9316 51.877 90.7852 cv51.8828 90.6211 51.9219 90.5352 52.0449 90.5176 cv52.1699 90.5039 li52.209 90.4688 li52.1445 90.4199 li52.0088 90.4199 51.6816 90.4434 51.6367 90.4434 cv51.5957 90.4434 51.2617 90.4199 51.0557 90.4199 cv50.9902 90.4688 li51.0293 90.5039 li51.1973 90.5176 li51.3516 90.5508 51.3867 90.627 51.3936 90.7852 cv51.4043 90.9316 51.4043 91.041 51.4043 91.7637 cv51.4043 92.4375 li51.4043 93.1113 51.5781 93.4375 51.8066 93.6543 cv52.1328 93.9648 52.6328 93.9805 52.791 93.9805 cv53.0625 93.9805 53.4204 93.9316 53.7524 93.6387 cv54.1235 93.3125 54.188 92.7578 54.188 92.2578 cv54.188 91.7637 li54.188 91.041 54.188 90.9316 54.1919 90.7852 cv54.2036 90.6211 54.2466 90.5449 54.3716 90.5176 cv54.4966 90.5039 li54.5356 90.4688 licpf57.9751 90.4473 mo57.9536 90.3926 li57.9165 90.3926 57.7798 90.4375 57.4868 90.4375 cv55.7368 90.4375 li55.6821 90.4375 55.5024 90.4258 55.3716 90.416 cv55.2466 90.4043 55.1978 90.3613 55.1548 90.3613 cv55.1118 90.4473 li55.0024 90.9629 li55.0298 91.002 li55.0825 90.959 li55.1646 90.8066 li55.2407 90.6914 55.3501 90.666 55.6392 90.6602 cv56.3071 90.6504 li56.3071 92.5801 li56.3071 93.0195 56.3071 93.373 56.2856 93.5684 cv56.2681 93.6973 56.2407 93.8008 56.1509 93.8184 cv56.0024 93.8398 li55.9634 93.873 li56.0396 93.916 li56.1821 93.916 56.5024 93.9004 56.5239 93.9004 cv56.5532 93.9004 56.8657 93.916 57.1157 93.916 cv57.1919 93.873 li57.1548 93.8398 li56.9478 93.8223 li56.813 93.8008 56.7856 93.7031 56.77 93.5684 cv56.7466 93.373 56.7466 93.0195 56.7466 92.5801 cv56.7466 90.6504 li57.313 90.6602 li57.7524 90.666 57.8501 90.7637 57.8716 90.9102 cv57.8833 90.9746 li57.9263 91.0586 li57.9634 90.9961 li57.9634 90.9414 57.9751 90.584 57.9751 90.4473 cvcpf60.8013 93.334 mo60.7642 93.2637 li60.7212 93.334 li60.688 93.5254 60.6333 93.6172 60.5122 93.666 cv60.395 93.7148 60.1782 93.7148 60.0571 93.7148 cv59.606 93.7148 59.5415 93.6543 59.5298 93.3398 cv59.5259 93.2422 59.5298 92.7305 59.5298 92.5742 cv59.5298 92.1719 li59.561 92.1387 li59.6372 92.1387 60.1021 92.1445 60.2251 92.1602 cv60.4048 92.1777 60.4478 92.2637 60.4634 92.3281 cv60.4868 92.4863 li60.52 92.5293 li60.5571 92.4434 li60.5806 92.1172 li60.5884 91.9648 60.6157 91.8613 60.6157 91.834 cv60.5845 91.7949 li60.5122 91.8652 li60.4712 91.9102 60.4048 91.9258 60.2954 91.9336 cv60.188 91.9434 59.6157 91.9434 59.5571 91.9434 cv59.5298 91.9004 li59.5298 90.6758 li59.5571 90.627 li60.188 90.6426 li60.438 90.6699 60.481 90.7266 60.5122 90.8008 cv60.5396 90.9805 li60.5845 91.041 li60.6235 90.9902 li60.6489 90.6426 li60.6646 90.5137 60.688 90.459 60.688 90.4258 cv60.6646 90.3867 li60.5962 90.4102 li60.5571 90.416 60.4868 90.4258 60.395 90.4297 cv60.2915 90.4375 59.3462 90.4375 59.313 90.4375 cv59.2915 90.4375 58.9751 90.4199 58.7681 90.4199 cv58.6919 90.4648 li58.731 90.4961 li58.8892 90.5137 li59.0396 90.5449 59.0728 90.6172 59.0845 90.7734 cv59.0942 90.9199 59.0942 91.041 59.0942 91.7637 cv59.0942 92.5742 li59.0942 93.0195 59.0942 93.373 59.0728 93.5684 cv59.0571 93.7031 59.0298 93.8008 58.938 93.8223 cv58.8013 93.8398 li58.7642 93.873 li58.8345 93.916 li58.9751 93.916 59.2915 93.9004 59.313 93.9004 cv59.4478 93.9004 59.7915 93.9258 60.4907 93.9258 cv60.6704 93.9258 60.7095 93.916 60.7407 93.7969 cv60.7642 93.6973 60.8013 93.373 60.8013 93.334 cvcpf48.6953 96.9219 mo48.6953 98.2539 47.8711 98.4941 47.4678 98.4941 cv46.6738 98.4941 46.0547 97.8086 46.0547 96.7422 cv46.0547 95.7422 46.6025 95.2363 47.3486 95.2363 cv48.0449 95.2363 48.6953 95.8301 48.6953 96.9219 cvcp49.1914 96.7852 mo49.1914 95.709 48.4141 95.0566 47.377 95.0566 cv46.0986 95.0566 45.5537 96.1113 45.5537 96.8633 cv45.5537 97.6934 46.082 98.6777 47.3486 98.6777 cv48.4629 98.6777 49.1914 97.8242 49.1914 96.7852 cvcpf52.0039 95.1289 mo51.9707 95.0898 li51.9004 95.1172 li51.6934 95.1348 li51.5908 95.1387 50.623 95.1387 50.5313 95.1387 cv50.5098 95.1387 50.2051 95.123 49.998 95.123 cv49.9219 95.168 li49.96 95.1953 li50.1182 95.2168 li50.2715 95.248 50.3027 95.3184 50.3125 95.4746 cv50.3242 95.623 50.3242 95.7422 50.3242 96.4648 cv50.3242 97.2754 li50.3242 97.7207 50.3242 98.0742 50.3027 98.2695 cv50.2871 98.4063 50.2588 98.5039 50.167 98.5254 cv50.0313 98.543 li49.9932 98.5742 li50.0645 98.6172 li50.2051 98.6172 50.5039 98.5977 50.5254 98.5977 cv50.5469 98.5977 50.8672 98.6172 51.123 98.6172 cv51.1934 98.5742 li51.1621 98.543 li50.9492 98.5195 li50.8145 98.498 50.7871 98.4004 50.7695 98.2637 cv50.748 98.0684 50.748 97.7207 50.748 97.2754 cv50.748 96.8848 li50.7822 96.8457 li50.8574 96.8457 51.3691 96.8398 51.4824 96.8574 cv51.6289 96.873 51.7002 96.9609 51.7217 97.0234 cv51.7539 97.1992 li51.7861 97.2383 li51.8242 97.1504 li51.8242 97.1172 51.8359 96.9063 51.8457 96.8125 cv51.8574 96.6621 51.8848 96.5625 51.8848 96.5371 cv51.8516 96.4961 li51.7969 96.5469 li51.7539 96.6035 51.6934 96.6289 51.5859 96.6387 cv51.3779 96.6445 li50.7822 96.6504 li50.748 96.6074 li50.748 95.3848 li50.791 95.3359 li51.5039 95.3457 li51.6895 95.3496 51.7813 95.4336 51.8145 95.4883 cv51.8633 95.666 li51.9004 95.7246 li51.9434 95.666 li51.9648 95.3555 li51.9766 95.2266 52.0039 95.1602 52.0039 95.1289 cvcpf56.4575 96.7754 mo56.436 96.8125 li55.397 96.8125 li55.3794 96.7754 li55.8579 95.3086 li55.9399 95.3086 li56.4575 96.7754 licp58.1157 98.5703 mo58.0591 98.5371 li57.8423 98.5039 li57.729 98.4707 57.5708 98.3848 57.3755 97.9004 cv57.0435 97.0742 56.1899 94.8301 56.1099 94.623 cv56.0435 94.4531 56.022 94.4277 55.9888 94.4277 cv55.9575 94.4277 55.936 94.4609 55.8696 94.6387 cv54.6353 98.0156 li54.5376 98.2871 54.4302 98.4941 54.1802 98.5254 cv54.022 98.5371 li53.9731 98.5703 li54.0767 98.6113 li54.3306 98.6113 54.6294 98.5977 54.6899 98.5977 cv54.7485 98.5977 54.9849 98.6113 55.1138 98.6113 cv55.1958 98.5703 li55.1411 98.5371 li55.0864 98.5371 li54.9946 98.5371 54.8794 98.4883 54.8794 98.3789 cv54.8794 98.2813 54.9087 98.1504 54.9575 98.0156 cv55.2817 97.0527 li55.3364 97.0078 li56.5063 97.0078 li56.5532 97.041 li57.061 98.3789 li57.0259 98.5254 li56.9907 98.5625 li56.9907 98.5977 57.0493 98.5977 57.1528 98.6016 cv57.5278 98.6113 57.9243 98.6113 58.0063 98.6113 cv58.1157 98.5703 licpf60.3735 96.1934 mo60.3735 96.5371 60.2485 96.7754 60.0903 96.8848 cv59.9868 96.9551 59.8618 96.9707 59.7524 96.9707 cv59.5571 96.9707 59.3423 96.9375 59.2759 96.9004 cv59.2427 96.8457 li59.2427 95.3789 li59.2798 95.3242 li59.3247 95.3125 59.4595 95.2969 59.5962 95.2969 cv60.0747 95.2969 60.3735 95.6348 60.3735 96.1934 cvcp61.9595 98.5703 mo61.9165 98.5313 li61.7427 98.5195 li61.6235 98.498 61.4165 98.4219 61.1782 98.1504 cv60.9146 97.8574 60.6392 97.4863 60.2642 96.998 cv60.6782 96.6172 60.7974 96.3086 60.7974 95.9648 cv60.7974 95.6445 60.6177 95.416 60.4985 95.3359 cv60.2544 95.1602 59.9712 95.123 59.6763 95.123 cv59.5356 95.123 59.0942 95.1387 59.0474 95.1387 cv59.02 95.1387 58.688 95.123 58.481 95.123 cv58.4165 95.1719 li58.4556 95.2031 li58.6118 95.2207 li58.7427 95.2422 58.7974 95.3301 58.8071 95.4824 cv58.8169 95.6348 58.8169 95.7422 58.8169 96.4648 cv58.8169 97.2754 li58.8169 97.7207 58.8169 98.0645 58.7974 98.2578 cv58.7817 98.3887 58.7524 98.4883 58.6606 98.5098 cv58.5083 98.5371 li58.4751 98.5703 li58.5356 98.6172 li58.6782 98.6172 59.02 98.5977 59.0259 98.5977 cv59.0513 98.5977 59.3735 98.6172 59.6274 98.6172 cv59.688 98.5703 li59.6548 98.5371 li59.4438 98.5098 li59.3071 98.4883 59.2798 98.3887 59.2642 98.2578 cv59.2427 98.0645 59.2427 97.7207 59.2427 97.2754 cv59.2427 97.168 li59.2759 97.1289 li59.8403 97.1406 li59.9009 97.168 li59.9927 97.2871 60.2095 97.5957 60.4048 97.8457 cv60.6704 98.1953 60.8306 98.4219 61.0317 98.5254 cv61.1509 98.5898 61.2642 98.6172 61.5239 98.6172 cv61.8677 98.6172 li61.9595 98.5703 licpf64.5669 95.1445 mo64.5474 95.0898 li64.5063 95.0898 64.3716 95.1348 64.0806 95.1348 cv62.3286 95.1348 li62.2739 95.1348 62.0942 95.123 61.9634 95.1113 cv61.8384 95.1016 61.7896 95.0566 61.7466 95.0566 cv61.7017 95.1445 li61.5962 95.6621 li61.6216 95.6992 li61.6743 95.6563 li61.7583 95.502 li61.8345 95.3887 61.9419 95.3633 62.231 95.3555 cv62.897 95.3457 li62.897 97.2754 li62.897 97.7148 62.897 98.0684 62.8774 98.2637 cv62.8599 98.3965 62.8325 98.498 62.7407 98.5137 cv62.5962 98.5371 li62.5552 98.5703 li62.6333 98.6113 li62.7739 98.6113 63.0923 98.5977 63.1157 98.5977 cv63.1431 98.5977 63.4595 98.6113 63.7075 98.6113 cv63.7837 98.5703 li63.7466 98.5371 li63.5396 98.5195 li63.4048 98.498 63.3774 98.4004 63.3599 98.2637 cv63.3403 98.0684 63.3403 97.7148 63.3403 97.2754 cv63.3403 95.3457 li63.9048 95.3555 li64.3462 95.3633 64.4419 95.459 64.4634 95.6055 cv64.4751 95.6699 li64.5181 95.7539 li64.5571 95.6934 li64.5571 95.6406 64.5669 95.2813 64.5669 95.1445 cvcpf67.0337 97.7148 mo67.0337 97.3457 66.9165 97.0371 66.3716 96.6074 cv66.2407 96.5078 li65.8286 96.1836 65.686 95.9805 65.686 95.7539 cv65.686 95.4336 65.9321 95.2305 66.2251 95.2305 cv66.6489 95.2305 66.7524 95.4004 66.7896 95.459 cv66.856 95.6934 li66.8989 95.7539 li66.936 95.6445 li66.936 95.3301 66.9575 95.1758 66.9575 95.1543 cv66.9165 95.123 li66.7524 95.1016 li66.6392 95.0742 66.4927 95.0508 66.311 95.0508 cv65.7251 95.0508 65.3442 95.3887 65.3442 95.8828 cv65.3442 96.1992 65.4419 96.5156 65.9321 96.918 cv66.1372 97.084 li66.5337 97.4102 66.6821 97.6016 66.6821 97.8887 cv66.6821 98.1895 66.4438 98.4883 66.0337 98.4883 cv65.7251 98.4883 65.4243 98.3555 65.3599 98.0371 cv65.3442 97.8633 li65.3071 97.8125 li65.2622 97.8828 li65.2563 97.9609 65.2368 98.1445 65.2368 98.373 cv65.2368 98.498 65.2407 98.5195 65.3071 98.5527 cv65.4966 98.6465 65.7134 98.6777 65.9321 98.6777 cv66.1802 98.6777 66.436 98.6289 66.6313 98.4883 cv66.9536 98.2578 67.0337 97.9063 67.0337 97.7148 cvcpf3.77588 128.325 mo3.77588 128.966 li2.25635 128.966 li2.25635 134.102 li1.52002 134.102 li1.52002 128.966 li0 128.966 li0 128.325 li3.77588 128.325 licp0 0 0 1 cmykf6.61621 134.102 mo6.61621 131.365 li6.61621 130.869 6.45605 130.518 5.896 130.518 cv5.24023 130.518 5.07227 131.046 5.07227 131.726 cv5.07227 134.102 li4.41602 134.102 li4.41602 128.325 li5.07227 128.325 li5.07227 130.582 li5.104 130.582 li5.36816 130.109 5.67236 129.981 6.2002 129.981 cv6.88818 129.981 7.27197 130.325 7.27197 131.237 cv7.27197 134.102 li6.61621 134.102 licpf9.02393 134.102 mo8.36816 134.102 li8.36816 130.062 li9.02393 130.062 li9.02393 134.102 licp8.32813 128.325 mo9.06396 128.325 li9.06396 129.029 li8.32813 129.029 li8.32813 128.325 licpf11.312 134.182 mo10.4399 134.182 9.896 133.798 9.91992 132.869 cv10.6641 132.869 li10.6641 133.102 10.6719 133.646 11.3359 133.646 cv11.728 133.646 12.0317 133.445 12.0317 133.029 cv12.0317 132.31 10.0161 132.294 10.0161 131.086 cv10.0161 130.661 10.272 129.981 11.4077 129.981 cv12.1279 129.981 12.7437 130.325 12.688 131.126 cv11.96 131.126 li11.9678 130.701 11.7441 130.478 11.3281 130.478 cv10.9761 130.478 10.7041 130.67 10.7041 131.021 cv10.7041 131.733 12.7197 131.718 12.7197 132.949 cv12.7197 133.838 12.1118 134.182 11.312 134.182 cvcpf17.6396 132.014 mo17.6396 131.405 17.6396 130.518 16.8154 130.518 cv16.0073 130.518 16.0796 131.638 16.0796 132.254 cv16.0796 132.79 16.1113 133.646 16.8394 133.646 cv17.5435 133.646 17.6396 133.094 17.6396 132.014 cvcp16.0796 130.542 mo16.0957 130.542 li16.3193 130.166 16.5996 129.981 17.0234 129.981 cv17.6714 129.981 18.3276 130.237 18.3276 132.014 cv18.3276 133.021 18.2954 134.182 16.9917 134.182 cv16.6074 134.182 16.3276 134.014 16.1035 133.693 cv16.0796 133.693 li16.0796 135.63 li15.4233 135.63 li15.4233 130.062 li16.0796 130.062 li16.0796 130.542 licpf20.0073 130.67 mo20.0234 130.67 li20.2954 130.054 20.6313 129.981 21.2715 129.981 cv21.2715 130.661 li21.1514 130.646 21.0396 130.622 20.9194 130.622 cv20.1914 130.622 20.0073 131.174 20.0073 131.718 cv20.0073 134.102 li19.3516 134.102 li19.3516 130.062 li20.0073 130.062 li20.0073 130.67 licpf24.2241 131.861 mo24.2241 130.758 23.8799 130.518 23.376 130.518 cv22.8721 130.518 22.5278 130.758 22.5278 131.861 cv22.5278 133.174 22.6958 133.646 23.376 133.646 cv24.0562 133.646 24.2241 133.174 24.2241 131.861 cvcp21.8398 132.142 mo21.8398 130.958 21.9761 129.981 23.376 129.981 cv24.7759 129.981 24.9121 130.958 24.9121 132.142 cv24.9121 133.926 24.2319 134.182 23.376 134.182 cv22.52 134.182 21.8398 133.926 21.8398 132.142 cvcpf27.2798 130.525 mo26.5361 130.525 26.5117 131.422 26.5117 131.958 cv26.5117 133.254 26.8081 133.558 27.2959 133.558 cv28.0879 133.558 28.064 132.621 28.064 132.062 cv28.064 131.462 28.104 130.525 27.2798 130.525 cvcp28.0479 130.062 mo28.7041 130.062 li28.7041 134.51 li28.7041 135.413 28.104 135.63 27.2158 135.63 cv26.5439 135.63 25.936 135.294 25.9917 134.55 cv26.728 134.55 li26.7358 134.926 26.9839 135.134 27.3438 135.134 cv27.7998 135.134 28.0479 134.854 28.0479 134.438 cv28.0479 133.598 li28.0239 133.598 li27.856 133.918 27.4878 134.102 27.1357 134.102 cv26.04 134.102 25.8237 133.157 25.8237 131.958 cv25.8237 130.102 26.7598 129.981 27.0879 129.981 cv27.5117 129.981 27.8481 130.166 28.0317 130.558 cv28.0479 130.558 li28.0479 130.062 licpf30.5518 130.67 mo30.5679 130.67 li30.8398 130.054 31.1758 129.981 31.8159 129.981 cv31.8159 130.661 li31.6958 130.646 31.584 130.622 31.4639 130.622 cv30.7358 130.622 30.5518 131.174 30.5518 131.718 cv30.5518 134.102 li29.896 134.102 li29.896 130.062 li30.5518 130.062 li30.5518 130.67 licpf33.0957 132.901 mo33.0957 133.294 33.2881 133.646 33.728 133.646 cv34.1279 133.646 34.624 133.397 34.5601 132.094 cv33.936 132.102 33.0957 132.046 33.0957 132.901 cvcp34.5757 133.518 mo34.5601 133.518 li34.3599 133.981 34.0479 134.182 33.5439 134.182 cv32.688 134.182 32.4399 133.63 32.4399 132.854 cv32.4399 131.63 33.6401 131.573 34.5601 131.598 cv34.5757 131.062 34.584 130.478 33.8799 130.478 cv33.4399 130.478 33.208 130.773 33.248 131.197 cv32.5361 131.197 li32.5679 130.294 33.0479 129.981 33.9038 129.981 cv34.9438 129.981 35.2158 130.518 35.2158 131.197 cv35.2158 133.142 li35.2158 133.462 35.248 133.79 35.2959 134.102 cv34.5757 134.102 li34.5757 133.518 licpf38.4399 134.102 mo38.4399 131.302 li38.4399 130.894 38.3276 130.518 37.7998 130.518 cv37.6001 130.518 37.3276 130.638 37.2319 130.79 cv37.1118 130.989 37.0801 131.229 37.0801 131.382 cv37.0801 134.102 li36.4238 134.102 li36.4238 130.901 li36.4238 130.622 36.4077 130.342 36.3838 130.062 cv37.0801 130.062 li37.0801 130.565 li37.0957 130.565 li37.2881 130.134 37.6318 129.981 38.104 129.981 cv38.4717 129.981 38.896 130.134 39.0479 130.502 cv39.272 130.069 39.6396 129.981 40.0078 129.981 cv40.4316 129.981 41.1118 130.077 41.1118 131.029 cv41.1118 134.102 li40.4556 134.102 li40.4556 131.302 li40.4556 130.894 40.3438 130.518 39.8159 130.518 cv39.5679 130.518 39.4956 130.525 39.3198 130.67 cv39.1279 130.83 39.0957 131.229 39.0957 131.382 cv39.0957 134.102 li38.4399 134.102 licpf44.5674 134.102 mo43.9116 134.102 li43.9116 130.062 li44.5674 130.062 li44.5674 134.102 licp43.8716 128.325 mo44.6074 128.325 li44.6074 129.029 li43.8716 129.029 li43.8716 128.325 licpf46.8555 134.182 mo45.9834 134.182 45.4395 133.798 45.4634 132.869 cv46.2075 132.869 li46.2075 133.102 46.2153 133.646 46.8794 133.646 cv47.2715 133.646 47.5752 133.445 47.5752 133.029 cv47.5752 132.31 45.5596 132.294 45.5596 131.086 cv45.5596 130.661 45.8154 129.981 46.9512 129.981 cv47.6714 129.981 48.2876 130.325 48.2314 131.126 cv47.5034 131.126 li47.5112 130.701 47.2876 130.478 46.8716 130.478 cv46.5195 130.478 46.2476 130.67 46.2476 131.021 cv46.2476 131.733 48.2632 131.718 48.2632 132.949 cv48.2632 133.838 47.6553 134.182 46.8555 134.182 cvcpf52.895 134.102 mo52.895 131.302 li52.895 130.894 52.7827 130.518 52.2549 130.518 cv52.0552 130.518 51.7827 130.638 51.687 130.79 cv51.5669 130.989 51.5352 131.229 51.5352 131.382 cv51.5352 134.102 li50.8789 134.102 li50.8789 130.901 li50.8789 130.622 50.8628 130.342 50.8389 130.062 cv51.5352 130.062 li51.5352 130.565 li51.5508 130.565 li51.7432 130.134 52.0869 129.981 52.5591 129.981 cv52.9268 129.981 53.3511 130.134 53.5024 130.502 cv53.7271 130.069 54.0952 129.981 54.4634 129.981 cv54.8872 129.981 55.5669 130.077 55.5669 131.029 cv55.5669 134.102 li54.9106 134.102 li54.9106 131.302 li54.9106 130.894 54.7993 130.518 54.271 130.518 cv54.0229 130.518 53.9507 130.525 53.7749 130.67 cv53.5825 130.83 53.5513 131.229 53.5513 131.382 cv53.5513 134.102 li52.895 134.102 licpf57.2466 132.901 mo57.2466 133.294 57.439 133.646 57.8784 133.646 cv58.2788 133.646 58.7749 133.397 58.7104 132.094 cv58.0864 132.102 57.2466 132.046 57.2466 132.901 cvcp58.7271 133.518 mo58.7104 133.518 li58.5112 133.981 58.1987 134.182 57.6948 134.182 cv56.8384 134.182 56.5903 133.63 56.5903 132.854 cv56.5903 131.63 57.7905 131.573 58.7104 131.598 cv58.7271 131.062 58.7349 130.478 58.0308 130.478 cv57.5903 130.478 57.3589 130.773 57.3989 131.197 cv56.687 131.197 li56.7192 130.294 57.1987 129.981 58.0552 129.981 cv59.0952 129.981 59.3667 130.518 59.3667 131.197 cv59.3667 133.142 li59.3667 133.462 59.3989 133.79 59.4468 134.102 cv58.7271 134.102 li58.7271 133.518 licpf61.9829 130.518 mo61.2788 130.518 61.1831 131.077 61.1831 132.157 cv61.1831 132.766 61.1831 133.646 62.0063 133.646 cv62.7427 133.646 62.7427 132.733 62.7427 131.918 cv62.7427 131.382 62.7104 130.518 61.9829 130.518 cvcp62.7427 128.325 mo63.3989 128.325 li63.3989 134.102 li62.7427 134.102 li62.7427 133.621 li62.7271 133.621 li62.5024 133.998 62.2231 134.182 61.7983 134.182 cv61.1509 134.182 60.4946 133.926 60.4946 132.149 cv60.4946 131.142 60.5269 129.981 61.8306 129.981 cv62.2144 129.981 62.4946 130.149 62.7183 130.47 cv62.7427 130.47 li62.7427 128.325 licpf66.7827 131.798 mo66.7827 130.622 66.4546 130.478 65.9751 130.478 cv65.5591 130.478 65.2144 130.678 65.2065 131.798 cv66.7827 131.798 licp65.2065 132.294 mo65.2065 133.422 65.5103 133.646 66.0229 133.646 cv66.4702 133.646 66.7026 133.285 66.7271 132.878 cv67.4468 132.878 li67.439 133.773 66.8862 134.182 66.0386 134.182 cv65.1831 134.182 64.5024 133.926 64.5024 132.142 cv64.5024 130.958 64.6392 129.981 66.0386 129.981 cv67.1909 129.981 67.479 130.613 67.479 131.949 cv67.479 132.294 li65.2065 132.294 licpf72.5337 132.014 mo72.5337 131.405 72.5337 130.518 71.7104 130.518 cv70.9019 130.518 70.9741 131.638 70.9741 132.254 cv70.9741 132.79 71.0063 133.646 71.7339 133.646 cv72.438 133.646 72.5337 133.094 72.5337 132.014 cvcp70.9741 130.542 mo70.9897 130.542 li71.2144 130.166 71.4937 129.981 71.9185 129.981 cv72.5659 129.981 73.2222 130.237 73.2222 132.014 cv73.2222 133.021 73.1899 134.182 71.8862 134.182 cv71.5024 134.182 71.2222 134.014 70.9976 133.693 cv70.9741 133.693 li70.9741 135.63 li70.3179 135.63 li70.3179 130.062 li70.9741 130.062 li70.9741 130.542 licpf76.4937 131.861 mo76.4937 130.758 76.1499 130.518 75.646 130.518 cv75.1421 130.518 74.7983 130.758 74.7983 131.861 cv74.7983 133.174 74.9663 133.646 75.646 133.646 cv76.3257 133.646 76.4937 133.174 76.4937 131.861 cvcp74.1099 132.142 mo74.1099 130.958 74.2456 129.981 75.646 129.981 cv77.0464 129.981 77.1821 130.958 77.1821 132.142 cv77.1821 133.926 76.5024 134.182 75.646 134.182 cv74.7896 134.182 74.1099 133.926 74.1099 132.142 cvcpf79.3735 134.182 mo78.5015 134.182 77.9575 133.798 77.9819 132.869 cv78.7261 132.869 li78.7261 133.102 78.7339 133.646 79.3979 133.646 cv79.7896 133.646 80.0942 133.445 80.0942 133.029 cv80.0942 132.31 78.0776 132.294 78.0776 131.086 cv78.0776 130.661 78.3335 129.981 79.4702 129.981 cv80.1899 129.981 80.8062 130.325 80.7495 131.126 cv80.022 131.126 li80.0298 130.701 79.8062 130.478 79.3901 130.478 cv79.0376 130.478 78.7661 130.67 78.7661 131.021 cv78.7661 131.733 80.7817 131.718 80.7817 132.949 cv80.7817 133.838 80.1743 134.182 79.3735 134.182 cvcpf82.8853 134.182 mo82.0132 134.182 81.4692 133.798 81.4937 132.869 cv82.2378 132.869 li82.2378 133.102 82.2456 133.646 82.9097 133.646 cv83.3013 133.646 83.606 133.445 83.606 133.029 cv83.606 132.31 81.5894 132.294 81.5894 131.086 cv81.5894 130.661 81.8452 129.981 82.9819 129.981 cv83.7017 129.981 84.3179 130.325 84.2612 131.126 cv83.5337 131.126 li83.5415 130.701 83.3179 130.478 82.9019 130.478 cv82.5493 130.478 82.2778 130.67 82.2778 131.021 cv82.2778 131.733 84.2935 131.718 84.2935 132.949 cv84.2935 133.838 83.686 134.182 82.8853 134.182 cvcpf85.8452 134.102 mo85.189 134.102 li85.189 130.062 li85.8452 130.062 li85.8452 134.102 licp85.1489 128.325 mo85.8853 128.325 li85.8853 129.029 li85.1489 129.029 li85.1489 128.325 licpf88.3892 133.646 mo89.2124 133.646 89.2124 132.766 89.2124 132.157 cv89.2124 131.077 89.1167 130.518 88.4126 130.518 cv87.6851 130.518 87.6528 131.382 87.6528 131.918 cv87.6528 132.533 87.5806 133.646 88.3892 133.646 cvcp87.6528 134.102 mo86.9966 134.102 li86.9966 128.325 li87.6528 128.325 li87.6528 130.47 li87.6763 130.47 li87.9009 130.149 88.1812 129.981 88.5649 129.981 cv89.8687 129.981 89.9009 131.142 89.9009 132.149 cv89.9009 133.926 89.2446 134.182 88.5972 134.182 cv88.1724 134.182 87.8931 133.998 87.6685 133.621 cv87.6528 133.621 li87.6528 134.102 licpf91.5405 134.102 mo90.8843 134.102 li90.8843 128.325 li91.5405 128.325 li91.5405 134.102 licpf94.8521 131.798 mo94.8521 130.622 94.5239 130.478 94.0444 130.478 cv93.6284 130.478 93.2837 130.678 93.2759 131.798 cv94.8521 131.798 licp93.2759 132.294 mo93.2759 133.422 93.5796 133.646 94.0923 133.646 cv94.5396 133.646 94.772 133.285 94.7964 132.878 cv95.5161 132.878 li95.5083 133.773 94.9556 134.182 94.1079 134.182 cv93.2524 134.182 92.5718 133.926 92.5718 132.142 cv92.5718 130.958 92.7085 129.981 94.1079 129.981 cv95.2603 129.981 95.5483 130.613 95.5483 131.949 cv95.5483 132.294 li93.2759 132.294 licpf99.7798 133.646 mo100.603 133.646 100.603 132.766 100.603 132.157 cv100.603 131.077 100.507 130.518 99.8032 130.518 cv99.0757 130.518 99.0435 131.382 99.0435 131.918 cv99.0435 132.533 98.9712 133.646 99.7798 133.646 cvcp99.0435 134.102 mo98.3872 134.102 li98.3872 128.325 li99.0435 128.325 li99.0435 130.47 li99.0669 130.47 li99.2915 130.149 99.5718 129.981 99.9556 129.981 cv101.259 129.981 101.292 131.142 101.292 132.149 cv101.292 133.926 100.635 134.182 99.9878 134.182 cv99.563 134.182 99.2837 133.998 99.0591 133.621 cv99.0435 133.621 li99.0435 134.102 licpf103.507 133.35 mo103.523 133.35 li104.492 130.062 li105.204 130.062 li103.372 135.63 li102.691 135.63 li103.147 134.102 li101.78 130.062 li102.54 130.062 li103.507 133.35 licpf10.5313 143.701 mo10.5313 137.925 li13.3955 137.925 li13.3955 138.565 li11.2676 138.565 li11.2676 140.421 li13.2832 140.421 li13.2832 141.062 li11.2676 141.062 li11.2676 143.701 li10.5313 143.701 licpf16.2993 141.461 mo16.2993 140.357 15.9551 140.117 15.4512 140.117 cv14.9473 140.117 14.603 140.357 14.603 141.461 cv14.603 142.773 14.771 143.245 15.4512 143.245 cv16.1313 143.245 16.2993 142.773 16.2993 141.461 cvcp13.915 141.741 mo13.915 140.558 14.0513 139.581 15.4512 139.581 cv16.8511 139.581 16.9873 140.558 16.9873 141.741 cv16.9873 143.525 16.3071 143.781 15.4512 143.781 cv14.5952 143.781 13.915 143.525 13.915 141.741 cvcpf18.667 140.27 mo18.6831 140.27 li18.9551 139.653 19.291 139.581 19.9312 139.581 cv19.9312 140.261 li19.811 140.245 19.6992 140.222 19.5791 140.222 cv18.8511 140.222 18.667 140.773 18.667 141.317 cv18.667 143.701 li18.0112 143.701 li18.0112 139.661 li18.667 139.661 li18.667 140.27 licpf21.9873 140.117 mo21.2832 140.117 21.187 140.677 21.187 141.757 cv21.187 142.365 21.187 143.245 22.0112 143.245 cv22.7471 143.245 22.7471 142.333 22.7471 141.518 cv22.7471 140.981 22.7153 140.117 21.9873 140.117 cvcp22.7471 137.925 mo23.4033 137.925 li23.4033 143.701 li22.7471 143.701 li22.7471 143.221 li22.731 143.221 li22.5073 143.598 22.2271 143.781 21.8032 143.781 cv21.1553 143.781 20.499 143.525 20.499 141.749 cv20.499 140.741 20.5313 139.581 21.835 139.581 cv22.2192 139.581 22.499 139.749 22.7231 140.069 cv22.7471 140.069 li22.7471 137.925 licpf27.0747 143.701 mo26.3867 143.701 li26.3867 137.925 li27.5791 137.925 li29.0347 142.773 li29.0508 142.773 li30.5229 137.925 li31.7388 137.925 li31.7388 143.701 li31.0029 143.701 li31.0029 138.565 li30.9868 138.565 li29.3711 143.701 li28.6748 143.701 li27.0908 138.565 li27.0747 138.565 li27.0747 143.701 licpf35.2031 141.461 mo35.2031 140.357 34.8589 140.117 34.355 140.117 cv33.8511 140.117 33.5068 140.357 33.5068 141.461 cv33.5068 142.773 33.6748 143.245 34.355 143.245 cv35.0352 143.245 35.2031 142.773 35.2031 141.461 cvcp32.8188 141.741 mo32.8188 140.558 32.9551 139.581 34.355 139.581 cv35.7549 139.581 35.8911 140.558 35.8911 141.741 cv35.8911 143.525 35.2109 143.781 34.355 143.781 cv33.499 143.781 32.8188 143.525 32.8188 141.741 cvcpf36.9634 139.661 mo36.9634 138.885 li37.6196 138.589 li37.6196 139.661 li38.4995 139.661 li38.4995 140.157 li37.6196 140.157 li37.6196 142.629 li37.6196 142.885 37.6196 143.213 38.2192 143.213 cv38.2676 143.213 38.3716 143.197 38.5156 143.182 cv38.5156 143.686 li38.2993 143.701 38.0835 143.749 37.8672 143.749 cv37.2437 143.749 36.9634 143.493 36.9634 143.029 cv36.9634 140.157 li36.2993 140.157 li36.2993 139.661 li36.9634 139.661 licpf41.3477 141.461 mo41.3477 140.357 41.0034 140.117 40.4995 140.117 cv39.9956 140.117 39.6514 140.357 39.6514 141.461 cv39.6514 142.773 39.8193 143.245 40.4995 143.245 cv41.1797 143.245 41.3477 142.773 41.3477 141.461 cvcp38.9634 141.741 mo38.9634 140.558 39.0996 139.581 40.4995 139.581 cv41.8994 139.581 42.0356 140.558 42.0356 141.741 cv42.0356 143.525 41.3555 143.781 40.4995 143.781 cv39.6436 143.781 38.9634 143.525 38.9634 141.741 cvcpf43.7153 140.27 mo43.7314 140.27 li44.0034 139.653 44.3394 139.581 44.9795 139.581 cv44.9795 140.261 li44.8594 140.245 44.7476 140.222 44.6274 140.222 cv43.8994 140.222 43.7153 140.773 43.7153 141.317 cv43.7153 143.701 li43.0596 143.701 li43.0596 139.661 li43.7153 139.661 li43.7153 140.27 licpf50.0112 139.518 mo50.019 139.189 49.9951 138.861 49.8433 138.677 cv49.6914 138.493 49.3472 138.43 49.1953 138.43 cv48.5874 138.43 48.3472 138.797 48.3232 138.877 cv48.2993 138.941 48.1553 139.085 48.1553 140.077 cv48.1553 141.621 li48.1553 143.037 48.6191 143.205 49.1875 143.205 cv49.4111 143.205 50.0913 143.125 50.0991 141.997 cv50.8594 141.997 li50.8911 143.821 49.6035 143.821 49.2271 143.821 cv48.5073 143.821 47.4033 143.773 47.4033 141.533 cv47.4033 139.901 li47.4033 138.27 48.1235 137.806 49.2593 137.806 cv50.4033 137.806 50.8433 138.397 50.7715 139.518 cv50.0112 139.518 licpf54.0757 141.461 mo54.0757 140.357 53.7319 140.117 53.2271 140.117 cv52.7236 140.117 52.3794 140.357 52.3794 141.461 cv52.3794 142.773 52.5474 143.245 53.2271 143.245 cv53.9077 143.245 54.0757 142.773 54.0757 141.461 cvcp51.6914 141.741 mo51.6914 140.558 51.8276 139.581 53.2271 139.581 cv54.6274 139.581 54.7632 140.558 54.7632 141.741 cv54.7632 143.525 54.0835 143.781 53.2271 143.781 cv52.3716 143.781 51.6914 143.525 51.6914 141.741 cvcpf57.7476 143.701 mo57.7476 140.901 li57.7476 140.493 57.6362 140.117 57.1079 140.117 cv56.9077 140.117 56.6362 140.237 56.5396 140.39 cv56.4204 140.589 56.3882 140.829 56.3882 140.981 cv56.3882 143.701 li55.7319 143.701 li55.7319 140.501 li55.7319 140.222 55.7163 139.941 55.6919 139.661 cv56.3882 139.661 li56.3882 140.165 li56.4038 140.165 li56.5962 139.733 56.9399 139.581 57.4116 139.581 cv57.7798 139.581 58.2036 139.733 58.356 140.102 cv58.5796 139.669 58.9478 139.581 59.3159 139.581 cv59.7397 139.581 60.4194 139.677 60.4194 140.629 cv60.4194 143.701 li59.7642 143.701 li59.7642 140.901 li59.7642 140.493 59.6519 140.117 59.1235 140.117 cv58.8755 140.117 58.8042 140.125 58.6274 140.27 cv58.436 140.43 58.4038 140.829 58.4038 140.981 cv58.4038 143.701 li57.7476 143.701 licpf63.771 141.613 mo63.771 141.005 63.771 140.117 62.9478 140.117 cv62.1392 140.117 62.2114 141.237 62.2114 141.854 cv62.2114 142.39 62.2437 143.245 62.9712 143.245 cv63.6753 143.245 63.771 142.693 63.771 141.613 cvcp62.2114 140.142 mo62.2271 140.142 li62.4517 139.766 62.731 139.581 63.1558 139.581 cv63.8032 139.581 64.4595 139.837 64.4595 141.613 cv64.4595 142.621 64.4272 143.781 63.1235 143.781 cv62.7397 143.781 62.4595 143.613 62.2349 143.293 cv62.2114 143.293 li62.2114 145.229 li61.5552 145.229 li61.5552 139.661 li62.2114 139.661 li62.2114 140.142 licpf66.0591 142.501 mo66.0591 142.894 66.2515 143.245 66.6909 143.245 cv67.0913 143.245 67.5874 142.997 67.5229 141.693 cv66.8989 141.701 66.0591 141.646 66.0591 142.501 cvcp67.5396 143.117 mo67.5229 143.117 li67.3237 143.581 67.0112 143.781 66.5073 143.781 cv65.6509 143.781 65.4028 143.229 65.4028 142.453 cv65.4028 141.229 66.603 141.173 67.5229 141.197 cv67.5396 140.661 67.5474 140.077 66.8433 140.077 cv66.4028 140.077 66.1714 140.373 66.2114 140.797 cv65.4995 140.797 li65.5317 139.894 66.0112 139.581 66.8677 139.581 cv67.9077 139.581 68.1792 140.117 68.1792 140.797 cv68.1792 142.741 li68.1792 143.062 68.2114 143.39 68.2593 143.701 cv67.5396 143.701 li67.5396 143.117 licpf71.6108 143.701 mo71.6108 140.901 li71.6108 140.469 71.4595 140.117 70.8989 140.117 cv70.1792 140.117 70.0757 140.757 70.0757 141.31 cv70.0757 143.701 li69.4194 143.701 li69.4194 140.501 li69.4194 140.222 69.4028 139.941 69.3794 139.661 cv70.0757 139.661 li70.0757 140.182 li70.1069 140.182 li70.3628 139.726 70.6675 139.581 71.187 139.581 cv72.0513 139.581 72.2671 140.102 72.2671 140.901 cv72.2671 143.701 li71.6108 143.701 licpf74.5952 142.949 mo74.6108 142.949 li75.5796 139.661 li76.2915 139.661 li74.4595 145.229 li73.7788 145.229 li74.2349 143.701 li72.8677 139.661 li73.6274 139.661 li74.5952 142.949 licpf78.6431 143.701 mo78.6431 137.925 li81.5073 137.925 li81.5073 138.565 li79.3794 138.565 li79.3794 140.421 li81.395 140.421 li81.395 141.062 li79.3794 141.062 li79.3794 143.701 li78.6431 143.701 licpf84.2993 139.661 mo84.9546 139.661 li84.9546 142.861 li84.9546 143.142 84.9712 143.421 84.9946 143.701 cv84.2993 143.701 li84.2993 143.213 li84.2749 143.213 li84.0591 143.581 83.6753 143.781 83.2505 143.781 cv82.5474 143.781 82.1626 143.429 82.1626 142.741 cv82.1626 139.661 li82.8188 139.661 li82.8188 142.461 li82.8188 142.949 83.0435 143.277 83.5073 143.277 cv83.8589 143.277 84.2993 143.013 84.2993 142.341 cv84.2993 139.661 licpf88.2905 143.701 mo88.2905 140.901 li88.2905 140.469 88.1392 140.117 87.5786 140.117 cv86.8589 140.117 86.7554 140.757 86.7554 141.31 cv86.7554 143.701 li86.0991 143.701 li86.0991 140.501 li86.0991 140.222 86.0825 139.941 86.0591 139.661 cv86.7554 139.661 li86.7554 140.182 li86.7866 140.182 li87.0425 139.726 87.3472 139.581 87.8667 139.581 cv88.731 139.581 88.9468 140.102 88.9468 140.901 cv88.9468 143.701 li88.2905 143.701 licpf91.4351 140.117 mo90.731 140.117 90.6353 140.677 90.6353 141.757 cv90.6353 142.365 90.6353 143.245 91.4585 143.245 cv92.1948 143.245 92.1948 142.333 92.1948 141.518 cv92.1948 140.981 92.1626 140.117 91.4351 140.117 cvcp92.1948 137.925 mo92.8511 137.925 li92.8511 143.701 li92.1948 143.701 li92.1948 143.221 li92.1792 143.221 li91.9546 143.598 91.6753 143.781 91.2505 143.781 cv90.603 143.781 89.9468 143.525 89.9468 141.749 cv89.9468 140.741 89.979 139.581 91.2827 139.581 cv91.6665 139.581 91.9468 139.749 92.1704 140.069 cv92.1948 140.069 li92.1948 137.925 licpf94.7065 143.701 mo93.9546 143.701 li93.9546 142.869 li94.7065 142.869 li94.7065 143.701 licpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 /1 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (R. Patrick Atherton) (Minneapolis Institute of Arts)%%Title: (FFS logo BIG BW.eps)%%CreationDate: 4/5/06 11:51 AM%AI9_DataStream%Gb"-6a`8=nZS:OL,Oc0c.>fq.o0>mCLl%o5%cSa3""=c]#8%(e!'KF+GO^%AKce)<5CgH:qL8M"$ZCF1MuO*rE;1:j@7St<20F&:%]$V@:cZa4,7m(=*F]MLC<`Wg5B%?g,U%?]M4LFPaSU[_RFkbEP[Uj#ma)nYJY@m"\G92d6]n''Af5ho_Re'7k_=C@HpGE%ZdW2p/%i1$Q<rT1$3mN6R5ok(C/m'Jh0hKlWWWmr1Io38j#Flf=IXE;$L[=6]MBaE1Ilb^h4X)[Y"FOTTZB+<*TY^&t"53pbeRd4,I3sG)]%l`HLCo*B:n)nSo8\;(UMC\%?oZepO=6`"gMMD)YlkD;-1nS%7Ho^JNDeI=ZG4>/<Qacuj@\Bn"U0(**78M@8[[B,\CI/)[9Nu1Pm%`\QM.kD%.3;Al#ieoIXaY'U=fYt5P`P7a4oDTeF2GO`jroBr=(n(.=GSbBN=9!-S)drVS@DmEgDXIPi(F<,hQJ$?442RK!JC%*@J%qi2&doR6(uT(@?eV^6t8DZ91Qr,Y$5?`QDuqjlUBp!H-tNq?A]J+E(^0QoKtQ`!^EnOoq94_m:S@2oQoVrPGIBf'$Jpu:+%X+mCJ%Ofoi(U]jM/h7I8@fX0+R_="I=4cMT+5-!35C3D$6?j2>3c1Yl7S2=3S>WZS$0SGHrjD<T&ZPHGAf3gj,a35`C_q3/E-EC)n($cPq%i^->O$5^_?#l*hlqf);V?Is&=cT.#T?*e[GZK69(Tb27?CLfU)KCgMR8cO2;O#@q*d-ipJX;`ifMYdDq:!;pr5i(OFUY'k/Z%,t2%?N:RL_rPTUmcZIs4*^n2^HBtoOM@t03`$_!%WH"ia:n%=W:^4Q[_&)skM>iK-aU>5khJ#$8%&=Z9]Tftd9FaK)#Z6`hZ.?_iK#=>%j_>=P98WF=]>uaOfu':$c$CI<Aq8gKPF%&RF#]nX3g-J3/Tb?GpY""jV^:%5IO(B(^]]PVs#K@(+tp;6gQ^-=26d51RUE;re("Mr%j(j1#s30,R[8uVPY$67eJ#KCt:coOOd:X\'#'7H3%,N@]o)GUqbJ0Wd3j"1o;o"A*jJ^Ys5L`o^PJ;GBk0n9cV<0?\bS&S7[+tYU%g$1[mN>.IX]93%klTQ\i`aQH,BK'=ROSKlXZ1IUH.Rs-m^@p>-c0aCi8BI&0Ctu%uCY^Om$^<&gJ:BkVKgcW.$)I8P#Y%thXfWnj%6p4af996Qo[Di;>>L4Q(RX\rFT@oDmC]4,.;FUrr=`7gYNQd`JQ?etI$LfXa[fkSDq,Xk[Y/-HR%/?:\[E-sSY6/-uHp.9$nD,;G%!donD]r7:=[g_/O?84;3&hF699__fPCW"bTY=lSNI!td-O`(977JN1-;?hT7iEJ#dVFJ;P*5k3/(49uo3ooVDf7U7;h_"CN^paU,%')@j<ElP2J'h]cYlk;:3@'T32_q-&=(VUr<IIc3GDZRR@nh%\e%,VD@1U[Kp,RsI(1^:5;pi4C,Ks(_gT7"-+>C^XSHqWr\_mb5)%7t\":!=BLgO?R)_-m&;rnFalSL[Q"+$fkNFD[F/>bQa"U)'P'"$lKd8*#14?F:]uiHqsAe6LL#0Z;.?60rb:D1PD8%7`I3WT2+T>%C$#t1E@M\0FXhtk-6\*gL]H8WOIheAT68R^96AQ+>q>Cs3>GTtFu+)V@8q'9Ja7n7k\e5Gi"k.3>L'_n:IBSa*gn]u2NZ#QnDek"%?GS.<-*QZ8]S`ln`u;`8()[S%GC<F:\,:hbKQ"scqiraM9@!S[+p1t%>Rj`oD>@E2.;Ta.8mCDZ$;;EbXoSrC_/MF=BM-)kpk>h:%Thm;)$>'!5?u"rAa_&rCOR[LODUF)o[Yfb_IS.S"Yl\uB#?F@S>/1YDaXqcaBM*!><%&JSV%Se<cIT9'>\Coqd*#Ul;C]SZ+r&^^%U)pu.^rmK90`[bFX8qMu<)J1gI&PPKb&-'C'AB2t[6g]dc9O1Dd+g3d[Kk'$THb4oaFK:b>8?@6$+a>kDYl[!(C4FO5tiD\^8:W?%TN);3<WMF\5Xj:K1-e_FLhd!Q2'@)\aBf#?Do",P0H^i6N!0;o^d)UO`@]!['nL=.0Ua&AWWT#3_'g6VhO7@DFp8.!!\8'f96e5j%%PW_Cb[LS$BYZfC@&"o>VC`WY%lhc6::#K2%,a5WAnN!+Ym<J&"l/>CQT?!l<soks!!_">'U4167:>L7?uZ\obQ4lUJGTeC"WGU?%1<bY#b`=?C-Q^JK#A/u"1WY*WUk+%HB4,`pJJ5J"\p6!s*+4(#A/#k0\d$"c7LI'aOAc7=B[A8k(/QfC7<f7$C1QM2$XFIead*jm%a3C]FFo]/UqY'RfD\RN8n^FejWmpfr2ZS?$,Si5Nk)@$kO`csP+c6Y+!9m+q[6]3IqQ^;)0)j)-^m_e+SDdKd_#ApM5/8g9!;'pT%b3ioWI+,A1/:O*l"9*7[/hffHo/&9#'S<itT</.t6rGQ=hl71EWFjl2'TG$4&DD5]7GOPl:93ruSF;!A#7rD`f`p)@NpXG=A4``E%#9`M+2UhlUan[h3^r8tN;)j2!c(&Zr"K@s@J;jk5,6nB7I,E5[#,t0`Womba[i*W@",8WTJWgQ;L&>f2c!X9;#I.r&Qr=\lcIZlr%T[Ik`VA\#n-YKrl)8W64*7&Xb;JuQ7CZTAj2U0MB(4@:GU-U$/(][:f%O#tCTT%uX"%3ho*DT#Sdf^8"5NeFm".GP<Koq+H(j)C2%N2,q2",(mUdEESf0abjMb(f^BgjO"<B,\-8h67b'$p\HmKL'Z%E=>$!Tq^^d#RDBuU9K#W),UWsqK`VsUeZhO(24ZNeNcu%1NFVD%)-.Rdd0W6=%`PSrRd[Hu"_@+2lj+J"!D5%uTHsa4Fl!2KUQYm-Rc`R.5VSGQ/J#Zec=1@YA"\g+;HZTp?%@R5Y)Ls7WD:V<D$d8i%ZA=)B6_k0eX91+2Y`V;\MDGP(YXD`#-B881%hg0Q5/XWRMckd),_BM+A+8IM3A=(]@ceH%bq].N#)VpPjP:?.eTUZ4d'OBo_WTAP%gWHB&'&5hi7`S[Bf&j3$#\M?'YE3BE^I"N_9LYPDr!I^mngid(G[pl$`^^59LlVu8Q04<>^tO);BAC9r8Of<L$5n,P3Qq3N`MMq?%-hr[7&"mfnFGD\&KfP8f+a&[A'ERBUU/Lbp#c\Sk8d3Kmc!dpd2-j'(W7V5hK$n6kfhaJ4qA>O!7t>oo*oV0)Vjf<2`J3F-PQ=M9%[g:@(l*bHW=m0Y(_%6SWpmsqM$A?".`Xl-Vb!496=c?0B(GrBjc(u!J[uRL.'tYTf#g`cQ@(6W$**[%`M@Y"l"hUp3b8NCfarLi=%*6Vq\ca@RokFb%'8:Jqo""ZqF]/e1aA[09`=6amJS%<6DQ"*WdOMt'Oj][W79b:jH9;uO5QGj$5Dj#Bad`j?ifa$UYS%K^soZ!R,%C4aFC0\_oX;eFCl``Dhe@ih;j'3k2o?0='8%6DoQ$j[_bTFmPeiRph7Ppm7TN8>66#oZcZ0m6f^__OA5j.Yok1#U^%S#g"K0XFk9%N5_XE5M)E`%XoNna.#8LoUBMtE;C#ciFuQ%&Jk.?&H.n,P5QV]I8l@MSLh%]i>uVj2lC@hcr4U8"@_Fq0pqMZ0W:ZGL,N08clTZ5%Z<[j5p..^[1;q!@7i!p%K<IKZ*3:_gJOq`W-q(^O<F`*Cfd<^W=j8YQL.TD,!t3!Y;o7$A`kc30RI93Wh9E53X2@Sr:Ul:uaK4k^%?s(GTQdhsf6W%SdR+]FC+<!#7h52O8!481$+TR],\=?7ATI-2+5*^jgUH#L'-j:Wu_e$*N#01I?<1+XI$L6i=0W.&\F%U6S$CVLD%Iu:HR)f>bZ.)U"(&H69AM(d4O#\0%RBu1^QbMNQHAsbIi,68X;UnPauC,9]-#-PBc2J.[mOMGeGj$cUn`XAdp<?!4=%]jl7DFVI8%=BhB5k9@tie&JP@6L,!60XaZDHd(&scJ/H-]Rt<\k]CD<'rWHEBsL68&ab<q>,"U8GtY#+d!8]iM(ZT49G::W2.`3^gh=;(1^PRD%aYY^U9f.\RfKkj.VkE-A9>_AT7E[bpc.kus<0'*Y/.:UJVHJJ%*^FZQ/`$/r>cn9P*XH6a9a)@84,[#CUF:4#gPF=q!aa><Wo/F+%mobkY#af::A-qaQS)FTDVX&>-_JdA)`C`;:@%I\B1Q:ZBX=\PM7^0&[]W>Ug(3?[PT7d9^#%V>2m[Ft(S!FKb$l4!np8AeFEmPQ=%bM'+:AsJo0:'e)uEFAi]#VQ4j"C8HTYpXTs1X)N8-7HSr)1piXFU2E0Q>[TS9T3301u1)AMSdl"n0d%"ROm`]2K]9;3bXgS_1qCJ%0)GjXK4.0!Ppp^'XYlj;Gg(S:B6<W:_ktj$"MU("G2e[,)3%f/f+8A-+qF06Fm#@GUX/g"87^h$`!i2jRMAuq5f[oEn%f&+"e)u(%fdYJhU+$DM*/_S(dD_)@lk^q)9o*7\,VmX*6pWbokqQDXE&f.f0%^+'N:$j='VEN7;NYiW[K$td`ELE[,2tL$l>8;lT!B1lU#`Kg%T@-!RCgV]5>IS9[@V>cR=!"!/&<9"R<[TX(:`(OU/SaSeZ-P[GlP<>E'`CDI+@.h.$oA3C!HK/)#U&1D'8C0T-:+cepDaMdVBH"L%qV&S)E;(Y-C#ht2B-fD^*jG[IYg%\g(m#\QBH.#PHA7&$ks8VpQ8;?<_TJ>TL4aAA<==/H=U+2tX3mf=l>Ei#/s:be*Q.V#cupu)%I4As9@li`!!ODVhVOFIrM+WG[mKp$?7'KrTC_!d$&.Ek4#OB>,Ld3)d:5@(a)i;uT-DTnu?3'L!Q[#CfZdN77$!)rm1G>k<#o3%?%1)d!C-Hb<ZZ52c)_(qi#ki$*<>n51H'M*o9I"SYo5AUP(3uUJP5pC>'FOK?Ri2O9LS0<X?a'>Gf87,+,O4"PT4\IT`Pk$Bn;ZIEo%;,X)qp,S&B\C<:,B/?V3jKd0bVTDe_Jl]8%GNff/TL"8[a<B@qio`-(7UcI^eK(Os(],>FCb?]%hkBp(@/WGG?063J/;(54]FSLB%A[^a5DK:5TbqaQI_dg>j=?`39)Cjb]aB]36G>+PN!9Wo&D^!c[R4q(#5rYaf!,Ud&U=XL0g0P.k0gm4lAJA2K`oD]9@$B55`\be`%$"]r)*0F$E&h@O]6L%##,O`$-Hp3-!@\s4D#iUB_#84@#3+b.7XK#mt(pOr+@ZuL#'AS`3QE%\Rjb;u.T[H1"+,tQs/-k!-#$52/%8ZSjaa+A4u<A4d`]8,"tV^+HGF,m:WeUq(j(76C+b&d]-;8uP=Q,=.U$FYVLM/.!&kEqf8[6?E[.+!&uK.6OYLI!^Z8`;>Bko(0L%$q:D.:!I^HLk(dTZ)L/n7\!X'2nZ@A=-jp]Q33XmE8Ca.E`drZ!'(akNl(-f=]I='pGITEI3SB)$",?<.;5*mbCOY1[#$^)9Wl@c%(*@m_5X8"2!j5Y:6[@EEW)?.u?tZF8N:mLC'4ainTI\/_T-,`MZ')u#6GYhj1K>AE1GlO&)CUged%X,9"&]9S>*H@[H$*i9\>)M1%1-bq23c(J0\j/g(]3r-J_B@5!/DaR$_^O8I[notYpDoTQ/^kC%o0qCZHgQ\FW2k]N"[e0<^bqO_);&tj.>ImMPD"OUPQ@Fe;W?n^%D5KQ^Ys:'YL*2l,.'DasG!",QG:Wr>4^fa@/tH];'rc=nnR?rB!+nJ`B5Qbr>8W/kI=XY6D>;5rg()#840Bl5i7\g*p)p#q:;o9r%RE@sL^/+W[p:A5D151.34/iuGCLMAojV]/j,t\7ddZN2'&p.^&q,ZZG_h:($FcDF_ZPk&R>BfkjBNbE<a5hJ*LEfW*j$fi1OpgPi%k29KSM^`L@`hZjlh?/a_QlKB.(a1bh#nt=T?kO.)!F;lkk)`"c(ba*$o5HR"5S>5+b;.sATK3&aL`RZm4Hlt$FIEdE5"D8[!WfI<%</kGc,hQ.V<+UZB$OX,[RD/']i+)^ubG@e.1Zs)5ZC%"5Cb#&`XW12='*p^iq7R7%ID2OddY32dokdH>lD@Sj5[?N*Cr!j+p.^`h%9A/))"EpTi*5T(a;3(]pX6D09#%O;Dk8PHI)S"Zr.g.PIr?F6u)2LP4($TGDK0W[1"Tk77^AsY+Zc/55idGcOnNQ6W!Kb#+NR^b3%^I4f+GdhdQFc5KI8-5?>+$\or8OY%;gDm;9GEhQ@bV\t.U?"S+YFrVU725hbS@#jZ.O-H,!EuWk&0?M9H>J1!ZV7NIPN>WBVj>63%XSXUl1gMn^is[j=9TV/3!3g@jfeeD.cRIg,RK:ddQkIS/5U__0[NlDU+L"R@RHKI%/s#C.)g;GKgG4j$)@>W#@()M4[nN+l4_a,J%?mK,hS@M`]a`u/C"#D'(8pi@=&a3BA+pg)X&=@5D"G+B'G-5Hd%ROGa2Sk"1C17ts4bR:k4<?!7g3hl+D8E*8_\FC)=Je?R&7T*1%RM@.Z9F:!$,Xi/t"8OPkqBb5XpH;/YR[.=bk$&@@$%Tt97=^sMY_'he\u$;%2/SB*eh(3o3"?5@cuaih25DjD!<==)1G4o$%Dsb)%C1T1T"+%E%H.:go->%)pjEPP#nf`!J/Oi:'VuX3BXM$7M"anOMnN]U'`^Z'`U7kFs"%h=>dKVo:$3ZeF@#i87_Q%8Qmg!6a#rbXt%("\1'VEdt8$W_5#Y?_NX&-ooKCt+0E@=^g'GZ3!_,q/0hYf5r2<,E&h#p;'lD1a#8V$Z/cDIa?&ni8p\gh0!AcOtX1opcP)+Q9iV%8m2:E)?@R_T3/rEJROI#dk-!r4\&%g;m<XH(1oD=plr"22c->UMarJa?kikk7NQtbdfkiR/)YSPJ04j`.H(ZD##9;2+:-<n\lpWf%6D!ThPLUH/(S=fj4lZJg].\oYf0Ch3W<8cpb_?C2e7n7U=(PWAO4h\BlYItkd1HBUCu5>;;+$RZ3hah#L?L+)96_>.E?2N?Z3%(%%jY=To,?$<;8/PhnR"KJt"G,JCQe6@M+HshA+;MD&i<BC%@^nNCLH+;'4>oWuM9EJ\5f45N^g]m/MELtA#6bBh3CpqVH<-H[-S#Qi%,!Zc",Cj60\fquY$R\$60jP-Q/<a;;Q:n-./kZtQ(NC[U&Z]rVD=[5i=XYp@G"_!hJ@!0f,8qi\q6:>\hL_:\h.4MMn==:_BH>\3%PS)ZYGeB&HM6]P;7Y*tq&thW^7rt&dVWi]n^t;?Tdqhak+(kG^H9UhP($NhgM\[uPpB#p,j6AAm?*j;o@EU_\m?YXk0^bgEW"%!Q%0IfjIR(DMnBY)EN0ps1NJ0"fU!>5[j/e<JL7j)2G.+DiL^'+!i6Nh^%*rE[tH=34/$0T$-MZum3&d1&qmL9/CHqQ^u?^H%gBN[7@%!GL,U"CT(P"KmOh^iUoS^gJ`JRGB_[#^,gmn3QZ!_<auQ`Wsarc7"J96W6%5\kS9r<;'6Kk<9BB:1c+HGWZCb`O+WZ-GX`n^;75c%>hN!g/is2W9.b*I@F0]U)Sg/s"r)6=5bMho`s0dr;/3P[f5SsYU+fjhbD@T)EELR-"1f9>!p^%l$j%6LDL6pI,([:uNUP<sErst/%^];m7it;b;pKDeu@Z(a6;l)%e??!E+7[+91X/K`!JEV+f^(_1RY;'Yug=g@Rd-RZW_-nI$+i5jEe4*fX/h1AK"c^MBADRCFOar#%%ipj=uRH"R^Wuj%*-S-$ok"5b[TC6eSe!!Xo@j$uHmg)IK'1,DAI0@d&!f5:fZDnlkWX$UP=-!\1/kgr&>]*./go`SL*':JX/5C..%Hg+^eHGg^2r@iNDVWBe/E28#<bk4Ot3*e)][).`((o[%+Sq&DtS815"_UeKC63;OZ$X?s=nfcV,^30kf#lDTc+PST\Yil!EeC&G1%c"/LOgoN9@COpi"YcMe<cu99moGg"Zi->_af,f`Rij#dWHVf_h>s1/pe4eh4"s,V>,Qgp(o3#r,bc]N2YV-0k9M5i==%?T>1uU<7%Ju&l-<LkAm9:7,8,qa7i+96JDTdIFL(i<heU'9&q`^6p)W0,m\$Kgt<R%d?+5$nZ-UgP@ZI%Kn?cO%8\VY%U06;'Sq%,MdscJo&,%br<+NHVHL)FnO,N1"3+17[?#n7qEncJsB-!K,Rr!OBDuUcWnr^BhBcSpbZu5f9<ua80Z:r:<sP<QNKr0QtI%61OWRIdF$>Nk^-d5%\nptq!Vqfr\fo5-S37k#08./cJeNG%O%DK&I)u+eA-SVQeG-#?@g]CX!d,Od/@>Jo-;ub2!tDN@80QPijVZLt6R+0pY3&?HbC)+`%GbPR'?VPL9G.:/]QW0;dNs+\#J\'q+#()tq02nP2F2l%;+ZRh)q"m+=XpAXbB.'o1&V8%83%V:a<94r0OKSoE&`QW0R<;0s*7"E_%kVEI46T7TUJg)Iom"OpKEtIR,fe7UoHm*SP)Bm,DRQNNgD(Q8.6<u`4JO)u2*+H&>5^/r^1-^s7/AS\JcaYDtG>(PtJ\`A.[__Z=%"IK4,Q^?6i*K*1SNCibdJKOr6s+NaU;@:p%?*o-NTaW@C%t1]Ulgg_YH:4Phlb%$&PZ66DN$91_6bu_XFdUX=!e!cG;@9L5EsDsr%YU(i7K==ij503ijf9KjoU/?amaoZ3,`WZKBM<MjO1(!#tAHa[qQGncOlAiakAA7/V)u_Ja>>qSj7([g$[KPT16V.r<H3eV<AN!U7%6bkr`+BTc59i2dL'P^SjA3e%oJ\_PMcN4*f*X2!K0?]o1KEf0:>MoaU"bpXS&m-1\g',_B"Su_<?Q1h]b83o,JlLbZ#L(mB*/(nL%D!4]a-Ad$nTnDP9@m^ROgg[l?35f86_@c(;(>(8Uk^O'mb;*!n2T)Q7@O&s[*Z*KNNCkC&M_?d.Ud1StT6cJ'bi7q8!V>L^Tpt",%I2YaH,MUPG!E9&>+P4jhg+G-oCkLK9JS#s_^1F=-cdKZ9:pU6)B[N&G%V@s<ae<]'jbrml9lb?/_;$C,R3u1b><)t3p"7Wb1e7Tk%>"7_'2l0XpbR)a;%'e9"1I2KZiGcsC`$g\(i@BbKZWYU"3td(<UsRO1Tc8_EW5KBiUmLo$j*iE[MO?scAd2e7Zpq@K`@@hX\R=nT%",s[.q$cl)V"61!:KuUl%!M(6#k5hq\r>.7)[$;b)2"lq'ENdh!`+KT#?"0OEK1UFXr`eBXu"1;$fP82`eSK:lb:]thWNXi#2f'm%\Y'<FP\519Z3Y$U9a[ahDZiUTq%.3q_6!1b!<a<aTIriEc1"/52G[lA+r'cU>n.S'V:\sU@kge(!lF$P*q(_VJ`SX)!S2>MH(g!<%:iP>S,5Vs/"AA)+>IqhQjdJZCB?c+>'VnO/Ee2/l58Bqi<tA'#%!?Z`B8L&W\.ch/*nSW/pR^"o!WhB/Z8RWl"Rc"PS<%1E_=[7c%9TROm*2\5t+P04rT^;opYau,#Z5q]Z77El4n/OF)Hbt;\rWQ_1Q7mhmkb]""Q(k7OKETNC@1calrYWj-68+hSURF`<"9mN/=+`cH%`mR[2rk:sbBg=(N73#TNQ/V::*>sL@H>'+Y.,e/QETCAYEL;Xndu5lm@r'M(#G'+e0f7S?/k$mN(4^O7k?siBVDT-GDZu`.&.fk@%!eJ@^fG85f%*/LV/F(14/MKj).!Cb:mM@4$:TRotXRBkNH]'6q=s@[D;MMg,Gr1C3e,cYnj%C7#BsshQYRo:q]66;j`1l5_as!^a%7n.NQZ.L.h3]Dak`TA=J^*=8=fV$t;:O$k9POk-nji91nRc;H*$u#7c"KRhAJ34@XeG'Xm!ZUd!!/f=hfq?PF79Ugc!JAH\9kY5c%Ldj4A;5Z.@FLZUB\/s>iAIGjdE3(A6.De?>LRSktQU'JbZ9dP;!7X^dDBf6[=-$"4V5p8roOs[H$mWne.4*8`Bu#SH,W3*4fCIR.%1(FcFo?b0?[\dcM-"q?D84PJgi=?]^=<[RlFP4OL6Fq;-JCL(POPMa#m#HE66bpM`7,22GbD8Jt>='s%H!kJsPME"^D9AFb$/^n`%BKct+7L"9u<!^ngA.u!t!8DV#YHn->AY+F#RqE@C&Y&[=9Tc1oWUH@Y?IEMkOQ/kN\B7>Ts&l"S'BF.pgj(6V?+pW(5jhQi\S`"Q%"cDMQ-;$5&NB'74lD9Q##0qb_+L1W@UKqAgAs)HpSWUq>q&odA7:"9I\X(Mj",4VOA#t%DUaZchN'`_1/Ojg@\#0!HW)*&5.CT*q%j9(+!#t3JTZN(hl=4Q[YkaEQO)K.9=Of&Ie@OP+rPJ+DTn.ig5arX7_Am'0X9QgW@lIr7#)pKNliZq;5*Kre[8gJ4[7.[IC628`d%:35W5DM:->0.pn[@g?Y/d[JGPG^.X?:)T01@rd')&:I992FP[u1[>=nB9"\q3CoQ?UIrCCfj6_eP^(^*+;kH:\."gnkl8KorA@TZ%56nM>0Ml1f:([W7KhnUaUbu0K6W$">PVpkfFL/QCHQt7'r"Q\#Q<=$@l4ISX0pN"+U<#,$:Ko3f_@'Fi)+nBUT$Vum9:7\B@>I/+%Bb8K5O3k]nFtPp!PnbPKajH;71r'VQ>[7InH6V2T6dqGn"o&Ed=Nk_<p%P]7@3-i6Et%Ot#SD2L[_uhmJphCnFf(G7jD6@'"kVdB%LDpqP:+6;A?<0W6\s>pEm_!*srk$JqCiN;gdgo@1Q,+H];q"(K:j&i[(h$qM/3JHQOho:TU?'c<aqlt-ad3X#)#^jY;oGFPN$<K+%MDK#VNJD]s[`OCFgn"uG76G>0M"aW7[?nLlCi7\u*joSsd.LXM0Moa`!!Dh^@Y":JSkF-^=T@''ZV*4\`(#TN4X<1/NU.#V8Uiid%hrEl&U:u<fG(T6$rOh'=#1QL-HDDOhQBP,YnGuIQ_>Wtf@Aub/jS5W1BOdZ?iWP%uYWPO=*FakeC'`f3T7SX/*e$_<$;03q_]"j:%Bam6Uqrj!UT/pkjOO-n*PMh!I/@?3'QIOS22ZP/G7J*elIXhG?1<C4\>[/9.d^SaW,E!OijLR0uM4S\-18Xb#-M7cNZ]q32kp@IC%Pj*-$)Te+-V8`s>jtQV1Sh-ai[u7!"]5d%341#Z$A_595d'KPW4^'YGM1*G;f\o"FS]@Mq'b3C\aq,q/THZhN`o6BM5W%UDOeFhT%b0O@ea!VKRATo)7`BA\*!K@T*;l!)&1oC__Ge=h!<KTnJmVNU>7m\YG!NWpU@1M!lY.^#!@B!>hA1Ha4o_?-)Bdbi%4e6oVlJXI]%(_Jc]bs303ieEG2814br_2Tt7=%CjKS)b"K#['W6ins9s#dktW9Pk#u<Ga*WD9$1I6&F<U9>-H2C1CIbbP+=L>s,49pVSEL6qY_R%,Li$q!OZcn'TLluf;@h>W;HA$_o(I>etSU?OdVQ^kVOY<D;$\GM55=&*4KB'W.Pj"flmWfSN@K*9,r"e0rm>8P5\PfpQs!59cfGV%?nRG`JWqMgcsk:%$1+BFT,eDuGhHsAJ/sW@"G`7V`&B"FFe0DjJJ9c\Oq![64[si&dWd\:/^liO1*Si1PItgk+AP%je0Op+1(eN,%Q2%AsPU-@774#brq*O(c%#19?(-dMh[RZ>?0[LC:jH?&EP6"*IV[U"JX9q+#QQ/93^auk>[TSV?!U;LTho<_blG0W\f7MDuV&T@I%b3<e`![2lYd=`a?e&YMt+m#3489^.$[KNH1U*71*JAo=^@8:@rMKXqK:'$.29Uag*,)>D4@[MPX*[\9b@mjlNg9AfC-\6j.,R,6>%/1:OLSiF[7^tE>j6XKTF(p&mF4KqP6'Jhsi;k+oqnXNKt3Lafj6iB]m1DC$t%Ms/?aAp1]hq5chL<EkP@(\42*`'O+I3(46;G@I(%h3X9s=L=-k]-(="I_$b`r31<6apeWr7KTpV[rc"ALV@W0RY-<Hq)a\2<#u<QSXJQW5oqZE#ZmA/85*LcaPWN!%OU]7&jTQ>PRWnL%(3NcI3nkIH$%IQ42@\'-k!%f7dpqQFOpr!A2Fb3?MFl;=GTmcPfo@3\;]s>W#m#aa$6ohl0&:WML;>ukP6,GX)AsI6F1?2^\IK2[%N<IgH&1<g(N_$A3`3F-IaNbPJ_?T'd.%seJ^^HWJ5Po>s,j+3](^ct$&fFjF6HFu\7afp=(LFO@G@2F!KU5)Y!/Tr(DDN*Z6?-BF%!tE2CnYtSDKBZqJ(i9AD"WdY8ILJ=4?$#6)"DoMd946?"('3G*S0+F3aVV0JjKm3.'.9Am6K<&TNgM$',g2@5;3LNE]Ke4D?#bZ*%#IDFYR!Z]SGm4NfV?FuKQoqr=)?Or"'f.!eXMf?X#]iQ<%o=?3#F"Go,0V4[EC=kf&P1B:n;qg.oK"T>g-oVJ&?g*SDFM>h$#*M2%ABoGdA8W8s96"9O-.$mO>g5*rT2t"#,@S)N9*]tQn,Q!L>9*7\_(EY0Ce$]T@I#t`*J2F1A<PHmE5Q4ja.p*MO<g8d]p4-]_*BYR%&IcM"/96@(=#]pU0u;Mp]#K^]%P3@tLHMl"fi4d]DCXeP1Wbd=iT%eI6BJ_;_IZ9nZ/b5fj2;0tGpgXR&dG91*N!_YI<]$G3p8m!%\]mIHWMt`0=os[8_K-B,LO&4=jqq:C-9L?+SYj?Ika<-#S_7;mGCp.->%.`Y@V>Jhr87fh\+qpD,h$d-?^Pn63hu+N4')"E!>0Q/%+&K(tGCuZ[4mF1V+C:F(D$uZ.Lb/sCV+'`)3OW8SRBnHsa<<kE/A!MR*]BRW0CfrZPAYN)hUO##pd*'*Vm5;uQ]p5:gQru-k"mm^%i3!02[/e7k6lUtr@,q`<".s2p/'!8a.m5T7r7ldW">H"$f#1_CbWnI:OD^Q2jDi8L5]A2sKEjO;Rd@CiYnK`sg>SJMgBe884a_ZG%9U!AQbg-)dYe6]E_3s*k.R!a$>T8%;`L&u"#lQ*;gqi7FOY/bU47Q&mP4%A%)BM(82KE7d/5P7J/A/fO*gmTBk#+Ei3c1@CG;R=m%"jthf)'C3&Ya_N".>37XQX8S^3=7\Lb`PlT\?!R:00d5sf,Q_Q.A"(e(k_#?`deqiBVbbmd;dp$q<rW/ocPGD!b34Fk6F1cP-,H'%(93&.pE7<af8qHh(JFuRD!_4pJ2SuS]cu<EHD!;(=$tn2oeG-f'4D.Qf5a$#8lh_kEF;YkA@uGIJX8oP]o&G$F'HIVK4']ab#9:K%K!0.m@n[WP7>cfMEH!c<QKnVnJV>]\9Z/*l`J:`.K2T[`b6PdBM@<bjY(j_X1Bq_a&.g<aCpf'rJ42njEJm!-%7GH]'0WW)S[a[q%W"j,OjPXbY/:&u++,!1g`nj&@nq5&H*(2*/YUg"i9(P;)84[4*!m*#WrA&aF"Zb2,#3MU0*F4mR2N"F638p9@J-7ceS$8:U8@F[D%Q`20`c#7@e`4Z-l5D'6NI@))80fLVJ3:o`aEi4h,1[iI/R*.0!b_`7qe#6uN7k@'X1O1/a\JBq!B;j6\>k-9f)fTuam.*&m7Z:.[%^F$>e#\An[:(Ia7b.2Pk&hb_Pi/8//*"Be"/3u\]iN\a_&b-huiP?#&8Fd4gO%Q.@7pVofEgcQY@jO*$76D-Bh7sh'dC7!r,f)[9%'-SJ]a+IY\`X,2>s)ZDcOt$QHT+>7i@^*a^6^/kJY%TrTR8FT@<dB4^THrA`@^'@%AP.8,%BU%9&j7*(FE`S)GTD\/3DiB]Yj4\+%M)/H@(i`02CEI5k0&:!VGR_uT:_L7)D(@RXKjFRBF)E9b.VKI8LdBG8CmN-Yb[u]Z_/,FY-dUq*HI?VqW#*\?&G:Y.*26anRfhqI%ZT4\M1n+R[b-O)NTer6!$)P26TM'9.&K?`L;-?@pKRVg6`+IrrqiH9KI7TA_Q-6`a%8#\W8OFE+oLEB8-mVAO)Is=u3hh3daJM:g%3S9p<LcIS@"A>+BGY+;`=PfCg#$Ca&D\1hLCTr'$0Pcbeas_$br:%NVC[eVQedrEW;3FVo)W'-/QH^'2a_<.#MId0$OmMEf#-N]r%k_pc70igY4@_`V>[c5^diYqD>G'4B4>;Sje&f\mPDr'SHe`/:\3NIk+a(rdU=4oD]SH^_$[P#@]Xg?F%V6gQ$68:D1$f`AA]N(On%MOk2&EEW&U9Broj4UNHG22>dp;1<$aKa4=!lX`U(365@;`sDE^:![<n8C94e1!5*=hLe`0=&;d/djT%!X41t%`dhioBA\jX9Sum2%2aO*TQ(I5sG^32E7aJ66Gf`o-)N_-YX>UN3+S)-u;GpEE`;s6K9s7bGRo7Ii9/>lC<`BacBI;R6jP*i`30]"PK0_X4p;Ck'D)!%.%*#X[4\RTE#S>\kTY5dE:B;[Fd_?"O^H9FL@bS2nS1F?8cPfAK,O;TbnAc=a*ea8\ElMZK5]@Qp2]+1K&4MD]1ZG)RJTCf`+mCV^o%Ts.P#^H<N\qDBh8P[/upDr@70/K/M?m'.]%5K-%Lm&0Gd)a2&[P`QPm&ut?OoWCa%-6u*KoY_<_Ff7mZZ-tj^2`]\S^jQVd+Em*3%T[c_ZpIm9G4mGB5,BGW2?HX/$RJcu#N4K^CBR$ADO=JJ(NH'(F%2?jCic,j&ba[Q.*!PC$62Fk^Vt"k4Er227`K2G4/H(U3pE#qW%,_k!IVk35*FD4:VArVI_3:%&4Mk4ZNRtSfll0J[r,)tfVjMtC_1tc_<D46@)m>^RS%Y_7KAe`\/,iQ92YXS\sL;6b8R!a`%n^;0V%KVY_P[">d#huG+2l=h4p4VE]/1U<jt6VNne#=F9d.#Mbq%cINqOOO),r+N@ME$[CoQ9<'BiUr#c@cV\p'^7Y;:"dY@R_c9hU__)u%nt]M/;3p!E7F,Z[3!n9:\Js$OBNYj'P9(a`DR/f-AcE,1>Ug[h8X(Mf9Ft0<6U:L@Z&2CNf!K5r?6=:C7kb&A0F?=].%%6Er#g(M%/2?rtlNM_YhY_'<qjGF*7d$Y:-+L;Y[<Cr?g!(R])pReKo!9lq=KJo6%sQj`oDM%IPs"GU>5>8&AY8kQ_`qo*qd@gJll)N&PrEs`%XQkL9=T`YB'QFk@bM.jM\F\-dKTHi]au<"=+\,b3lUgjXMLeifThU\B',8@AYR*TGX]g4Y..'R8]YfX<Ve6u$F>qaNW^51KO^;T0%/:q?$2aqjn"@]eLfS6AG+*qe)g[4nfasi88f=I$YhJt-r"cmCP[;HPK/k8b-_Pag)B"-I7_HPK8CaLAjrTfl:+=N\+"]?$dF^Arh%c#!'Hh<]-WiR.j_r(=BjdVZGBL#m?qS`aTC^QctLknB3u;jKU%!tA-TO<XH)hV@F05t'^^VFLP&F<++kl?G/knq^94_JI;FJV:Lh%Aq+*o7_$A*-iHim[&g*84^,>o.r(B',UG@J&M(kN^Tu<3BhR_Li<sEU=H7L1RD/>eCGu0pRf@4T%b;4i/I\mO8(Y'95OB8HENgG1%C9ns:)#WQ\s*b\u.A#`UB`[l'hh8O?/b&c-(0H'1"3.4R1tNbu$B/^Ql3SjN6$&3+5g.Gcq3N'BiHt39"q:R.m<VeML1:iNVFaH7%)/PKQ1l8V-Vt\sGRW\gKO.n3=H1YqFkR_Eq(8;Af9r?^YYbIs<QPjN_CXTD`)X;DoH>-f>@>ZkO[FQ]QJrqm&bbq7ncBMYL7pDIO%f;:Q8iq,\'S#hMt]':,p^WjjW(+04XT6)prEuM0uj0bL/`i>?Z&Kq_QM49jgTK50f!+QEQCbYflFG&fEMI,M2]J:lr!^rn_+[QXK%?clqDI0()EV#OMsfurINg7:I_jH&YRB(8NnH!>W0otN(io*;\$Ap-%q5C%L"DDc^%^rqF_E.Q1N*Ooh>F3&58ND,q"[HsAV2@n?T%s%*<d7mZa$p@5*4C'#\Q,E?Xs3g1tM?]O)ZYMUX48a$W5gWN!YRA7@CQc7rG/\;Pn0&b^E4&(%&%mG`UP8D<n@1;i0$8S;qjLXm#%UTK0t_h2tF0-2O5(U7]Sa:(?0MjB4Zg^Ur1.poZ9(No]e\WKu.0lVVVn4`p1Flj[lS"/ogFcs?]#@A3RI'mo<Lfq76(g5k>h<ri4%%o!o&P<Wj]qYcQgrjl3uT_KP?=X[gFD]n>?K&?bqi1mN%'ujM@m/][$"ics+\jdd4r:P0\Bd&rFN.D",";lc][C+M`^H=fk9=93X%h=(8[id&j?4Rr6*rTZ\Hd8W;WP?n+,;l^@gf0IE!+)YE]YW*37HldC2g:n)S.H$ObeaFS`NGasI07]GG"j2Y!pnNn.4aFX6]%t!d%h>[4>g89s)K'i<LM^#eM;m$T#O6pRjH,8$\9DZ[%?Vg%gn6Yim&+sP'DQj'2NjA(\hKo12$'osT8+2oXGPD%mj3((*mIB)kWBVIC%rVJF"@Kleo/nOVX:m0hMF49CJ4&=DhD?$j;!.ln!cN`;&HTOecU5"Z^5>oUk^V)/#m:jJLnlM9_r&'AAr3`iuV"<$:2[eh[9e5pd%?%[%pr:_dgankj(XkW_#?=<e&lEiY?AdZD^3q^O*,7S4/ahLn0/D`Lr)phDE7GiVU:7D+`dYZr]P=tq*6be3o4k+@Qs5$a,1=>D@%4]lHKePuSC,fS@78DQ9WqG4?hrNY4[U$i2&8sj(;qpNOJ"gmB`W%!3X=e;)\=p'LmdWYC![UZJVHk'lc>Ug^ko=&mc4aY[qp6sf%%Rb?0P5Pj&Rj.ThlH"]A5R7aE_L6AjZd/cW)nsli5g353X]4Uc8oDJ1'k"8#qQk!1oT50F@^e#L7<9l\:g=1K;oHU2IXTp`r>qRKC%cOW#CZ5KIpBluk"[s#)^0E"Z>\CTt)]+=qYWV0o<fm%aearWKgS^n0i2[]D\\qo+GrFW[pV0)!8K=+J_Ocbheqq))nT_$UXhK:oM%-o".4TG=k`1CLiien[_^>Nk]`]7+q<ft/%@+jNo`q=G+p$b^QTdXR#JPM_LkjCb*);^gCIG^='qTqR2XH9^0Qf%Rh#)Xq\D0Bh(V%"%mX?l;G/r[sul+FW4I#Nt**?gVBW:\2%1hqTnt`B[OG0P>@mGA\21\F)9&EN%M#%%2`8JC;A3%U&h\ZMmViQi2J=HU:!4Sofg$-%;esq;FTm!2Y5i4C*nnkT+(f<"P!-,"f1R`$D`p3M]5\#N#IO@<QsduScWk@0rb-JId7r=6A/dFTE-cq[WM*;5<h"Rq>EMMW\@$Z_%lb^jIC@oYE2pK?CX&\Bab.ZqE8S(\(DI?A*P(dMKo-Z%-b_N^Va2mEF3?Oj/FrYWd[h#TQElh,O&,#g5aZ%k*HDfM22?j=p2Lj*<%LE95:B*ZhpS2'Vd16_aYF"YC@6uJqqFh<:S@\@!).E?_,e%]gE-0_8CH'\^_PcK#^^eju[^\,NcPe3,P!cKGefm0`EL(ri/LD4F7%,d&k7m>!_RbC$:G]\\qjPl^g=7^n_:'ciTs`fO*-0C??D"e>[HA_7^b7HSArCgfXh+56Zmj'R<4Mll#taaGHEW3tB-N=Qf^JPt!b%@9Cir-b8TAk"W;:JH`BBrOR7El1!p&;YCVG\O+_81,7fl"NijCl[8W+D:KoMSQ;d_Amh8DW0$cMX^$Kf,XR[?P9GUrf3%j!3RYS3%gq^Y2g8Q%agdmEp%Z,Et`>$YEh9a6^Q!q'V[E^^1gkt2=^US.u<a7A)90eP,p@&2O1tQL!MNU!]1^V=u4%s\Q;*(;8>du;n@9>%Y%>F^g^fDhPVan3V46XjL9Gs+Kupd-aH&l<^gDgTa&`U4ti#3Qeg+pqk.R3.t=i/-=.?+ZE86=<)70lEA6G\BBWp*Z0,okkiI:UPkP%!fPJ^dC!f3jM;XrAUM2AQ%Vt=$,5PQNKhe2/1HghRoZZjQr(6GaE>)(LHgI[=R[(Adecf6?c&+1[+'/ppCP3<i#>S[>qV7:=d_JY%FLl.b?G4p)Ea1uTrK5mU?N%E7%s6*a1A,fDM;b.%+)GV.dDbhj7]BC7*_lr@/tq[YG>F:;Plt!bLLCmrpm)Vli]NSrC#/lFmm$H`%[)5RJPr-FRYS*Us&scbeL-sjQG-9]h,g9Xoj;I%I6i/c-jWhaU;Z+qH9$uS/WHEOoiu%CgjJB3hV't,c\hpL)GDKc?Q^1\r-areK%Xo$`Y[lQrddHVEWV,jKB/[nn@7rR/\>bdQ8:2--ZmVSkm,YPCE&'RMo3)dcs4eR_;BpCg/K4P-:[DX9VjrNsF*sle=6>3+2imUQ_%8Lt)S?TT-,91NeUhDM_!KQ=d'>,0bf-;Y!V2>_&h"D3?kZ_HSP;!O&06=P2u(,)(ElW2uCC3K`'6h[3J4;PH^Uiu5Ffra'UVk35o%-"W"u(b%5\aKb(K)(9gP*%iUY%[U"k;dnUqJJ3kUTq8mo3HY]EA<T1;*2KE"&72Kp@,AaGruc^rUQ@2GS%M-O^X8D?8>?Y>DOr]1%eFM!Y>%5stl)7>"%OH>/R$um=9PT1.ihKDA^,6PF=kb/X+6)oi>LQ!V`Pgh@q_#]3`+$F#LM'F#gBe33(@-R^lh6bfP38?;'!:4u%^T![f+$)?mYR!lX?1oL54CHLC2A`T9#5]E/,DRL"Yr3N*M<*gF13nPr&>\F=8TAt+ZV+$BCCogSL0],42@mQ@BT:Ukn&_1@rm%Pd%_#q%%R@a$'H2@G^m<b\iIPS<co\.T5Ze4Y_eCrZZo,foFn,"39[T;/Z[l9fQ\Q>58]Tb5DV;fePDu0$jgU:aP9-::-q<I"_k4q_X%bHL7Of%Z8ODp6JTI\ClLDa3[6*P\Y?DRIXsn^LZdGO4,2/3KR(S6<Q*Yqr^accse;?8oUBX;[@fRDk^<oE>8^3OA"sXDGOrSnGId%pW\]\V74dtj:>%fagL.1qsF99:"#A5^1[J!hbKaJMEq2f?DW'b/Gb^:1@maYSTNmGBNb(Fn'6QS]pG"Dm?uR,cfjb;[,/7el-8!8%r41X8G:uV%j4.JFqkj+uqsDYUTpE/_(.h_%V,.Q%G$Fu]?//L_Q'Hg1/*t2Tl52bV1NA]:FKb6cT:hKh[B.f/_U@5mF/u=@Zo<3j%']LUug%ad>cQe]a/YlQcl!iaKrGZ+DC%p`dqVq)DgR7N19!sPbq)5*JBC;&Zk11oMXQZ^-q,OJc(-X3p3a6l9T0I_U5?:gr4kHZ&%.V84*<4hXnC@0%RpoOA#DLB5lQNkOC4o<?k\,-R&Rai8me+HcrqQ/DGKn[UH>,Ue3Mc:%il)#H'oNV(Eq9<nQV<cb,=lV+V<195A%WkDRt4c$5ic/5*DW%39XZdeBEYOp>0*k>?K$fg,q^@i=#0(kT(mJE`66??@:WO;A8jmANbWM`RN4K:8cm\fZ^YGtR&m!UG'<9h]P%gRc(r;sEC$E,qdrHE->tm.RK(YH,qF1M*E;+2.8*o'X.sS&sL89$:Q`/&5XMJS1<q$h%.'JX6Tkh78!?IkEs$:oX=3XgGZdn;UFo%\[E@>BkH50F1KU_[@t<`/nie5O06(Bh:WUJH<L!,PodB&4$f\s0&^R>E^-0t@k.G_U7G85^8NR<1U!gDb3"Y_;AbbLh1sh=^7O[Q%Vr-Ma/SXD%Q*7?t\i+cd\6aVO.a?1-qg*_aXqt=,q-rsl3NgeYmF0d$5uhW2*i^fqI!Y7(Mb4&#?9PuZXn9[#BseLNkuUCP<r9Tt%.RbD:o_%//iGj;F?r^@oe^_W]Co*]bk2Mr3d`agS]<?W9=%d90=3gHkMuLb&<MeO>_:fm0oYt-n9UZ]G\SRF$1\5p0[_EiK9'b:L%Z`%</WrnV.^0CM\<PE\gQ+lQR.U?3G>ctA)+8t;o;NT"&mJQ@<=h9h:KhHhQ/0Kt\o"gZ0XE8;u9g)U*eMc;)6)DPLPe?,KNuY,5%a(;Ng)A.Z2N>3e*bZF,L]s&o$Y.X?9^0mf5_+L9oflrcE4&G0sR@mHVKr@p>iUEH4F`[Lk/jeJ<STj0c>3Y0P[2LAF%.'&P%Tu^r%KfU^+:Q>A&N3V6R@G8]Yo9\&bB&i,YrR>#&8[Dhaj.:FF)>5/(VdX:R>om_A[tePkHpAMCr(a<,2\#>":r%S;e>gQYQKfpXjNh%6%[B\o5]j9.]B0LT\:WqI#IJ5_hl*Y\4I-`YH%6jftWh#[+c,;ciBrCFo(ZV+@g=a]r>jsSU^<C9HQPl,Q+-]_dgA0FG48Lcpc)`Q?%[.Co;:"<0/YqK,Edjonumd1,DP>a*R4[%4WcahrmT)R*N?$ou@'H;;re^_D4\6Y)@l>'I6Dp5_hn$Qrog(0cEGjN#BkEbl/R($jh%])UU=O*Q%-V\`ZH<FRD#F/&,OSGa#jG.jXm4;n_b:E)t'jc@+,lDO>Uqt/.froZ7u)82f5Kr#:bjJfDgZ+(Hr\i#]+H+uY;7O=\S%Dp>r&55Y\X!l^%4bK$ml[b*QF.<Kk@<:!KZbZ[/!WDil3CDKmH-SmA6p%e@Xr^*l1]'3Oe5$'@49:sCGEuBXGQ!tn<0,=rk]bT4L%q``oSp6`3NWTH3^JXD$Wb+YBt-'3NMIBU>Wjkj@Vi6:rt_X[>:0`(Zfq1j/Q9/)99b<>=SqGBfAG%ZegG=QFj)*p>SP4EXip-%+i%SOfS:/u2\:nq'iAXE:o!aN%=Rm$sG86+$kXV^C_>EaPrlmg57sYPD(mNRtAsJkCmn0.JhNV8Pu8"@heY%Bjlc'dE/6U0O[?ng^RP%lp3cN>:Iu!-%4!roG+e6YNe`^b:g,c!dUDs8>V`"RD>Koa&\)OIj;,EApgH3_8hIq4r3Q:d4&NSola00\;mW^@q87hoD+0Poi9QC%nf-W]omtLlQ[=pj*7ancWA%LK8$j8$(.Qg\H\Fd"\+0Tdp;3/jn;u.[$UfcF_M-GsR.9Y<eMDVRr:hHTlTf;4lE`UB^9=mU_6I[k%8*&a+f,\[61%:5-*[:!(4[2_ki.-9>Q!dY/TkI.,D8-E,'(J+rju<5*ZQfI_SnC9&(Que^HtIcc6K'RD^&5"A/Tk,O)76=44SuCp%hk@F9[MTh$5nAJNM]i/EPV;+dS#(E.!=ZN<m3XcK'VXhc9VYY3X7QXlVlk%FIRK@6,a1>H+&JR%OP&++rZ05lmiV@F*#ZMQ`CEB/%o]1GN#g21OrNaWd:Mh"Ms#OVF:%!cS5(YNfHaAle5;OHl,p6E_K\:WX.(aD)5#6s?Zs.tP18$_SrUD<il5ML"1+A$U9gGfCYik:u%XqMC2;"NsnVujeZ,DmPlq4Sb^&dlb608Z9sf7Yg-[(BT1-b"i40B<A5*H@T!BNP1Z4qf<Pe[(DW2MtWD:joN.@Fs)m,$blB&gFa7%4Nb@7]*Sfo6[+T_LA0sjm8_N"0Y:\W[:\mte"gLH*39]n<gmbuhqi]#dFCV%<6D,s5XH6V0Ca_+NaJWjB)aF.3(IpC[85;B]RA7u%!*OQgf:N:[h2Urgg+O,c]*^T]G%4%*m..e?J?HAr.\tL%N"i?nN,LA'4ji)QiPZh>l-p1@;69Yg*epM!#h`s$OYo^Jf1Kkk[+f'X%$ep.Km,m7sPnoZB,hC:m+aN^kUfV+$9eC/0MB;!375&O]U)INR5#Gr$`cjKo<MR`8dcei^(_gn)la9e%4&aLt*rVLWHUBm-'!^<L%/.Q7%`jSb>m!hhj8[J\O"S3qR;00!XAMA5Jj2Z7jT]kF:7)`Ufp%TsM3_$@g,8_SieuW/LV.BjVmo>A68+V+%cB>ll$s@g@)%RTR%Fh@/7@VQSblZEk=lumgIo@,1C12Ui<bcf"a0`@!'J`04'3&>Ie0!8[&cm[W<h+k%#R$f$M-.E=p%dpRfUbln^RKB+HKo=")WQ`L*%g]Q5&jKS_QGq#%?k,UFfePq8Yd"_@)#259tlr31H5b%)p0UXKV'QJO=-58cU;;;!#Pk8!LCdWji#jdm4BO[cSLbp`:9hCrM;9NqW%Vg<pZDtJ!L`iaM8S"+:fL4bH[)f)6@JNFfSo4&T45cpR?+c0/0j4#csp"Dd')OZEVLmoMOG)*%;8PPAM,\U/,DCP]q2^/7]m/8aB%i5]_=!K\2Y8M\$Q<u+8ffZGP'o`[<`Loq<N>,KJ5\TW&!eCU#p5:VfpOdN2sRHd!/KOf-gYf`^c\?Z#*kJY:_Uk6=>35lPe'g'5H%CZQ\D_G`QU35qLRO=;5dUh'`\M"**cYL[?!8+Ir/ZjYI-V[j)WhC(k4VG>qM_`]9_?*_g7I3EIZ@O;''#BTM7FFTZ@SE/N\?hlpo%Lg?G,i/#jR5!U^_SJ3*ebc=3+igkmC4hBN`;uc?=nM%7:+-SDP0OJ2:#86(%q2jgD;2G@rdu]uY.asmQ8,\6!D/PriVf4!&X4"h3%H/8oZe)Semo1YcX[0C@`FWoOuC;O_GOI*f9q=;07?3nU;g:JZZ26eMmJlE'q&mbFppcL@)_!1/,B>Q1VGTE6^;Yg/%"i0!1C,\\L%9IdnI(-3aMP&sj@mNZkk93hsK;X(Ip;"NI/YSBek\HpR$'^kDJ-LA^.C3N!UnKn%E[u[+M?gWLO?@coTJ#`oVAq&a]LQb2'-'K!f%'h<+TE>"9B7Xo,td[<J,XJiAmrV[>tXH)/+k["n<ZSn9@5A&^rW,elEMf_#q91sp6k/D&=_nbrMW6e*&Nrrq1Q^^Z@]*hi/Yj%q>%itK*J*1+Z\,LoPRUjaX^1b`2$--F=75qN(B:SGk+OD&9X7#N"N1_T2gP?+CepV8#Z8L9h0.fn<;,[0ZaSAO(%NVG4Rd/]4:7R)hV%d1D3]5skHXUZ0ClD,'rb/&@F12='l.SX"DhMq#=gm'XhV>=mN_P-tkl8hG`#HEjH$(=2Q%D]GHb#%I?3C_7`T.YWt[N=XXb0$]Y>%Easg)C4@=eNNC[N[gQ[f@eX3XMODZN'Xi*qfQ>,1$c8@P'FJ[K-W]U`Q8iA,m-P[NB0:f-j<6fOBg[rEV]eJT-=P'lZ,G1s2S6X8%>mkGS<QV*EH*'SB%6p\K5"`-Ud)MN72iDW1+Ie[Gs7N:)/QDLQP8R)e*TD-3[u/^JpSY6Q!LDr0e[Tk$&4&_RBN+/\*jPI[?4Cni%ee7r'UT]F<MlVuj&7P*DJ/ef`@PrgnI-IO9SI34fT_I`B6u6#=5oLqY0HoJ"hnW4,8GfC]WY&D#g^[!V1pd(jRnD-=nOl!`SEUlW%0TtU7,=JNM#j.%5f/;Xq&_3;L;(4M7?ue!:ARo4)$5]%EObIKlEaj]5.2$]EELF0fV28G=%(5DM-Jgg&5J>RJ;TpS,UN*#F&Qu-1%7Bq%Mc4jm3VT$K-bLtK]r5m*pJUrq')LO((M8r<`RpK"^XiqB^9a^faUf$ZBiRG-4_0W!?/(_sZbCY]S4cJLlI_0`/]-aGZ<;]hd%Y:?Fh7qG[1?#g-T<9kJ^LJH+s)U+i^:2cLNLFtT>NpKeB+bq[1K.\KTE9&"MQ,F(lOY&P$%UDc)/;#R:QBUFW-"kR.fn,FLd)B(D%)0E.:Jg9F)-"kSY7t:FV]&X8\OiKCh%UF)Z*VGLfSjSj75pu%E0+Kib^Q_^6/kIr?b6(Y\^`U8hR2kRV\k0b!&8-iP[Z`1(0^N8+%$TXLEj>]s7QVprc*DWMW:[c]Jb]N%_FtouUPg[u/ZHs-%R=u&%IWC?-%5/EuPFA+CW,R/VB$Sp)9?<S93_ZK-Z&KZj;kS$V@-1s@%1M8,`A",=1F-T"gYcLE]1,fcBP`B1Uas2Ul`+7Jc^E1B5g`qN)P_mjKKr6k`g\@e=CsckCpoC''?g!05@I\eh&daE:DWua=L*XCM%q2<^KH84))onH,X`?aQYQ;[p=%,Gk&Z7&%*!m;dQ+X/-=B/:ge1fWWK+cGD;g_cT<&eT+!X8"fR9YN5fP/e\fMJ6r$H8_OW`(H/&%)P2>Aj9.s-(E:3!7k^Ym]&P>0Z*<7"FktTPRq*HE;bj#]UtDqeCaZ<#TffQQ=^YQcMKsSN0?G`m.!^3XFK]9/BbbA\-jG.Z>r+AF%-A<oi8khs9JNl7tUhId27Lb9,+!lt$hL1u=r.7&Fo<jF;#unG@.`Juk*a/E$Gm'DR)G!+O,i<2jMWrTb=>\`],)VeP;(V)/V+3q.%6CmOfL?[tH[1VPMN.S`!4DC-Xp7^/[ES4,::^e!sA8^]^1*>t.-8tRNVUXKC3kMrj*0Wh!q)TBZAiP[-?9!fb@AMp3Jh-Drr7Rbg%'\O@$XY3#?M+qt/3aILR,9"lm#!%F9`\(oP6lo`kXAQV2;(XP6=)KXV\e.*Rpt!(CO'lS>E\]2;,IoDG8<8sUGpIGg4sMPJHRFM2%p1&;-1ENOfHFQ/)N_V(u:4u1po;Uq1RX6F5Ett#\([l'/B[VE$7^Deeo-J8%-m"f;%(hWa1'pYnT(e[=Vm&\R>sIV:_3Ca(;:+Pi%1/AuiG[uOtWL9s@(LKo'OeKMZ%oWksHhoFM#U8K$[5bbX+gNKpoO2d$%$#VO,9uT7N0K&TA.q)bO\t90J!bs\#.*pr,+9@r4Zq77%WKSMd-XfFR/'I`SAbgU)3=e!7dEJ@&V_%:2IW!g#qT&D?OXb&S%<M-bNDCS>b`Cc5fc0P<YRi0LkE`!-4uNt`&7&Ykjjf?:DV3m]%(s/hJ64W(h'Q>gFo\a&u'U$!d^L\\$0&?mqFS6&k)tUn?N*M2,U]P?<1Se7=/l&9a?Jj+W\BH?UF^sUP.J@'KfsLA0`f<k9.3C/c%6?S1]E0Fq1VTFTdSLlfu5+En=Ul;ftkJKkG=/TQ*C+,rf1`oK$P"&3s8=^9X;.da8a(<\H35N]\#66R>7a?c.ZKj%(MbUjai:<c3%Z^`\73[PK$%8!IW&<NCcXZk,6Oi?eQN0*RPP%r#e3EPGrFX6$e4K4@K8D`;OGf&V7\@kcjnY9Z9SW.n1WRA(#-D(=/,+Ti3$&R8[%@lZRZb?p1L"ABVZ!Q./LTbQ$;AnKST<".pP:DK>2n2&V=M*"`bRU\4D]r2oL7:=$sg,Pr<:?+0=JnMB'aK_s@36Bho"A^LO3r,ir%Jg\6H+04$m$$/:L`6>I7VNRYmTRROq(<[LeCJlMue<kl1X@ut<9oaXjAk)'`l"-Z>RSH?;f:Q!`8C_A)VNR&KGc$RbMHHa<Oc"C\%OcbOsC[$k1<bJUi#;!*_<P,!C,F5(Qn@C[mgkRR<$0+c<:H&a3VS\$gZ.Nl`#ufg"hGML(q\?)LM<DZM/JTng:?'3kE3`b0(e?Ea%<&gkCOcHC_/JTn%k/<GQ;W/n?OBA]kWo6Z*_*/gs7!Q9e?UbP?Sh.)50mXJl_!YFLW%(4/1O8jfEZ]A[G`2_BOnDY?CT2ECbNL+e%@r<pG'Xkge*5uVq8Z20S0[D*tGqk4EltKYMW5r-!UZL%2`Bhdp09EM''_TR,L+aU_Eq.0=P8V`6W\\GIg@`\\hA^lT[<2=\B(c)e%">:3KSQS/4Eq$O_/6A?EgUjoA9"K7hflH_fo-cPcn$Rh4h%gZeh2_&p9OjZ:`pVjQ/\LAi(SHMHh%jp8*C%R)SLo7a\h<Dc/\LLA%P2-Jj@8*NC>UV0RRd>3_QsmHeA#oIKmR#du?A_@M\QB.s\%S@.(='1BUk!l@Ik4S<8ToI03]i.se@o:=s(V9h0#PuG]M(q@]@14>%eLKI"i\Tr`+7nYSnJQMXKM&_]p"2mK]t4erO\4^D]:#jDc<2-<=-IsAq`6L03*k-,p#J%qqVK%],Io'MG<"2J;f;<uh+Td@18\UV%jn_j",0)kX.&)+K_Rlk,Ol\Fq/@FF[[h0)Ckk.k29Kqf=V;BTSo4X_*h+eQc8W%krhBsDqS>JmMVS)>=;T3+kaU)FZVKJ)mb.A@7%;r3V*jAHKD_X(qj<seVq%D?a,'%])$-#tc36E"G,1;tP[WV[Jq&6Wu_HmCC1TmtJZnCT'bmq>UoL'CSRBG-Gn_sWRY:T(5c<Ri@7%Z_TY;Fc:,t<=>X^e1"tX`DCBnflS]\2#],QEO4n/>oPb'A)_;c<A%SDIc]58F<b?\Nh&ll%?p9>:ZAc_B@Ei=%uHLJPYF(n$@42T%FE&i%FL15[Gc`@>VGlU)OhOLHRk>kmB8YAaKC%(>:<X@n/"9;AIY`%[VNsrS'!9;^d>>0n6;:q"FHUii9%e<d>WS=u1!OMqebFh]%^!k'";ruHHh>0'Z2Vm"I]H_":V9#j168kAaQYpi$%CnQ51lA-TVGgE0g=^SJD%nJqVjU8W6BIV-FuGn+D?o%GBk>bmEp433U52/k%,b%P_+=pruO\MarV2O4+3-dEQ.[MbEpSX0KVb4^\3JAfG*2=C%OV85B*?%/30%)"_!03A-)E%TIHNVAOM^>3W&WX@oR7J-<9kA.$%O]&gD*HkLqK`(ALS[$r7PhO)EpXQ5q-qeo*_XRHfP&f-LIBhU:[oTB'dsZ?6*cduMI+O,16Rt#C+l4un<HW#F7&)i,0;2*5VteB8%4QS,F:.&rl<AnPf_Eald0goXKF:n,0s-O>`+eJQHZ%rVEO4(PS@^!<].2lsfC[Mo407t(sN>.Ejl5I:sDA(hqqJ5M4f"dB*mNunm%cti%rN_`Dmc!;YrL>er[gu5A/6SH#DH'iIH20Vnm:)/IBnhkV9S-oSf_VCO&+K[;D;p2LlhMYn[`T;uS88)B13/(V/]i;6R_ic'R%aOA7?X`;S66o8P2-dk^/K)`JB\5nV[R,M1^kq9h<lF:?L?L!0&A/$U*)Tm:`h=q@`85j9SY*E(ZNLJL27=E'`7mdlZIp15r,l<)>%3-EGmS9XU5i-fVY]?nPri#+DM<gEUdGUC/ZQ!tW$J)f=J3;Q(-$25]?-aAt?(?fO9*([10d2]HYPWnL#7oN'I?TDB/6Y+BF_CYDX%M:fn_PBJERb%B^,pqG?n%/'GSQ7g$D:1T1*IX46C\I+^c28'q;c_bu?iRsS'"@VDOH"Z,pWl_YaW^MS=mheARUF.f*h>oq39I$0N%-$jn2\9JXhedBBrAqj)KQll_/pD?!)TR.,C6\%n":W.-[NP4@i`5JeqF^BqK8NRC%\D](6hJ.5Sh1SEK]A[Yubf;P!gnhS2DrQ-g%IT,+AdkL<H]+Ju()tSeG`@Wm>475R)-A?u-lj7^Mh;E^b;[KfR5q9])N%`4:\Jp]p*iM*:c5f>aWH)D\eK"#?#@uE(V@-54WQ`$m%3V.7?`*2-cMrL-eZ1_,7[#VmKEB'Q^LK)5cb>3uX_Msl"KI9PbK52gWDc_VC'M7*!=n2W[EZ/8.'D!_E87Q*H@A>/(&W4P>K\aSY%mm](e$,u=2KF=X_`klm^VOEc!0&aAY4c(W=Y.X2"3eo=JM.qAm8(QA'Fapb<=(kK@&sIFoGfh#XRt2S]!_ZK$1[/sc$Q"eh3%c(h%+._uZ\&mXr_OZp#XXDA5"_<H[;h]=\@6(JL^!X$1N2P=<m`E;-]ZrsO#0+`(]hD]%,$E6k)O6I1e;FG'^^'IT_qo;^lXOF$m<-$1%rtS2TqqtgjDVloBGX&N4c[EU9^*:\dbF)B1Q"2,SN\lgq(.q<ep@S0`4?paXYg"*PI`sZnZ`c1VZ"\I=Qg_IBR5`"7gq>T5ibt?F%goUhA'$:jaS<WpF6]\?KX5"bd`)`=pJ$"41Y/fZ'23RB9/"B.qL/ZQIF8&BX*tDppLqjro?Tj7[7e5N(ifik^]^OiuS:f4mpf^qj%T/66,prU%'9>^RlPRlBP6@*YtpMYEOqg!"S$dD-74t[-p(L(Tc*ic=p`:gUn456-ZX`W_(\$a]3Qo9A!4o('H6Y:eHppopZU?'bQ%b>Wb$3G7dC<VbW.;NC,kKM'tmN:5CSM0V0i[j"ElpW+mL%4n'8QYo22anma-;A\XH%Vr,&h4QDI<S6AW\!S0f<+9*+8e9$aXNpjB%1g4QmI$6hO%A0CTDRNOkq)"]82m\`HKN?('F!DIXQdTQ@<O$WQ/%H=)V(K_+=/0B(%Ctq8OIoLNLp%>ON=`"QfK\Kr0(I>A8L\O%%7;5&O@^A&O$k5^&gSA<HbB2miS+sd"O^U0c*?,bq97u6hW]ZH*3W@<gne@+Z]j-QRrA8s];YfX(Z7S538S\<mVm=Ke\Me=r9dn[h%mFN8u5DE<k@r5A(UM_anE)P";jo@j]ll:g%9h1Q_O)0dL_j"ZkZr6b@SjQ]=c?F\UDs,.83R!JP7`*Y)e$G0Tbh;&(AQ%uCUJGja%_la\d5m+A)%`;*$ZA\KW*kc3N0]?eYU(52J6bTr2]hNdpfkB!C%Fs4SNGRiW!Jd1d0N*q]bp_`p`8;7f)em`Vg3BPf@<Z?^+s:*P%'2ekKnp\5N:800p[YN^cP<+u8X%Lit=;E,()j];+UEV4/!j\N/kbMr0NXI$McLYa3R3ItF4gJKXQQo@Dk^>Le:b3b5D'3+D<]c8d%!=\?tNF`]uaT3+=OGoG.Qo51gLc.FB$SW\sEXq"UroETfe.\?7<Yf)A%1,%FK=@5ed:ACZogGtH=BU1&6BIQ:307\b99)S]e0C-+%lmtCjLQlL?nMYEV/3no$Ei/+:l=5spK3rRH?Z77EYIp)QaU:&@9DN&1E)XH709]RQ%*9eh<)3^B&q@lsI,XscIat9B.F(h\_PMWI%@c4/+.3H+8ZIGN);SI+6R`a;VAb(3%SmeV7$2=9B>Ic3.L.ZTlhsa=BC#&#E1V'B,2O+&E^Cd5Xa1U"Wq,Y88cA#6Pl^-BM[1@HQ%Hi92H1mPD@jEpig_b>eS%]?tk00*'*P*Qd;l^+QSmnMhk0tc+VQqo05JY.=n?ZJ8-.+Ys`rk3d>Y!k!a)oHTn][ng)5?50KN,u1p%.dLsZ&ZUt?rK8OG;L[_,0)lJCM,R&3MS7PYq#-KBme'5EFm66\-Fk0?EnA+Zp\LlC's)QlA968';dIV4i]b*+\\Q=rqG$3<^*1Uj%WUJjdEj&h*(7$a3n\'D1-:P94eC&C0Hi:n,;;URS4bIG'Hi9,V;lG1^npC>2[7`eX4t`&Ul^*""+3tdmoNo9T<D'+!O-,\cUsCMR%6EOIPI]m,LXaX39qrD(u1qV;%hs6Vf-+K"So"9bQ>Q%%+O)LQ3\YIgtKD55%TD&nebcF"'Hh=t+jBMTBm?c5gop\&o/^:tXam-O[%(n0r#^MpfZf&@P#\FNt@dC&Lame)LSEo*5:HBmsl9?*.S5/)$6@0?tsYot0m[)jT`\,)),U5n5>^Ql`Ar<@I8&sFnVn+@V[.rAJA%(JD76`F[V]HEU\]c8>1CVNgiOV7M^@736?8Hh?=1=ejio2kC7qi'+l3ca6U*l=Yc%^@C[b;sZ!13'2Q<Hi9-+>203El+MPGS0u9*%2W;>uO\SBiG/ZICA)6I;CpmuRFK]'BDPfh,M=1$ENT@mWIS"]oN8RUjlSi_Ri+Vl],qF`"8t,Za^EgefVM?n>e%""J,Onf!@TcC`%?GGPA)kr<fiEj:;%5Z52S]\Wp)i;'#L%gbM^Xk-adi!@MbBWdX`A\+@nmcV8*W=F<k.j/*JOSR__G-mX_iR5Z[G/%\I+5P3YioU-%a!_S-EImkH[)ES@4\'m%0K;SA^`EoFbP.:19E^M*+B"kIZgAs3-V)0_]5ACrh2UHMp\FgC%pQX>l,6]VQn=FEQq`:F4Jt]Wm`bU\%Q.IhU$CY,-g:<it^&,(Bnn-p[^[h*Cn`@pX_dc1eQ[e)(nrL2$Xg7]+UfBGd<GhW.^SY"T&$E>*e*W]LfP98Y-i9dESaJ\3CM1?X%>O>\]j/bAXHM=.^>!$*@5-LP0C#<f?&%/I=Md,TFf^*D2c&2bmqu5TqDRWiqGC*[YDn7TJqn2fHm4J#Igt/J9*;;1oF(+I0Z#dEr%i8;75s7Z8+B)2,t`R-4)9ae>Bq4j/@&$PFDk@\H+r5%AtX$4:6q6(<IIU&,o0(W&XR?uH:lejiB&t8O&<B345f3U<R!'BHo,mYHV%.S*3G7B_IQV:D!A_PJPa!QjaA>VF#,CY]&4]_p9n^V*h9Fq</)@XF!?=A'G\Dp="1>,AH)cmlNt&)-a9_,G:?b.5@DeJVEF`m=4u%47D*cQEOQ>?r#]OXaKPCPAC0)r*aY(17Nm[_t.2G7U(6Ir2ilKK%3@f!_;;DbgP5JCM#05E/kgFV3tC200ceSo_q"j50U*US3=s;%A)ckV52)N0gG0^(X8<\p1Wr#GTWbbq*ogs\IAX9$Eq>R1>h%XF+)6'AHZf;d9m*=+#,b?Wp-&3<jB5j']A%knc@7T6^QsA>c&oK[%=8l-*dh["Mng=d`7J>JsjtaTUZUF,k?21s^J$-"?f,*'.cSbE/eRAeL$M;O7a.GQH@de&9:Ru6=C[]`MD]f5[5&9A:]+dAhHa*$X%7=%dW<IDh/'\@pA7cEsl-@(-LD!^;:8"b4bD=Mf[Fn+As#&M#MjgX,!#;E^NmGb/<5cT*V2b2HAeR_k*^9.I-\L$9?n&Geu3nDEF%k2t>*r-@ou^jSpV7"A9<Z,e]afZaJ[-7B-_OJPqf`6f_:m*T5_4j0m:Xo.u%!+uH%1*)n_d2+URJ+@9igS[=9\[QYTF9O/84_a`8%C-\0T]U&"?nBU4);SMkup%hs@iN2UYD#KGTRAXP4?[S(I=4N%n;>%KT9L'O_R[Hs&Q:k>3G3OYRdJ(("mh_FjV;2?fV@r`LTlWsm%2-*>Mo.QBJS_[R]WHC@jR4#'?Kkcnr6;;(!S&7*/eg_6`D8VuYGqoQ][gPpFWU;CTDdRUdrT8%$N"(9gJ5NqXRH-<c<FBTM;-rmF%T4@sFk3!!Oi%=s%!Inq&ga@,Mp#kq?=o^tZccs5EXt;DU!^nm2`aNqVbXGWM:R4T@0q5Y+kEjYE7;\$W0K24]CR+4^07,\GF#]^,%ks_)dhBRb7mjtfuXj?-hdb:$&R*kA'q.S^A#B^&T`>km*(Y"b*+%npr[OZX2Es*`jB0Ki6c5SHMX[Q4KF'<'nELkG9Fjc7<]mR6e%QG_R_&g!N0S`9Dl!%L!#5^_nR4;M,,m>AXS>gu@fhKH7lGlX^#*BF`=3p6Yo,7dhrW.fG?M3``3CbW48n",/N:Q-cL([0t7!C&NP%o!QP-WT77E=61rQ5;HNQHQPVq&.m^_XT?XmTuCBj]fg)?-*Wg:@S\++)F.[^Ds+3mXXB?CoBfGbql[7V04dQIH+QOgCSL25MuKOj%."$.,T.di,E<Psd!sf80IAZZL'RJkM>7X9C`7;KC7Dc,$LQ/Vq=f:g$X6U^8S`6mFT,`%-bs*2V=3O`ahgQrCC2TUblim2o.+(Vi%l-7J#Tmut%l'S[E9,IA2:2t?[6)FhQd*)1X-sucj`a?=>%EQt_$>:5/ht7t'.!`2,\G;s9&;G'/MYj$b@0^/VB1XXoauXUIguG5`%aG%Z#p(L#JUE-q/3ts^+imE*R[X8#@9IFKn[>$,^;XYm@KfOJ(opQ_BK&XCa'EhA5kdB)N@3Mk`.7FFB)Hj,_fc?gC:otRjbP6X]%-aY616t@,io9"ShRC0t1J0>Q:O1N>.jORd1&iH3@8/is)a1#LXKg*+(H5gCu2(DY-PBEXf>>pY>1S;B#`4Am+L4$BfnG]HFO/#gE%&bX]6r(8Gtj<A=e#BQZ&?VqmrK(_A?lZ!bW.6=H3^"V"><SKThTIQbc:\c%^ICnuiM)X^T*gE2(%SGWrnP5,BkDuJj'=DSgPQ/:A%^DX%_FlD2B.A=.4q9S?K)u7f1pRV6Fh7F,.Yh2"<T9oEBML8k,I#H_UMu(SkMhe'4??&&8^E'8S/*6A\*MQ&U)UQV]eU]::+GlNG%e6bV<?MBkn@HSF$Du([.P8BXmA\2L+`oA7eT8DhurWK4mV+\0"raI0,F:'VHn;nj2SCq*R*oQ8ZrL.u<,/7&^WJ_!snq/I%.3@R3%#LC@NnN[W8!X"K1d)!"eI/@aML)3'VPonda%IkQ2Q57grhJ:V3gKCR"P9/pUUXF?EO7CPW(_%4Q\@Gg0g4!;'L$GksFXHQCc_:o.%qV"$l^lNc8W9O!">pS/pL:7*ON1`$S.q.VPb9A-:),"`\8rh@X=c_Eers!7a@r@n3Nsi)Fh=B,orO,n`gRU>21`$c$;@NI&eE84q%N2<)fgZbArOaaCGUTnb@D8GW^]kVG7qs<-US\2U]."?+SC"PX5i+1m&bLLs:1L=CU_N_8M&sP:[_).d_716P+l!k;Od&0!u!hTJe%br8nM5NuG;r^>97%fU(ghl'"I\[GH#lBrgLqK-h%,%2+kp$(]*RJCB1I6+r#;CkCDrsp%da3i\Dk@nNdJ,I`0Fq;1qG7X*-C?A5;%^U:-.BC/0ddVUm<S,_]=3q\i;B"O[@cfV]3MS$Kl?#%qPNFm>kFGH^RLCO%gc%9SSc=c>)o@p\AQ&ba`e/EsG`EIW#FoLEun9t>s%f%+S?s7U&'5PIckNL+Zt^/Wn`qMe$>KjWI<GeJ4bDa3[6*P\Y?DRIXs.2IG9!"7,N5LIrgK-$iaRFUWCQ^LjKE\au2dt>@Wi0#R%%e8bkB?W$\1>dY0=KkU&sc@#/YoXWD_+RLe1gHN>j%Z66Ki\5eQmkrs4jt$Gdj&,X$Hh6OIkA#>GH@>=+CWDjR+\I0e)GRLQO`<t#%)GRLQd5dD&24A&-,.44MN@%edYa0C3d3NK>XHtA;UIj#\2CjJ%X]dWC7pguppbGDX@1A[N$7)hRW\nIQ'e&Q[;p?uJ"F;)Wp0q'_%0^[K,*Hi4AT*kH;$;7Mh&I8AL-So*XCUqp1BeSNSS+[66Bt`U[&D&B"`_hN9^l(_Jf-]7\e5?/uHh<d%6D6'd@]mbAIPBH3L!)T\%[^AN1#uLWYj.GWfI$N>e'r1:6hDiOfg<#HtCWrBmOYokj^<0mHdS<""(3YcES4-aWq?bBq78/C6M+[Yh0mi/:N2DZ'UjHo9JXM^s%F$D%urO[9!^A:hec+_lc<(I#pR.'I)MLpi2%Zu]CoP?a+i46TXI!SH,@l^Ea9')rp538biW`4EsEdR=U4]Nsr'sV2ElD[\WWF5@r%m&<mN]<Z'X3h@gdT.93tR>.V3jenjM(=VnTWVf_;2fY:X.[?W`qdHDcWD^,I1S92,/5MPR:IRCA;tX+h8BLd%;tO%gfFU1Re+H\>%r)DHA2EajdMS`.X7R-7=8obK&WKQj4pg:(bK4QcpK4mrD4>T3bK4mrDS;^*e#LSng3P"T=]n9ulQ!?MTp"-2(;/Q6_W8qJoL:N!b%Fpdco,q%?^:#Qf'S,Xhj_G/u'U)?c@D;h@2$8Gof,[7eY@3b@j1QT8BlZ0T\qgC6ko)Ldbp0XDrJ:1^:hEA6H[D/0dN1QkQ%DMVd%os;6gAI[CK5AZ!RD_d6HCfXoc<nj&<lhjem?[A[F+$/dmpTNpEJhHbtB=k#,HBsl1L9ba'MpNC0)G7oB-$2%N6OU(R>':;Q?2U+9%ao$g!%cQ;N7MCckp^@)r!5JM`5Q8l1g&:9(Dd'T#mi9dd<$#5fFf@%7[9aq9Zab[lDaV?gWVOS%]t)t$rKY&EB"hf`S7*$-j;6X\%c(&AAG1QB[S8LB*p06*ebcG\#=X/95TC*/9.c+Y7pF&<JpgHGB!<nRW1pU*Hf@I:*jm%<W@eW+eIsulrIsulrIsulrIsulrIsulr%IsulrIsulrIsulrIsulrIsulrIsulrIsulrIsulrJ,]KAq*4oRs7EMpqQKqBs85+Za8bkJr\+<<[VoAGjE')@rq0Xr=9$Npru_9]%rtV.*VuPfWqR[^C.mF"-s7S\UGQ0=C?QQ(5EUE]@!s56RU4NH!ZA?]N<S^qdKaY`tE>`st2HSZ;UEV<5+<h(>iW^ml/uZ;>&f9%G%)E$e;ajh67WJR(g`->c-N=+RrWk/$1@kJ\5chG("O(%00e_O6':7ZI+lI;d`k0BN=ee&-.EnKUm?%;IJ[k.cprLO69H$%S8O$C0i%eZ+mq4ESmi#i<"+ab%Xp`u]6eZ,]V0^\mnO=+A\as75g@92"``pYnQSFn1.'o.RWINpkbQa0K:"DHa\l_7Wo,c<VgBR_.L8`A^&]%477UbRHG[%ESg?P-_2sUd];haje(FPA(H8rq8l9j?[C41dq2:AF8\7_gjeYL"gce9ln>$"$a*gEifQaGp[lnEa,`CNJd5V.l^MeF%^Iu=kl1+Su-Cm3ng;T!<]_RH.kH7nXCMD(*=5:=FOb[kil23@#c@5QM&&7?urbHiG[M:UlRX*GRCR6]dHM0DSF2?tihsoWKJY%2U%#QOadT>13aDjfI0o9V[ejTj*pKn&sE*B,TU2ttU)FNa&%T>1'sZY*ORir*f,Z0S3HIe`]K@qSN,GO(-%/uYoN`ReCFgWC=^q<.dK%qZ#p\2dUrLq=W>mW.!L'X7(Mu\U2XaC>L2=J+at!c$Ic%s6KYeVk8G&U?f"noXmffYJ92(+2@XF5JH4E5C3(Kf,e:BrMB%bB3]KM%]oV#uoumg4J*m8j.J_"OGFa!,_@(:n@89eFo<*B"WE9+4*MliPp\OWuZh2C/5aT\XkF?I?qqFU_Fjs8Y_nTiV1Nu%"Mj?QrbYN]&%0#@ALlVB]jh98tPY$_2#K/;[qq;O=b'YhA1_5L#ihKXIE#j1%EeE\2V9E!0In%NPq7401egC?*:<*fhJV/$"n%\,4ciPN36r)<9"%+91?"#;;"b`O0o=n(&ACh7bM5Im*GT6g(("l\]J]#TYbjqF?&*LT&"800O[BjMT%+\fFYS)`26t*X@Wfl@]gH4E86;P9s)+*V@f-%:HEV\r:,H8`Z25Gi'E"N!.&UN0o)BHh5]pFhY`;PDjVUNaCVi_]^q:Z*r/`O"ht9<k<03mc+Wi)Mo%0Xq+'n<U\'aOD`IR>U&Be9%GMRW<E@4L@ZaS9]%\5K9`8eo)ZYMl\)Kb0Lf=Y@KQIYH<HL(C@i.]cHn\>n&54^WfiVQ9/]&^_tkP7a*]]u'WVr'(1E4kH<eBbQE%3-tK_ldP^<l'r&i%W$:di3g[hQRr#VptG1</b<0AJm4gK1&ICu^,@$[pt.#OB.gqq^4,Th5P7qDVrnkWke#(tg[qh)%QZ$Sq,s%;%\K9t'94q'#hpC*4Qo9E3DQ_kTg[s?PiNp:_YHE=qq'GUp3VPXWh7:jZ/T1<dDa%\)U8u6l^@L5A78*[IO]1u0\lZ*7DNAcb:$"TK%94m#LkYH^$\+8dEIe2\T^OP_FMe>dj-V]N`o=-Pur6]l%m<WW_pPBF[K\uXZgFKJe^WjFVTmJE&qn<"d'7P;g&IXn\U7V%KT/4!'%e\$<Vp?^IFkl)r'kLL#Hs8:b=k<5HOoDL&&c^Rh+F/i4$9J&K+S[AFDIQ`#fS$u9Vs6YT\D-LuRG;$K%0E4Tj]Qs0)Qe]g)n[s4E%-[rOL>Z6\)g[6fe/72&Mp=-&tmeboM?hhGJ+1qQqF3Z,$]G=5011T"t/#Pd?WH.(TZcDF_^IQbo75Eiu`I4g8c<n$FP&(*mT45YZ%Q_$,83d13MJ!/p]k;SFV\jrs`TG+5Cl`mHhkp]PKQEg=bk8#+epn$/^gZbCV%mOM%@kXo0Z(Jc%b?%^s?+fs<o-^.VFRFb"Mf4+A%kAR,$\B4?\92($]dnU`g\))GG`NRakhLGA/<gQH$])9kRbQR9pPNU`B[UIRAT-EdPZK&N?n$1W'Zaft^r$bn:kP:f!cPb*5QM*B.%b#KOcq\t%boDA"UpAMa*Ph`+RQq1V"fJ.gN=X/^olot88IcnmIQk=O)1%35fSd@VBGNQ="Yh[)6iQ5$1Dq/pmiS=D]^A1l6W:]H6%;OLP&HhZqk@#t6r4)*]M8X$l:r0Vn:GAHW+1^.F`YQ*1/Im)j$U,.o57m'"h*Rgl,q5msdNaG(J]R:`gNVca-puPT#KTGPiGhHPP%q)*)`H2M('?<_8X7Sd9irD_H+cD(F1l0Nl4[bLcEdt&hYSOR_fTrj*b%"J94J:f15q<f&Iq+lA*#1$(S$N+!22l9=gRs,scK_YSe%%91r5:G06=X0eIJ3+qMNZdAp"s!dsD_2Rcjm+H]*BYQBr.Z(PrrE!*9o`S+Pj%hc(<2NTE^<Q9QNi=+)0J5MthIjihs4*HcY]J+m%R=!#qdlg31IL%m:6Vc=4WUD+\NPE%=mE(;k=3gd0N9@52="Qa]1uh_<=hgTV^"\'icRR[V2P7SZ[*p(iVrmYc3f%!hEZeV?T(k,>%l]S+dHQ>)Q\Hbt";m-,m\j-+^Z[28r);fs,,\@BN4?kqi!]SCG25'i7oX=4PX*2U/07)S-ikc/&/O(>bi:T'fHiK6Mh=N[=J8bE4%Q?quo;bibS0g>8B;tgmZmKmO-Qo]]oplh)j`npR4Z/*%\Hp#WIN^"ZTgE!6MaUe<RB"GYO`D_))mkKb;n:ciJ7fkb72ZbdqbIc$7%=k:X::k-c<@*-j#JdEN*Fl#jUJf6cO"fUS(2lBs1,?Y(7s.>&5(R`=ThFl2>h.iU$q=AB&i4P1cet:o>^Y*\/?Fq:,FR6i]P?qGo%m<HE$$Qjfjfp?&op"<uM]QBA=BY^;hSgZ60O5q0&'&oa?\\ZJi?6#0rE!>N[=(d0^S@8(89>8&jpufWFY6RKUq%B2[rToUtqMo(r%M#?k;(V,;n@]u!BYM$&@OkB$\O$EW02/CLt"s83Y9QVfBhKd;YLE(BpM8o`[HCmLJh7'JZ*q$i(N]Wg<??@Ah@#4<)\D_!D0]UA5%a)&6B/+B8,(S^W9G3+EbQ4'<Z\aV(JK/\?Y?@>b]mX$Yj]DupJV>3AU<OUdS;7hlPjsEq!h$uRdC"tO%P-=ND[_i]`^m=qFl;8je%)gBrkK6GL`kgO%bDV]X+Yg_MthuVdL^'FHNECBT<lmTCfbW+XArHc`.lJDULA'3n/SGVF/iR=jj>QoH3b^3b`r8F$feM2UWScNF"%WU$7\BC_h\%AAN;IiNo$^[!&me4I/lno!#Y*BO(9C]=+FRb*RUkf=)7jq&+<,DH>E"Q:bs+hTcX*<T[GlonAb=$HQDjC.l;2k_:;%!.Oj:fmGc=!S.7lJC+;UZ2N2F+Q&CYd6A]`XZ1@Kn);;g[d&;9&VgI^n,K;5M]KeWp;]$Dp,cg0RPBT"K+8D+Z)?Z>kJq,)\B[&W%&e/7RO-8&s(EZ\P^:7do/RO);^R06^l@D%Ta4CPQNBO+m!G2/5q9\e"7ic`B/.d7#dQQKaRXR#6o-&l54UAg(5'6CFA&_cXB(aM&%:0=i7pG''4f$g<d-"B&14@<GKYH6HLKVK4j)C@!O7r4+'ndZWa[pT'.p#a+=PAZrrMVp6dCVOWPF]91[+p#Q2d/Kf5N_n9DIo5g+%Bq+c42.lLEd2/NG>d2nI#E0S/I*I.ZG3I[rT&+bB\nJIK^mMnMi<ObpEj"DpSk&BSn]VPNOB`c8?lJsb[@f+sHMmF.Sn[#1hISAL%-Gk0+n&[IXP75qp+>b1oO#9&d0W8iJS\Dh]B"O*B3HF2#\-DG\c+=BKjPYZWYPIS]@+u4Ijl!Q2&>YFT0jg:o_N.W?.=,0a*_.:5%LC,d=[>%a#'2C_Lr=-tVVS`\-qnV4ajMGQMI0YPD.en!WpELmm`!eVWg/#sX'Il*I])A"@%=-2%Rr2u7E?dr7e%BMF`QOT$?h#KB%]_^DXpGoIRK.8^0W6,n%''.(_HMM?GDn>,j,TJX=Nb6BU_4X(Lroc^X$M<486rlue:UbZG_V$UOk,ht'qQ;G\R01J`#>,1?L('a;%6i4-S=PXYjYhIPfUGpjO47J?<B.j)7l5G!.>FTH@s#T?DTpRp5-c2!CUZPD_597>WNde2T1K\Js?JlY<F")M%;A^V@hKeqnZ/N?B%E?)X$HM.=)0I4_iBE/VEmXAW\aH9<<K;m`uN.(1?C?a&Vp?TBekiK!s(q'?=cThC#h2>WD]m<rH?@2,;3OGDT`#$`4il@1oa>U6n%Ad>#Kcqkn)_9<1;"F+qE?WOB00rg0#S?uU-GiOVG?lY^9\(.PJllO=MF$LSXrK$?$l<u9<Z;B^m"/jG41M`%G3d3dO\VLF\:)qik%1JuJr<j06KF`#jedlp)E>67=Q'2MF6J(:Ce/hA!;Ql0D%)'pqt't;)9-c--l3+KW;mpESE((::mao8DB#)m*t<8(-M56.aqhgS[I%e#1C/?+)ZKK?+#'m"2j*$eK<UZq8lHIQR8l4T>9uL@%i2H^;#T;.*,V#r6#q<UeIc2su=H6";3M7[4c[T*8T9&[]NfbHG1n2Cr'U%+pc"0X&o=B^u:Ca#R>#C+9T.NWVP%mX=dHkWXl46Z$Q(=:Yr\3`m9j?fVVUIJNF=tSLE6'o8O!(X$XEo39,rBGP>(uN3J!20q+B`%P"qKqMhL,`Or:[?5iqh0lIF4@46G1ZT"e`_fPntr3"B8!^&!LG&dLf2M?lTO&=UB.hD:c#d?FIq72;^YSG)1^h)fc5@L`^^0qEV!%$Zs2&,C8];CtMQ-5\T`^n[8#@Z1n1[7k5)jcJ0#7N&kEd@E<jr^NY!Ib#gW:XH^po_*E?6]E!?\9j"eFLrILclbeI@T>Ya=f':cr%%2g+)+@lJ>5\NB)rk^mK#'9rI)]LJY\CtVkNLG#Oo2ET"he8d9/OVsd]+_=G;aZ9Zp=u+[LCbKr1]Q-oQ@4!0p![WlTOGb3=[L;<%mk3;r(ig*>9T7V;/!1;[.`;a[N0kD((Pa(.j412[1^p2>^15`L%HCM1%RT[.eZ5>=<^d3b#nR=-7GY`!ki]1TT7)+`nDR>hCr>2U%]BGRZIRCX%E1=[3LT]Y4hM6Fu#G0c/%bM6S['6HJe_h\N>1EQlJ.-1,)1'8?rEl2SI<[9G?Tu!Y`k/Hoi)h.7O;b7jJli%iGd.7R%G];[=Y[R))3"DTu^E(<633_IoB7L7PpAUcS&Jr0NF;d7UHQ7iG^"Z3PLPn+HFQYrBG27;m)eI=b[s:&0`IDOfZKnZ+QP8>uL6kb3%V[l*0*>G\XhE(FDqY)r'Cq)V;(fh_9b_UKuEoa9nIJ-VA,NO]8lbeIhQC\@KE!NaX!jdC^5q)i_IZT!ArfM,KMKF#Oj(<qJmCVaD%#RQrJ'E-lk)`R2hbK`3<4S1)2SU[0bWNg.krq,934.ScW`_TsZs8VU^V1G2Cb:^EnH91pGX8h\AqsaXS+7pHLG%0L/6ZBgL+9&C*%)scS(fFL4DChZ(JoLV!u]fp7Wl1,3J'?gS;>[GU)Oo[-3d/,Im@uop-fX*.dIb.keT\X\Q&"a9pfQF*C!s]>4+h-^5XrTTA]"RtX%IB:[(r<kNuV.5i&V"lOEi.(LYBr@LSj<*:5ZX_#b*t&L']OT!6###E(O-1A+(o/p;(H=ko>QcY2F3l'TcX*hbIG"%uUR.]-I-\,b%hUnGiJX:p;"'G>rrY'!L`sm6Wf'g6bdD58ocsNsC\7+g,h;p`JLd.N_Z/[1cRA+p.Iebu%'E%k^>B]ACbs/^tJ*B.`rdDDZgZ`m9%QM9UQ@JB00H7o,lGK6fjiJ<%\Zhj18Lj?gG!Ft-&%>Pr\inEEVDdW<Ie"ilO!@_+PbWLCD)@d#T]_([(gM>Hm+)fY;HYPX(6aCkL%F5`*B*I8Zt9;rMqN:,&d.7\\)J,MHT<ZO5;epO&GEaaaZ5(S2IgUBh\P*+KWm'+$Dm\DO?3clF!"(kUG]g4A/E0um&^bKj6e:6mu%q]@M4n_Efs_O=iV\.XJQTV$Z/km%I4*!cu2Z&cSJo#F:VFm-Z$#GSFTZfeOU%j-;%_kn<uQk)bm*o!CKFt"$V&>4qBFQekTnrEW+%VSdTSh#Hsb>R0p'"-7Qfcja?,TbR9!LCVQ2Ol7F*Sf8pnV-nOS*;oD(5Q10h47'TJ\S"(6IV`+BjiPnX$r2PNr>;cSF'qPs!/j'b%s",<9F_[O?o8THh*qg8a5J!P:`uS*\p%-[hqqH>YXdK+0c!&iR^3cT?80^><em<4@*iSm)r;/S3gNUp3ID=h"s12/+Y1<Zl60bJ_%(f^&m`lPhiq]e&RU\2E,AuonNjY+qb!^\SW)8,2p?ieH$(BIqEM8+K4mmuiX;X:UFWNV)i9(:_FlI*Bq!BQ[VjepkAmll892[3<!%dXK@?",;4$WR0ns[i`u!IE-=LaR;LNG>>N"(Z*EOcYq\q2$Oq9CUkU?&U8j6qS&!En$2&-j*n5(>Ze>p])*k+&/;0/q;d`4=U%7s%L]K(,eGJ-M+/qUlCcq@$VQSeA'gggX:%JRY2@jJ=DI1GEhOnlc*LULOn64ua2MYYR6be$CO.UmtqA-c5S+g7R\[$=0%QbjNQ22s.%rfcahoL;jl\M,t6)kIpR15$ImU#n!bD)V;ra'O#8H?3N>B@Bp&!okDQ*HccA!KmH/!(5TB^#'qQfFM2I29)d?oon8eNSC,dp,h]H%_[_H`[f#;p)g'h@BGLOGL]/6/!^BJR5JGb<;1u*bilD'-[+,@DJ;<X6g&1_2)g#+QlWmlqkDFi+%B'8J6^U/k_/_749#&nd_juSN%^Mr2!M(/GkUke^$D7<eo5X*u99.9t]!LA6#s$ts3qG'7iIl#N5P?rZil&p5W[YAC3\(rf?QYF'\g[urJSUNet?,s\XqsX<$qINR:%o00=NQ0m:B%ntbu8,"D-I7:aW[Mt;RqLstpIa)RF/F2:!Yi=r/_+$;+8-TT/I);@[JdZAF]Q4""H\)h$?No>:koc8m&cp;Ymf0n*%,J(N*KUX06pV$M_Tc;aql\]Q9G49j[0/qcRU0d]r(]HJ-?+XG4bD#StmriNVh4HkDHKYJ-B3Mpl.9LbKkNLNA[VOK3`uUZ*diX#1%B@TC[79,]u]GNX+HVim,[V\6:fA/(Up8_PX$S[oME<#>f%<PmB_`RmE<l#uq)M$n@]77Z?9XjK&,BUO:]DQ59pN:3)R2Wd+UE;1h%%>>8SiG[UlgU93A4I#j;rf1hSm:Y:KT3%"cbN07JgU&P/s1/'nR;Eo?Dng_jp]hnRe(V5<%@.#,1ME#G?q`i=H*Cf!m<0Ooq1PZ[%,T#%5q>Q'Y*TF0b4om`deUEpB!-8.:+8c)rk<1tM_[Xe]%DP&U8%5oGoqb,2ITPb&%Jpc4I1(LL9srd[IsHSDF@t<]^&)]pFnA[8%NR-=eD9(aDgTC#A\aRm`cZX3\eA)%//)PdLXo7"_mt67(a(EYVOr(52ro9c7rcgp0`Z8=Mlr3rM964OdRb+H%1'WD>Rt8n:mJCig%)E>M7J;4"4[sr=eFDn@;NkM]crNH!aVuLKu@)psmbFo@c[Xm=rVdCM2f[-a=h`_u<&9[E_ji98EJH:\iklVhbp$4R+@JFPY6UNLD%/#[2SFYGUB0X>u=LUt2^"E\?4ikgPUIg'(ZZf_4s&'k7okhg[@mm&;YSu%POScPeW5\+)k?5G3HN*FtZ^eHLHDVLT"a]"Bm*&chk%qXK5n#%YllVs$(iYVF6kpF_qYl.W%Rhrb8NhR.RB@orLmec<!1qO*[WIUVu*[QXKG@-QQu46D8OA&*UD^P$q4G01".CmAV1SNGjj%?O7P"XSM1F,tiG`ac9SC]B&_T^%^@ocR<64ON@0fo$lB8<p,3t`.boMT6p":CH$$2nQ_@)DJ7Z(UWbBchbJkPp(=$sk&I@JY5:ui%M!;;$lrD@pp\;39g2?."$j/;I([3Bp6QP'r.G\CL^1ulU1R>-"KPI(Mo%B("!?(+Q8O&.9oTf5D?iX']^0RXa[tYsX\"TKon%R;O%?5G^eZX^mB#?6E=P_Oq;n?8VO[g->4oVp4,\F>aspts-]ruN3-d'+7iWaE[P?q)p3AZXf'KA(1h]m7EgF2kueeM.*g_aW26E?L'&%O,h-HH4/r'f8T2-&F+AQ6]Xb0fI:+[[+R";W9^+2L5gP(4X#uR8+p_3k^kOPrDq;6K,Z_MEhQ;'=_6i#m7d?!U8EZg4o.VnXOq%1%lWC\&p2/Ea9>;M@Sp&6k?[8I6CXXB:Af$P[Xr[/:YG8CLmc8q=9mV$Io^/J*Kbb]<;4BH_oT\K';gVo9qt0<$nAA$UXdfi:g71Ju%V\:b\9gd7`<SD'6/#;fC_qMK^FJJd)^l`Kf[,8H5/_T0U+shQUTQ]]\mbNBNUa_MB$4B^(+0Cp9l@K'8qXs*]_%%:Z)!M:KNpQ3b%!KHL%VTnf:%m'XH_0X9_D;$g_5u$Sg:$PJjm,"W:@CH?.QB'Xq9q-=^q+iAGJE+RBgN;[c9,k@rpGOFJ_k)i1=hT1BcRU(u\QbO]%)fHCh&>IQ2rIF1?BL(=\SU0t`DX'7&h>\QX[JIA5/p_,aL*h-1\ET,+IXq(M'dk:nLjNsn`m[C]XOSYlXVuSDL+Z[<f#U,R[7g8Z%!;M<Da$sH>f7ouS+'Q%(P$:ok:\1j_?_Z7:I*<@CgMYH?DtBrLNk5$NGR3[iZPG\eHWOU(;l=g;Aj>hfdG;hR7q&'NDsH%fe'5H]%Xd]Pd>Aqq%374mKMerN4hN;J%s*HjZ3jf,4[+hMarRRCie^a\bGVJcW>IbZ5cNcc"YZ[U4]:=-!aUA-D#:f4Jaasa6O4k).rt^S5%m5!uk2Ie6Q*]gAuD2Wg@etQKaf#Bn7[dLk0cbPnh>rV*#,C4LUR*4p[$9U:dn0SS`Cttd]hh04EI`Beh%)r5:o\n6O\)2[MMM#<c%Frg9?lOiY(n!edS^jk&602F<Ho4+]T.:7OOg4:7`)E-;sRm,*Wc^K")df6Ns"FC'QfhYjsI"1LT0'sVSNOrZM1JFjP4l_phoD8-0%9qTIcr2<1g5:Krek3A]Tn@U^:@[l6/*d,Ka7pPf\f>Icc?emd;g4q9uYs%`*pWXTqH4HCXjJc-GG:oJ9aI^NM[JUDWP3d2(jK!2,%?b1^+OKBH?g33U0e:4)Hk"Ii5hQQDGTr4M6q=_*A(6@\^inpe@kB7;=\W`=JhU-1A?[1r,D:d1,?=-+dj?gVTj"@k<egJZ8hf[)W%?6BFm[fC!eB>=9*bW]LhCL9.6LfV9pB]d1pY!%2Gm&6f+41B-AWt1i4r5k>o\brO-:H6/_rkc[YRsLQP:H8$+9CJmno?K.Q/2dJD%Cq/_q+=-[Aan*hAk4\7l1HZ4pF3`:YmsSg)Lk7\!>Na"LD&R^BI/YGd5#F\.gj8egnRM=MIJ;QA;ZDV']pj3a^AI?#A&hB[m$:.V%?ZQ2.(Q@2lSW41!DUnnRR-m%]n[ual>kmo/PQsm#4`]M,=05SRl'UGC;<#(Og::_j2JoloLS&n?AbS@%:3u-,>F$gDS!MiMkC`)L%i;SEH:Y[Jf$XQ6UNZ2leXXC?GA`WKO$RSW?\#M>+op_`&IX(Mh;s-CE`4UqRpRse<fl`L<d8+M`eY"WeS36967oui@h/Vta7iXS"%#C96a2V;],/mC3,p=OfQN&d6Ng?6W5^=inS=$gh31L]jnbFX+@d\HQZHhD,?g1p6)N?-`:"22g"],`Y8`r,Z((Z"r'U]62m](Hsi%FmapF/N^2kfVVr0%NB9=X_/;f5j^H&Jh*25*-KR)CVP>!n8Hc/Sln&MS9&V[j+/-c*7m5n>N/(Mc`Od%h0bEG3csSi!Db-_\*,V5%#BJpe"+"l71Q45/gNVl.\8die\p!C*0BkQ/Y@H_?]]cp_:7j`;cL:f*s$eK%In@CZEV7Q)cCT%+b4"51d2<Tf%c"X.8_pl2@^AcX%1ihVO)fF<\Z%Jso`XOllZn_PgP:i>KgT$$YTW)!Iifl7]/A>leP4SE3k*A*sIJ]LOhZ&VmHh*VZB:X/@o^eD3o_lgs??Fbodgk--%khYjfUY]UDZ):8VC[R1k/t$e"ilQP,??lK%O8\$q5PfkprqM,4mU'r0oJtrm48Yc<QS,uMNo`4WE5N-CkFX\Yiec\**udPc7ijk^%`7$'*2h03a2dCdY`J^)>Ie0D6Ngi#gr(3)j?hMisrPp]+Hu8M:T>'sGds!F7H-/^'!9<:<Nu<H<=d,bTJ,[rse*6nXRWp<RMA^p=%R'F\\Hi?1/?@;"6T71'eUi2>YqV^1:^AdCjSppJ2)t3e%Et5G+WD7T9;k<2QV`NA-:3ER8Sa'1P3n:3)FfJB2l;XZBeYu;dW`,JR%<2Ve-WD7T9;k<2QV`NA-:3ER8Sa'1P3n:3)FfJB2l;XZBeYu;dW`,JR<2Ve-WD7T9;k<2QV`NA-:3ER8Sa'1P3n:3)FfJB2l;XZB%eYu;dW`,JR<2Ve-WD7T9;k<2QV`NA-:3ER8Sa'1P3n:3)FfJB2l;XZBeYu;dW`,JR<2Ve-WD7T9;k<2QV`NA-:3ER8Sa'1P3n:3)%FfJB2l;XZBeYu;dW`,JR<2Vd*]emDt8:C=C48J*68"P0?j2g$qq[D=+59,,:i5gbQ+*1WGnA_7q2'qn0O_6VQ4AVHQeE'E8;p?dL%7FQoZAX$oSD,t,J&XL&kggiESjhpBebGUD>4J_N.`r-i^e$f4E7NTu;,5a9s;)Jg&s%\-&mG#\s;b\XU:C"sZ8^h#@q4u^.gc"9F%2(+f3<6lh(:/.kl[*8dPMk>2bF/&8b$PnK5_DN,u@B#nk;Qcs<c)E4lTM6*=Q%t*iee"4;2"dM?au#O)1ae-dr,gA'?.NPnC=YF%%*n/E29dWlb0$-FG?j2(KDU.h.KNBMC246RBcJdYW0[ib9jNY-S4dN$524:1P0!_kR&$&)!#aNU@(Ks`;>7@mc(7N!I'.>9%bGCB;%TJX]X,L^HqPse@_WD2WB#5Xe#*'-nVrXNqEPrg1pROY*@O/N1g#kcbOUA_Et[dYi("2)PIP,[$R$@&o-b*PdQ1=A$q_i;KaKuG^G%!a:u\G7nS_da4H$6HLENV^`LbNCSQX$jOgG:o^2%VHJOfQk\CaBTsHL4g4oJ'JOd$CJr[>b!7g>W$Cpm65_Ue=XrO=e2E:RQ9r3J%A$CIo6Fe;Z3q=)M]YI#F%7409WSHR;WMPa"fo-%73]`$<i,'C.%(a5b)>jqY7pjLl8k,+Vb>S<hr!\VdBUWq2!FhL'!M;kM4pq6[%K+OZN-K((_2ad<_R)5%9Q?*i,991:cFOik9DlBS=WJ3StUiG-78TKnKPA"fr*%F!+*N"SS8e90`$>n#FT5:_P%UGEhe.+8WN%h8-%8)5p7^CB2%1qj]N&O/[rLTdV$:10Y/a?\sLSG6/BRj(;832gWo@hYO;"tV\:KH^H:U_Y71k8'sr>D@/mm)q\ViD]NIZ\CQDJ.FW[%'e'cZF/L=`0&gVRVqIR^/M^^qB>W!u`aGP5n3j1l&sK^OS`b8khI>Cd""XGl%]_E+)FEnIDTe[_',\nJVb&gX0IjUXE^QQ3SZ*Td%+dA^nN!@D.R14:()?TTI%N1S.cl"IfTO+<$Ap?ML(_!f)TE@F\N3:Y6)JXA#;]4D-26**%KDmKVj\d]7*i4T7kWWOHDD&<Eg^=)t%\YXJbLiHZ0H8MNCm%@f&#hta-r_W\*C-j4R`NIfH+u;_2KrSS!OTRYfPimQhiP-/lKji=96PHCb1;$G``FaG+*<Hl3i'2!bli78?%]`D$JqC+:0OKt*1J:kg]DodG1!:9u5#3\O21AhHZ!^ik"#R15;LT8/28;AHn2Dh].,#pV$:(D"LWr[6M=t8&n_,-5\_hcQ:cIDo\%3($Bc[*"gCaZsD;"9sT`&g1SZ7c>E?(kW$7#\t+;)L+>bdogs#RZ`J@DP$#<aE*ds.Fb]FLFY'CC5<#nXO]'1,L.0'"i*]f16ol(%."G)"ff6l1Hii'S'^Q^DduktD3=m)+El%)iW5qrSPppgSAMj<D$nC@(dgQJ1%Yes_'Y5*&ZrO\V3]536R5D\[(iVBe8e$RU8C/<b%"\pG1.Y@@jVP#E9`YMgu$rf!*B$"deaE^CJ-8e+\OeQe^V8:lkf])4S!eiJOO[8ga?H1P<IK6GN_8lfJLW0@mTj\<)50G]hC^,l>%3cQ`taP]0R#J3)9SANX(Y-T_80JathN_'qD#[<CkOX+X[I>k#::=.N^=c!r?l3O]Fr<R-4>R?B'9gfn%Mj7i_Cn7[nnC8d7psDcl%odb9'cr\$pLm<'=?D2O%d`LkV-G$JsE=r.>)IMG:Kk=aZL^XH30p]F>A+QE,2k9nHK0`U)"f<%m@A:U9VZoUt0glaa&rb*,@9,ba%JWq!ZA3RB;8CVtD&K2r*`!#3T#T&-9'uJ$+>DuD<'FG&31/7`R4ILFgB_VT25o'jUQjL&6+OHSLAAUMT5upA\m(Pcp&&BG7_c;6Y%PUh2>Ts8B`fegP\>-/tWh1YQr1,)5fFr1TYJYTb(nc[0e.R4l?U!WM5&>a2=^gr#>j"bL6kd;\X8s%[+(!@ImWN[W!38tN*`lh1^%0LWW2M%KH/$irRMMi^8`!`Olm'no^nM,atI_o43_Stma-&^kdj/dt$<K.-Q(6Zk8R_)-cd;eSB(WdIo(bd\A3+;b5p3t/CLQ>M[1%)jA./iZsn5lj5J-':T\`'O#Wk,KXsmXu_MMP'KpPnFdJ>"B<$GW$he2k?MG:Eqcf!*K<5Sk_pqR`2'J?*5)YKZsq:OJPkS862&\h%6dt;P!5SBNd.7F^j@R?&MEF1*A\!:G-`9G/X%\6b+OFDS1ii^^<>-fsn/[J3;F!cW=G,cc%X5/M0T]15f;9Zl$61:#Jl9'?_6MpJ%n=q,(g+ZWB1@"qn>_tTDV8Np*G6ia@ao%nfK\;d7XEIhYN%UI??t@kS3Xm1mf0T9ScW<r^=HF!/]SZ_u9UTn2:.<mbKK?:b)$e;g%5gWD4M1Z'lT3W+,8`")*';E=-(Fo/c]ui3b.eQh1HTNTB+biOFkYWp["0.R'VR6W(.2hGCl3Mo\rgf<"Yf!?l=$n5>VcHFP-.42l%$le:BAf`o^_ad"h8D?Ssj'$t6LFF=q2_h+gO@Qj$2%]W^,t.4FI4mjN>\\]=8Gf7/*jiKa[36f:3:<PB5`ZW%gDBl!G`ie[Teb@:%]cY`2bp$:/%!IS]_$T,Z*t0:U3r&amAqgXLQ3=$5.4JY5<YYO1R*";7JGk5bC*8172^k$R`l'))+d^BI\3(oQ<,8)N,3XnhQ!h!>%BknWRgonGV$s&a9Ab;)n*UZt"R=\(=E2BZf52^N?["R<R6Q(7:#W[>SfP'DHKF(`>#Arc!=86Cc0rgb&9M!0.Oei>&@Pi4(c;.&2%?#t7=OC/]KWJ.W/?o6j[8QaN#Z1'Wi!JiKUcab5<WMGPCLBaTW77j2"Ns]'t2U/hTN<?Z(W="dbc(;?jk?INj8W3B7hCKq?'h_t;%9.R1Pd%%lgiDSma[=Dtl/;TEG0j.AfI=eq&:51CPU/c#n-J&r5]h#n@1t%]bl78?VO,B,a<Nmfci=uM73XESRhm+VrP$UE^Sgeqa%'e+J=.8C^a\0`i'JH3UFO`JK<.'hI7`f^,,V7F[GZi3NbM@9Xtk"As<h.A3m?7A6uQe>d#@PH1u9fXd\P[Q]h5meD>jADn57b2W8%DJ0#XE*6Ek_GQ6*%R"I7)mPst"h$0UUQ@0;'!K4R'/bitKRI;S*]pqdW@e&6Ug2'KT@OoW>_36t)$hD6<A?_bkb\c'=o,Lkr@F$"%e2J+bkIJe(AZ/%U4IE#D9nUo(HG?:&1/a>nIC!U-jn1;`b^;Rh$fs$$m0YK/13*l@n]>Ha!?`;^SsAlB?ocMfjdY7/-96:Toj*)s%@,WX%MM.B*'.G0NUre_8\Y]ufUZu&ierV78FS0Thpo+V14Xg77fef%\5ka/Vifb.Pe%hXij!kZPje3M%j-5pjSpm!1L+tZ&>5WEJ%ic=Yk4mK-2RA.rI%oJhCA&.aZq52Vuhrh<7eQaGhoDmL%f]XJch*gLrEjWJXGo<jACW+^ea9$uTOVo#JE'@0t,2RW?jQ2Lb]qV)L%0B&#h;i+$jbG]%d4XuXkFJZVk0)SlbH;7X3P36%1jnTc\r0pEN+(I-I_hYb%kl2BCq/05p0$UEPjL$>6m`b4";n8jp*;:%I+eV3J%'6+h[FL846_71I'4]>>F!E3HsAc>QXY%[?_<-[Q521T!W]ls)1=G%>k?Bu3mVf>"pV+;;$L.5%H2hpILNJ:/53Eu<Lq+Ih)_Njd+%le',FRl5W0:OBrS0VteqVWtLeqJ</qS#Xf3lEdInIl>9@OQHS4h.kUCcte];Ui<tT;TR-@K$)Fj93#PBK-7:I5^Xf1->HN-`e28O%bsFSq'<Io>lYU245?JB%h_#5KR_,(K)H,VF>+h6Ck^6)_2"s&5m-Qp@?_H:55A6:Eq$(k!AM^?VG<('Fk'j\tUB^I65_Bm>89lom%7;n-o<>]eMfPKh8(Rl`Y7LT?ZCYT*EQJHjaCH<]H>_FI\00hMKj?47Ah$gc?U!mZkZ"4r(gY-m'F'1S.Cj*>%j1*:G=i4qYDN]gQ%i&r,mH'AVKF^>XC/@k#D/+QBc5b]\1o!Y,J`";!D1I/tNjMMoWLE!DoI[^)TPI0#gYr*.q;S"%Y.n5XE9<>+%eJ8N;XH,hAaHTJ.%%-D5\4;m^AV9*1a/-ctZ>_$jOV.KUu0bMhh9*jqpJ1Qo:@dMBR/'Wno^j=pHPm>b^@:r.l/cJ\K$?iDUbCt@\IQZ+XBpZ>9XgK9u%\!?ZF]26D.(1>Xf`pIFq!0dN^*uO"5C"rRjmrQjiq[@8WXf.P<>P`soHPV&5[to%<K.7@JnH8kMcD/cA[5@2>.)?D06,p7p6KSa`%OUFC6+2pDt3:([\Uf`LO5$%492aLSt4ReFpR3hE;=UsSmNo-.6Ba)r?Ab'L7Q)7\?65d@m(kmRY8WYj!l\i%l:\*Qb>FO!!X[)KQ%q+7'<q?Mg7KZFQ]IaV?R#@nlY&2B2DZ8bEI99>hUB>=H).TDeZq"HM!ZA&9pCFuL+#=4/(6:or88Q4so6)\)!0o%Ol`6a7H18qT2%0g[jUV#mnoVJU7<q:E0q0pq3)3[-lW8J(2I'RTYQ;/,5oSaeX5TqrS1&J.pGN=;B>+lB7O<Ail?7.>'=fNK[TFB+P4M,:4$+uQ?d%XouF@Ej&FSl:WW;Ue+Kl@;5jahPO:@'j46uD4!G2"BQ,880Fq@&s<KN[:r@G"KP7Y1St5ITeW73A9:.,(uj8I)9#<Xf3'q\W$lUs%m/%H+Q4T9`,![,uL3h9Ynn=JbECU5,R#mh![LNFPKk1;/o;nmA6m`*.,&Sgc0.nURDL'@-$<c`$lKBY=GfC@!J(r]"BEK2YA2;e^%C.!?p@H_<:$&XZd)%"H!`KB:3W=1:M6$!`JPo'EskKm-m&6B^*+kfhp!6VB.)88$p_Dq<FX!sCap,PHs('S1RPY^4_#qB+;2.V89%Jl56W%2eY-ZRHDVKlaQ&;7Qc+BiBF!p_$>5,t*f'TU2Vl_c\d1d-,$p,t_E>o22#\)-'U1-OH-_P'ei01c5=t95n%fQjVlhB2*DP%_dJ+JGcmoK:-NXH>p(ZY&6?BmJ@0E_h?V)%B3@Ymd+:-D7?YG6c:EEhE=5;dP5u<LXZhRLTjHQ%&>qWZ@H3-b\P4>u!).sr0dlK0%=?0PtN%>JrMLn_S/:g/!J0-dtf+^qj?/QYRnfd4=(:,"@\i:68+GJ4=!Koreg/]el,T2)3CR`pB0U3$,H8+IE:kT7b!I"bs9GK(P%d]A,_;&7'JSB*16K_[#((249cQX#P/V(;jDcHr.K"_)91X6)PKdbP2kf%UmKC8&lJ<k0cbqEubbi9'#nWLU_b)'_&Yd*0^$nmk$p%Fd6u9AlR%0!^u_NO*ZnTcC_=toR?)-Gh)a3#O^Vq,LCoc-etPm!OU!J5LW:^Vb0eU+qo:5+S0&r!b-F-5HZ^BEK2EQ-WC;u8Norc%m$gnaKZ<Pp!F01NQbt`BoVfW'65;lOf,*$5QlH-Hq-<'30H;POW,3r'5rB)d*[mA?4Ia,"]HYV,$6s!%R@s/4e`$J+!27U),>:`A%_aJc!#8\ErJ)(rEgjtSd,3*okOVuPa>RJ6!,G"H=(69UI]b6YoJ2m(A:*r0MMFdRJe2F[uKS2=90i1F[.<UNU7H"k:8K\2qlXlSi%QJ*DlXi)>o4H78j]RkLH,iXeFN4ROJ>"e:A96_B^)jqT7a.*[^a-@&1)`?(6,T;rLhl3im)+8d00sX*_JVE;Ai;fZD0q:tCLSRW/%UWo?bXRRI@.P48K*X*:JjQo3JeBYAe8S_W5A4WPBm&3pW:mD#MDGCKBP>Xa(mN@,QrQ$s,jck`V(a;`AZIh1mMPAq^fGrnJ<M@mo%CsnWKX*?;-.oo1W"s](2@(H&5^7:HU'u?V7820rr`ngnD9'j:5Ol&QdSIO@7bL;=r"RSmjkU?HdF@joTlJWkQ=,VWoC%72\bOXd@%NQ%<Wb]m\L/sl+DO$&p>'H.m@SfaBe7n67*:.pch%gT.%Wu=hqgm=?cpo_d$+A/J'F#r7opO!H8\Vc/pE>+2=1L>k;1,K4AOqs-W%*!6n#3$fDe2utQnS.Z/M%RQS`nSgfk8*Su?'CZ>!E/IWg,#r&e4IiYCLnIHl/2'.&J7ur(nSeK(=P[^P4;8ET3#0M]3&-eTo.PjX%M+c.u/!AU)%k!0A<)-u3FAo7DR8uEiga'&t5qkDVD`[itr)g+Ld]:BdSCaam.d&)8(M)-_M^,%+'9K=a`JZ,]*QpX-#(=:U4@$D6%k>+eT&AtODi(-2^#\`\Dk'gWE!(T/(Fh%%2Z_l7-;MPWS1pFbq/Vr:tGA'ncX[aik2i`Y_@5s8`='rr/JF]&U,1cTnK9%Mf]:B]P%]nQcoZq>*W(McTf1c+Z<O@.Gr@:C5g6U=dQ5h7CZ[T)#uDd@-1F6UDH*""D#G:$S3-cAh,&tP=25obf7:sNN&k/5Vr]*n<]QW6:8%#/)H8QcihDcgB5L2K9%-CI)h!Zb^r'liY1,[e+;[)MXP3;Cf"4"nMa2,^bQ4/o4]X,3m"UQfVI)LuX"?-a>nM*o^bX%MsDXL'#"B%"st-D=!XRN!ef>"8r!LT!lBb4ejl@BXL94NrDhm3;,k/I4:*k_T2<A6G*`oU`^+5]q7MBHKaQ(^)c'uj@bV0_C)&9TEB3Z/dqCId%+C>#+XXAY3YT&j[@AQk',Fi2,"S7JFWMl7g7gB[U)Gr/]BLi91*'3C&Rs[,iAg!u$"W/4QBO;tLkq\Y;`n&UI6qU?sS/`I24HI`7%6C*9VQqrLb?>7%n<?f8,Q;D*U9/&,n!A)K.#mKpWOI#S)?p5/:*A&KP)s'a7Y7Cb9'jFIERh7/$lN;^uV,_V^"N_SjD`pCM3`F['%\WjNO,3'OchKDAUQqg&Nb$t7$[Es3LN!0NHMKq36NFJ"4fQ<kCkC34mb43%3pgjW#]$`GX"VkRrfZ)p4$nER0e;5E:cCDi--$XH!%H[c=ICD1/k5[kuLKp@o7/s<eNq'Q?a#baS)3M"7F;bDV@CTEA$)R+t%m";o5WBYX(Pq1#=!,>_hrBqRGd$d&c5S_G,&FfbFKi41V%`d9EYB=OBRp.b&Z2GO.F3lscJ3@YGu+.:3%<"Lh_nfZ/Hph`(`*tUtO"AW-O@,e,lXZl$p7r&:H'0nJT/-V\WrX7dqiWa`^Wsj)T%MH1U8hDOFr.9^Bne+:q4eC/[YC6CS[<-=W<R4J'j-u,6gC!kb)?_KlDStmCl+tA?g83qOrKuDt_5+M_L=?il*=D4!A4ND)[abETE%,?4/+U>XD&(p^ZaQMX/i7!<#H"L^P-d\uq?q:a7CG&.9be;ZT%d=dU#0l<'siSW=o_um'e6sR&oN#[?N9VX&5*B8Q.)+G;s&_FWh%k+Mk,$8!(:L'E6OTFX<Y"<!ri$WF82-&D:J4=$!Q"?W8SN_^5HgGngfL<)ND7ft1:@N*q!$'EVeLUJW9b?3?BZEWLG07r/r%_k"s%,)Ikm1YHmS"jWs]Eh^AjEoBnK&KqA1b46`aN23D`r1d8j>_W\qc=-.C[@jft*la1]n<Z*mQn+o1DZl4t.:1R_&q8[e>?nNFDaI-D%5p9W]%@#:_*5@s'jU*Ei*!3O3h(`)T6H%rjV<An:Tp_EH0MCSJYVUmhO%EDT:'3ca-giX=I(*:Kf9?pl_/R7jf0C6c\LL95+!cY,%O^Y&l(C:Gn1$Gmp+Mp^40Se+.nb(uj8>L#9$6F$mJf^n><8;!E'!7XM8GHt?ca[0()Dk(][NqtDE/EF9RGepcY6dS'UhWfB2i.Ef%nUK2k`$ON&3,)@mnOtL#K7T=$,ZD]L,/942b(_M<!o44co1UF#-Cn-b81$W/dV4_D.49-G:n"1;&024Y%MB0_20mFh_>,PK)[/e&%U*`rqbW09Fa^lBE@&=dbQ'//OdDcSHnt;]3*XF%Q^2;i-<ti#L*$dds9@t/&KE1DRGt8cBK:lD.pYQN[]VHN5A9m7`'%FR`%W=^1%a'b2MCLs+uE@BrjP5;$Z>2HP)m5+&PIN,:8=qUCgm!2LQ:gC0=LpkH-nJH.qMsQ_4K&nkiqGk:D9'L)tY(_7-@o.D:Rtr=KJTJ>H%8*g10LTr>/g(OZRO?AT9Mi:?0CUt6>F/<*Klo&%<U_NnZ3,;8hOO2/&MS+51'M=FBlrK_$q;?@1N8\;&9:IDeKS1O9H%q80%npKX%Ct8:pS@8_8K;j!\'t!!(&B/X8Q;NS]K$N'W[k.cJEL5$9]HD[pO<XDX;MB0i.a;`@X2FXO!'qLF?DfY+hNjMF\IoT1k96fU94(XN%a=%5C<Fo;UOl[df'VjTPeCHlol(i(N:LK`13>.D?$#Pl,+HBPZ'FS"&&RedH-:TO2n"/;</T+9pE'!A0Gr3RP9sku.#$#!LM"URg%.N!/qhd;2c;:+*3/^H*,XJFrd>ab4/=3_Nrkd:Xl:5sf(C?%#YPI*Yh4@3_8>s`Wh;5,P(74_-<TQtKfQC"d0b7XPLb%Jm_QWK;2%#$kW4,B5nV82,!(aLb:UH>?t/Pa:>K'Y-i%;+jRqJunQB9S4Wo.!YCm+`^D\*0Tq"0br"iaTnn&+fnLpPCO'UD(G<>L3uF!0Gq,/%%!n\%JoX/5K">G4K_<e_&aLph^lh4a$s*WRH!ZWa_rWgLZk+*2a'lrlQ,8=r@r&.`KnO"pj`ipBZ=X\J>-f%[CBfm?2>G7]3JjYo%m7Q>=#bl@LfOHF4$M0o*Bi_WRKk-$tbCNtmX0rU-[^4K6I+:apN(UW;c!t6!,GCq[jr%VRR9.<b_n#9:m)96o6Ih=\-(1^<E07WL%P2XE_9@Kj&EF[<qV#q0<ibG7pPI4g@7+)jD;C2J[)7's7XB>i6Eu%.Bi!78F-[F76+fI13fe\MSGHAbk`[hOr1c)BsUBE>$^TF_/%Q/g^tdE.YQ=3MQMFh#@i9@:$"d[X;KDpDfgbZWoV@7i=E.nR#-P"/[QU2iOj9;>HW]QJ&90ZnpsUS;dB"]AEI>8YQ2=%h'\b*>"&%TYuZS/LWcMT*gM1k2<1Yb)FM7L1g9.pLcT*6.n*?5KHspcVeQ3'u1\t_3sO%B5FVB;^b7!B5Lus"iMZX,c39!nRhk9l;3GnoG]*E%K\W&M'0OD9V3i9oqH_S"X$mSMb\nG0QF(o+=ik)NKfH^o*k)CjRAlE,TPmL>COm<0b+\qeT;^%H<`_t2XaQ4=CbTg*m!A*tMN0:e%70;.#puN'D/Ir'(q@$bJC5acH3F[>7Y)bs^"nbsa)t"))9$%F-qP+1&6F.4]*DA&VIIer5b*b\gXCf![(=!m(&EY!EW5'^[!-r9k%"!>[Z]3o17bK6:<i!LLEn.cO2K7inlk$tRYaG]8m<+T&8f-tQ-!%D<lMgYGZ7,1>j&%2AD<i?R!Bk=$rEJ7:WKsFC11!6oj"f-AK%4bh>$ZDrRgmu4^rbAq^'gmH_Di]aUtU?SB<f]B*8bWmm?BMs!QTKcGJ<K/At];JZs8i`0d89t\u&J9SCjS36hdJ1#D0e:;<Q-bdg%\]fA\L$beaoNEuBQlOYtAD:aYFD4W-TErs8r7HNtG#;H7#R7YhJcRHsaFKRaA3`dA(sj,jB*=bN%u:ZCerM3+IdCOEG\Jg)#a$:@%Wu=gq>FpZPF[!^:YhY^;MC=X5OuK%uohEI2'G9,F.1KqonHLfS`ILiS<,O04b"A,UMCB2FN/@cn%<eujkK&*]U&uph\l+Pt*-;Vk%s$\_D)FKsgl(bd2k,6EdA=Ytp\"IqqH[[c2o7E3*3/[SXUDN'<@5,an5m3+?[M\aOr3FgrEL7<WTZdZRdPBXE)'RSKMS.#p0Wn[5%$p]WC@EZoGZ;o:a!.ogE?@\6$TkKFX;MWDT6+O`KQl26S[Hk%5&4>P;<Wo_B7RY?grQ^h,[\2SWaI4i,WgA#c_,:bJ"]KGp+:b27%8Bt[(jd-)J5f;*nhW^b*7um;j,0pCK100);R'I\?X#td&MM*tQ'$PVGY-eIu<I0<l&o@ci2%`C9QVq4,<)-32<hYau4o-0*@3"G5%2EBqNAR6]U>W^d^E0@GY.W!9kD<[Oo3C)h?e&n[Tap:F\a1DH8kc0lRni!bs0bed9@Sh4Qb"m]H!N\h#C3BhSaUGc`V8T4g$RT!c%7*>X3acoeU.O:]Ca<h7dp5g(b6Q6b[3Di)A&)!pI:'/CE:f\uRaJIlEE#.inm7&ce]^RSd"(b8@E_[&T`HsT_#K6E-OSdjb9M635%*I9)h:Q_=fVR"`;:j#%Aj[?&bmQ_3.q7c-ML_`s!0M/[29pNk9XiY^.K[G*R#Vo:Y<fQpR)NGC[CDN>HP.;2TTh7j8-Ng7tLP]i<%We"\G@$Y_4l:dc_,sFOGqKe#>&#TdI)`ffNeQ"p(M4:GgGFK`_3CLrBFP5B4Lcei09JnF<TZm5IOqK7Z))03UcJPFV2PlnMQ3/).%1h)h@@]Rd+DMhB&<p?;U6<7:EY!@5V+nfbma1bfR&K_i+Q*P'@L`hsS`s1GPa[,(!S=ET?S5omdE(ot4EGcf.@F\X#bj3NC_nimc%5i0&26#gcSZLP@8Iiu3XCN!=?U,'c24ul^/gB,:u2IbPZ'<A0uS'$AI/59I81s9C2inG[@EaFY=hmS2iDd,PjDd.gUDd.h0[uDR$%D(5:k/5-3(Q=;i%MTN7=b?=\Ma:J^,Mk+'GS=[f\<h.p-jkaisij-MJ/RjRCeP]NkmrcR!GASQu4Bm2qXtIFr%8>$h:_:C?=:ip/%57PILH+')nQrUUK8%G<l^Z-LLkjC"$mW?g[Z@46\>[)kRkF#RZNa#(d$U\0'!dOk7]hqP#lutk=B.\mZjP&%Df<dgTQZLrSn_9T&%@di&P5k]'Z'=.@280A`R6Y3)92m+m<S+g`u"V`[04PQf3V.WFDD\RNLQ66P%$8*h4WDR&8jP!)IN6C_tOl4qo+Re#b5]U]Jaea%E%g/=$$PBBUgg2d%%Oa2+e&Y][cV/&^ASP<.2T&Vf7%<T(=`u3`R,3p!'Yr]YJ*db=*:YXEc1JT-+`3YGbd^'Bjm+Fk$pM=-AO43UT%BrFShf[?<1ER5(NPW#Wn&?gsZN\(\O++?S+/WGe7#t04o7g0[pl?^3'l59!AElau4rDeG_,9ubpUS/Eh'A;r*D$BKZD$=Ib2Yr+$%CC-.m1[ima;X*#k8D:^\>CjFk>63EZX[)6U&sqgXHfW`jW:HBdU4'[U>D:"rXaocg<ZpsJ3A/X^0Bp/RP'bp%$smf(c/R5nPb337%hPm?6^^G;AWC;"U8M&&IG?/_^dAWqB;]E_C>Ya@jFD<&!FD:mp41,[aSQ[C2CEfZ7P_u#8-h6Ds;sQC`BBbgn;mfMcs!mE&5uX)u%P\[U_aC$EE>#M_a\16joP0u8J+gY*?SmX1rKfGHrGNaHY6tF$jSQ17Kn`RSa9B!LnXsrKFG%iHtq*>Or6VD@lgApRZXlZm<5re#A%)i@4\))qgV>e`%aOGDgLctm@?:MK@GI>Ut&bjjCDTBo>#c1;Ki2-pcH:/tO/S1iSS6)`^tS=H@&&^'Tl,^GVAdLh]\$\T.A'IFo9%%E-j.6s-&Mm$T"hi0Im8(V[O*QcrS4APN:18SOk/!$Gj-@YjFtb2m"kf9[964X?*R,$Crd*EL"c=gJn)e(qs8Uh,IX1b[oe:'Zn/%S2!JSjZ!`a5I9-JmM^q1TbM55laTE@=N\e$UMkt4cP(fT2MQf!LdC3%M<t<[&%Nu8?s#,H[P*0p,S3+rB/S'Ljg]4V@1-1YMuHA0%F*uk/RSDbhLoirODMh&E"dHWsU*f%`00sY)&+;mljBIX#c_ss^V?UBsR8,cNLXNgX'VbTR2b";o6,!kd*2(O*6F[UE+F2J"pJNH\%#Nt\0jE?>&J)n?GC7jfZ[StOn(8_:.MEI\qYl7*JhW[F]Nb0Gtj:]s2_>"%o-]=4t8Lii3W>NgXKhI+LQuS@2b<IKLY[3CmgU)*$%>=7"!!E;N0j8!6'N6?5nTlr-d1P09B=@oBN["LiU'SQNWjY/;n(d_B=@OQ,."O]:uJiFWCSoV&"J!KGMaiTMKGqpqM'C[c)nsY06%[.Amq&TWTaZ&n*J"S_`?&2P+f5PffK_\a]A?AE-q,^.6T+r^[h1GMF0#8^m/i#IZJUl`3>3,^FTc\7SfZq68h#CPGA.Xm<d^ad'n%9Vp9GUbc*#Mfa)A$q]m](rE$j&r0J=Gk+*TrPbG8\Q"p4Zq(E_.r"bQe5I]c2n^l0+KeCYkYS@K<JcT-&KMslYul]j*/f_(?KFI@%ZMu56r=?Z29C#GV3`aRI*g!+7\Zuhk((eI,kiG+MKHI<N<jKsp-#\507&:E)fnK;q9->lXXQ5O'P%&EJ+lh#F3b!4-\.fF34/Q,E%;M5V0=c(4`\J#i1Mnq6qCG)N"TqL?gORa"T(FVm:kNqMnf[L$lg6j?&QU:Zj@q2?mWR#64b!Y`qTn@D`3K2N[oCuma=tWn,:Z=4\%'\-*\:"-WG0k@'//LAKn5UarfQ6AT(gr6@klt&5].At.Tpb@_/Qhh3c@lV<ca"CDNPQt!1dgos4ctN&T,/h?(&N,,KGn_YJ`W="?%Y!2b5J4W9;N?L2jfFiZO!_'rflst][#pHLB8g'lRit=,in^aNILnU]Qna%D:`t#;`MT_id#p'='msX,*Bi]<*&nI^",!*,0Waj9C%U1Don>cSXGGnQ\_0HS@;N)cN9Z(dJEq5QbUXRq/fbeA++/E8=$lmYE;O,84SXp@VAPE8n0;N,a?2%k[i9#\InbOL68'&ON5@NL)L%38cE?+5b3c2D5Yfcsc(3W)P**_pKUG;l_,(j^?C/HG!uQ?7_"A->WG)-SYZqfsk!6q66UI7o7m](t:au32]N1GZJUB/"t4tK:15V%CQ(Y;Bgmq(Um.p2Pcf0fV?8;Q(<ZiY:bo;B(dfQirm?r8N_T;#g__OdMg1AiS?YpjSi%f>D^uHef9A'p7P!<T/(%%n@QO%D+jFr1%*c`'Q*+ct.L@S2ARf+,ZfuqNg@u`k'S8FZ<&e/+kS;4^Akk&N)r[ZYbHF328,,*XkM%n49b[CmOP+I\#"h0CW,AH,e:JBkeS<F8q%/<Mn_54"&$RS#1`V6dgfU^_RPE,@V@GR-l9YR!k'+6PAGAJ2HV`dfS0nn!#E&a@'[+%JgZBpfe6EknR%G<L<3)#m4+,X!E6ntDeV%*;[S4>ktj+i393VWf`g.Q#a6g63p;-@jJFg`&pC@0oGUgB:IjkPq%-UHBdNMP:<a)/5/@-d[EogP#VlO?TSQ6:4i7QBb<^G0N8pG%S>7pF2#bee(aSFk&06<OkG/f#9WBP1\fs]>$!58`k8cJ&<Ykm%$V,hBTr+hL+-]PEXuQ#-$ou$Z(IsY.gt=M<nN[3$R)(hQgo#SH%r;q^Y7Z4<M3EoA'Ke6dq;rY/1rjm/3'JI$RcZ;[(`c5<eA`]0]hHA'!+nj\`K&k"K;/1)V0kh=dRFX>p#V)+iQD7_qKMn#a6:MTn%`h6#^j%lo@Y_el8MX1]sYKpZ.AE?:LaA`?1(n3A1U8k.@k@jmuI$nm'=k/>&;+VF$/]==a;<9%$Ch*q]1[r=ZeaHbdBN6UPj:4Zl%:aup`(2$ed$0_j8"k7Nk#+>g]auqVMM\)mc/mI+.0cVrP`Cbn`505?9-n!0W,m1\/a1(Z)8d@#<U%jOJ3RKi2X_Z)LAN$B:X[$2U%`?;;'0pIRH'to5rOVLmpKN6-olJHXQJ'q(m)UCc6PGEd#+D6X%d.t=aR91GmkE:!>=/)atET*+,-LNfu4B@/LAKlj_]6@HUB]S0=%?uU*Y.(Hbmd1%t<MbE`L'c5Km(.df;A<Ld`p3Q4oP.WO\$65+[2O-0!ME\i#R7u.s9<sG5>CjHY(PC]m,*[q-EB\B4(kcREH5VZ7%Z(OSH4KDU$PUG]BoXJ-Y=h`(GjcWUurhPYqZcZ15O?/N(nnKOAj(dOU=?OMa7_Ie6l`LlH>4;sIT9BPB`pe-:*u,?"d)K]eU*L^l%0et+rf2Zr*-+H9[8FqUQW`2N.jlc>X0:(Q)_GG'-nN#njRBdJOMF<I2a5p2NqV,PK5h_%"#+$MZfMg(9\_Li:itN#LS?4G0<($\]%&M"*`>5C`31q:\.+O)j_<?G5R.+h]*9"pnf]1L((R#<W][l?]!A1N>!8QD0dOOb24M;+ZE4`U$@B*gn9_H."s%"maS.A'S@S9q:f%V"4)&h\Rg<VF<6D`^oGS+&pLc+n*)9QuJuB$YZ5&TQlM@L?O5-Gu?oP\[0rf;"CADp"TL^8_7,n*HFnu'5YGe"tBO"1(5e%>^[3;%MTA2oK(_5smUBtm=I_P[EB[F&`+VZ"hinfiV\L@KfFf`hs.U6f:UYkJ6Aot!5;k-*r8e6PP)80V]XucF+9cB=MD&XPLp\_h^[2,"%SX-B#K'7X:*sWBSP0&S';*M)[Af#&`[N=G]Yi9LIHCpgcU,6L3Nt)NhPc95W-!)6;FY!EN(b2!oJN4NU&LoB;;nRi+)f1J7/6$04%V,^,hN'/AQT+UXY-&.$;:]]7gTR^'S.`*JJ2c^n6XDhKFL!Y17Oa&;breeB79[$^?AoKAb9-'dO-'[YlqFTAKX;9"C#YNTs(^^_3%5gPOFn!AmaL.9&2ZCKK^9hdYAbbO,>Y"Nms;!*j%p6(s*baX(!JD"@0>7-[TL;_i6,4u8s0]LiV:pu!"P.R6Qd8>QJg1cfGd=k"H%jY6Tc1<=\e_MZ;6=#ol5qSf83a@'Z[&h"_A>"Ko!:8@1M7`M^unp;0"o9tRjYU!eQ).C]+c[B;okP6(]7c+TN3HRUO/Ap_^/#>50%4jmpS<(][iMBj'"B2haA<>Ae#&(E\ZQ'?3XP&kA1qo.mN*u1ILN[g46WY%DYobVHsi?BrCVL&3[ZR$p,9uY)!E\iY(&sF=kAid1W%!>L*j7QSs^*((>ZM@bW8e>-Y]XW:c<>7uSQ<&BMsgl`W\'tdl\.nW7EB\@pRDm[_TkrQq+r+JuQf86#?$pP*JniTVS8Qk1'U+,QO%+Vn+,PLN3t*+*<ICVI62TM.=<Rt/F6gqY_Y"@5,p<QLYf#bjssX,fk@7V`I#3?Ls4+IN]_Ud^8tBbQ*TM37$;eMtqkm=P)`BNq%.%;92\-Q)]Z`c@Z[f'>.d)X6MkYn;;&o6TXh-<2geWO/FHUC*(:1C\5*rZdr,>n%u0=/B3h.dED#u?g[,$Ju5DEk-E.`+GLW[[T;LR%<`8?cb&Mm:80PoJ:`L&qdr0nuKY_p,iqZ:8C:'7kA4Vu+S.[UB/.Ck\&%V%+9AsZ+hqQRFp(CirE(39Z0R&'B\R+8>aNJ,tKeT87%'M35F!I["-bGf5J@rS`$X=j_p@Mk,#6A2g-adVf+.#Jcn;I2!MBBtFq"qLZf<3p#ISS9\/'eS7[PDcnBOIR!)>hLH7LnlO\H&7ST%n_'FQ:@8P2j&Y=1#Z:lQC:Q$\k.,gBo#k8Q:bnmdaVP_iaB/sQmd\G@]RX6&_A-6[I1orQip5^(mZ&(*F\TEN(`Qd^YZhZeZJ\Hr%8u]$n>J@+j66g!%fCBKQjcA<9TEQ&H5"[O9AY0[L?;,mp9aqd`feFne:%>hN3JeZ&PB([>l:OI*17?`CbTIp$HoZ0S:i8(]L_k[u%,^_0),6E^4?Uh)&-o"/)-7bQB',RdlLG\oi'LR?418F`W.M*W7ooFE\A@_QF,()35`k1^_?%!Y2?%;JtoMcPTdQBYW6!eT3]Zhlk%dbJB<&<Y5^]Q<=1_+ZHs+u7_P(9KL<PLeH^;GP>;DY^TZ\Hng,OqK]+Ab&/hC*,`Q.q;DcTuop2dSZu)1mMQU)5iE9a&ZYN&YuY!%b_<!<bgGCY/iEBGMK`Ck&fN-;^ID6^Ho]H&!sI!U-\mb01SaOQ;pOV4]L0q?iZf<h*2*F*k\>s.crH)KQ^(\`?0)_"=]*l[s!TPR%qp8>pkf@?A8``kf=^&'Z"EJ[H9"A2YdPu?V$;'Gr"ls?R$H/X="S!Bs)7iEPqGp]gTrZ-&6Mq,rNoh2X9O_)&40;,u''P-TAe#'L%<ZiKs=ogX.'d3q^&*lj_\Un(;.!Ckd,=CoJMHqf01e?s_+"bQZ7R=;['u\.q7\GfJ/__7WKig.f9Sd;A#]f-YV&Uf!/8("Ln\L3t%$slAa(Z3(n&41aEXU5s-8r+P5,mefq/shiZ83+Ubma%!5TOrJ6A?Mc&W'Gh13<CLOPq#:Lh*Y!g6$*W,'[fPqq;^"Ggf,B.8do^F%>4.#E$1nmL%UZ=lNl+qT_1'Dl2_bU1VN&JpWGcf!=)#$;"<IfJMKG[aR,j1aYlqh;9[TmQ'K7lN3I6t9$2=fM8$C?2=Tt&;X!D(p%I7bBk8o2Y-8GK/'p`^b$^D\8,r+ZE-.NgBGX#PQND=.7H-PkdI!rPhOSHM.t+MT3sH\'kj@lb<qOr*=:a8lI^7lO/&WP"dTVe'D;%D)8@\;b.TkMU6?EbLcB`&hoF-%2sqRK^m%RrW?/VU;Z7m]R[rI-_3#uH_Us?Ld[Y+AOhlqZ%?W//[@E4#MntqjSVgOIRokG,P0+S%QL@,))8F)q)LaD:e6*nKdB1Tfcfr;NGa(+\=rLl^c^lJdW<s51WfXD<CBh*CAN;!%eqQ)5\)5E7QLb#pFLQPZ0+@Zo6^j;>_C//N%j=L6ul'mZi4,hSgB<Krs"be,P\9Iie@OU3>PdnUbD6W@lp^Y44g-aY('XF-;eIJ?iP`%*\YX84kAOD5];G/Na:PTE91s%B0%`8Rk%$I:/h2.+X8!AR9JM@`"POKWNS>>[E<>G2(k\)d53=\Z]6!_4/R(ZbrHNEM[l,=5aBBOmmtY`1HtQb@Z?0VL:n>4L1m":"\I<Wr6.%#NimsbRPPP\S8T(LlZOh`<W#>GVtkKH.-p.KrjK9;Du1!h5BbXklUrCZ"WY8pXgAQ>`ol.G0Pf1'rH#tA1Z.<]&<I:s(n5*,TY`2%cnDlf@MnN<X$#/`Td2FNLKaUR]2Fna[B'K]]ID4r(@]:.!7@./_L+_:9)/[.=ar8=7hcFE.k*2$$Q_X'DcXld;@Whpo#3MY!Al#t%RMVD,mopKZfMqa59ABZd13eFhMdO%b`u!T%Rl@Wn8XF+knh(A6+"1,F+i=hFHR['(lBa):3i=a*PDg9j;36o1.eE,GHf";(GoBcT%-ncep_]7a&;-LUW.$pDrpuJt@m-M1M[TH#pn5REQL#:YE`hkjbecIX6+jWQ.<Qb3h4PXWU()`(J,Tkt[6=aEfDp[HG%'n!bYYgeW%UQjZKL"G()T)s;Yal)ZC(Lr/GM3=_3KGfmBL;/5&<ZDhp<QY3a13Amhan8;[nEG:QN*dr0\T#\7[p+*j6_p^>^G;$0U2s/[#P/0k%r/:[Z<M]W.*"%DH8[s0rLFVCJp.=>@_A(2U0e%k"'?7'm6Gr)OlI;9jns-6F)04i]lP+=NLM!Rmk"7NOGSa%6N_!Z9EkNsC(P9iY%%\J"H0F8+=#nKGeQhLm0_4q\#,A<2s%m!:a2+KSZ7(]]bpPFOmEZ)HU%3V[G?T(8!:$6P+&,/%]HC*T,0;EpFYk'^nf.1ATa%uh!%D*s<o,;K/N70Cd'TM#ri3O1?#\OmMNPu3MbeFWpbYmUsh<(sm];qrS[.+1pPaoj<Vd,;3@!(h+U?9COeG)MfH1oWC\.^'@]dtY1G%Ypl?"5-9)mN,#GGU`6<Fmp[M.3M!Dk^uhl3Nkrpe(ZY`5X]]@Z<!o1f6&5rfOPjfD'HBqg3PgYcFYia[Rk`c)nrQh<.TKK^GjUP?%2cCE>gKUQj-*-)d*pV4uqc$1jf2^d]3ngIWfP'Aoig4*]E&+V9iq*2\)9X;s,$HPZrIbH@m%R76#'!Df@`B>u"=Y#P7c^)q"=A/c%)63eF=a]B?R@T"J&LiWVe/%S_K9Ak\fi!tSf,-?0M_-FBfJZnIZr>fsjX%8D)`-c#D%(?Q!(6pJD2bqEGnP9@$>tFTLnXk7-:[?Y%Aacg?@_Q"Z6b80"K/+GE+q\FWcrq/(c.)$l8[9o\Rj37.;3H+)fG4&+7jQ`3i6boW>5cSl%$D`McQ/2>f(fFQq4:TWnpH'ra?_!g%(FkEj,cYf08S>]9gu8E7E333:e*Jr`oHp.1"ANmEBU%$$`)KuVh>u,``Va*m7b<T4c!E2GL/W`g;U$,"Q$#Qr+RBIsDA_V=Jk,tU%qc"b@\.tquHo5H9AGh"kfjB_1]YqF<Tp[+FXQiWVPYXQe3ZQ0W7M23-lq"XSH.3F+N`/G)%6d4f)g_Pg+3p;tgPn2"E<oHu%mr1.%-p\u:B(eV48ZBYoY`ZnuQ9&`:Q@YO8i1R"/B%)J++^gCMS\l$gQaCCIjTHc1QHBAn]Wb#>_?E$;k#p`X/64)G*,G]g\aNc4/%ULZ%3i0E(`t1pBhlSl(n.QL3ZOR2uU1&Yt/(XsH8YaMqFH.A3,RV9@('9\-Q9(HN[rP&t;(#YM;i.BJJ0LL%UcuMYI4U(6Z+MD^?<F=e%TN<gA2sta]^Vfc_#"tBUg.tA:"EBWnc$3`_5=)@J30g8^*U.DT-)*BU9:hq98r1k[k%<TFCfDtYOlNg19jS6GN6.h@R.pab!Kr)E%HusoeW8n<,UJ_cm'BS9&IMr;KM\&U5;$uPJj&[(B"&SCgk.J>V,g!peD:0^;79%A`&DhJ-3QE;al_L';"LZg2RBoUf,k\XaLR"'d%*sLCUT'a^X,g#640i_hRNjrjb>g1fo7386>1is@UR*mkIML/=hP:bFt,m`=4^Re!l2-%f19d92N$^Id4#SLL8=Xd,Ns#nIL[l&#q%,EQ[IEL&5uBk^'ebJB`!k?)eC-I'&cgq1f#dStY<JWK@I?eU,gA<Zf<eeGV_%T4pW"2IWA<D*uG0p4sHqd3BubK1g&\`?'<X6EI>%(MT6RZ0/->qha"b.<ZE!OO9TQUa:eqI+-Ip9Nn_Po2jU#BRYJI7Vq^YY:b]A[2]@#<aNdY.Q"'tP6Y5ud'ljN_uh4sNEbu)CEbEm%eEI_@A3$`H(.XV8R*IJPR7**nI88HKQM9ne'-.jkn5=*qRA*W?KMZak$iYlESW'g-kN&Z*]QP%HbmMmG1812Mf$n`R+ME[,T<R-6%%7>h7l]C>5pmEek-K0%Q`oZ9ue$pG*Df<dnV0>d-U6)%M[0dQ2[Att$)Q]%r4-^FIVs/L_Os94Q1F]BW+/0adCc$*lNJ59mOWc73%3?^!?Z9k[Q8+?u'%kGf]0gR;6^-][=2I]"l&9.mWAN@QI)km<^,s=XD\7tHTgN$G=5R>+M16Ml4'Aq1U%s!Zm4XI8&:3M^4J2,GS%*d"s10NeNIlP]4J0R:-n1EiiN[%uao7[*f?lQj>\]#-MY&\+)uP,<hRc6RI^(QF`'Z*]eo>Eh]?,bYY@s+C`HF0KBgP[nJ;A.'=\%LY/c"[Ce1ZN!ll286dUt006D;9Xnf3i8!o`'kYK<N)4mWnKM(kPG<B2ef#'1s':4e,p?pQ542*qjE4pPo&+94Q=EQSg.jisXUAVB%?Nf.&O&[J4Lg&ELB&UI*-(<.r9OKE1@T)?jEKdZfH0/h[eVqOf.&C&o<fEsV8BGM(Ma*V2H\JIS/!c+gQfAs&'reQBi\f%V]Qtj3%j4dL^Bhi=gHh;)4]et'1?aO7-:uXX.AJ_>I&kGKJ&35TU=0<JrIWreX;'mC<g<r=2FGR84.D#LXMJ4g+V0C1j=QMNoUcb'/796Q"%M3Rg%_J3+dbC(:HkB6d.4?b/,OFfV_=q?a,\XI]96SCG,afG.DYa"f.<N*VEbPGiQKA*"j7M&`ZhIDCMf^!=*\YKfEOQIts65]Se%&6d9nH'GIF">IecYuVAZQP3"4]bZ>sDlou^SW=:(1*XQJ&u^dhOn8AL8Gt)V`g$pb37X7eTQ;_SdtD`3-safGT^h93;I+6?BY?kV%71VPD/,/t:FOa5tfi;L;cEAJ2dli;ILW%R@OFean\)hREBgn>]O=$">ittD!R&ja1Jmh6-K\B'nkVd/W[D-]?UJtn4nOarkQ2uKU%W.\A"QEe&_Br#EGK+OMb.cgg(h?0(e1kT4#&VC;$=9/kBGtAu/)Qj6UE]TDj;fS@bnH'JJ`[HsbNJ(;#Q>jfS,(pMr;^Hn^_-Drj%-)lP6rT/a!Y$4kMEJC9(_4Uij'nW(dX`;j.,ti<BJr)-*7M)\d#>NJcVaW6>q,k$s]HWP5@n&`@RW,YgJQD>YXV3I8$&t-=l$?S;%q:JV3c-j!2,pFU*HsF7530?^nLJej.2O0%rPt)?@6j_0;UJ_hp^^J3p-)j]a&g*lI&mLT^</'<>#t-^b]Eb!l2#_B(9%qFLQMb_R%El@(Vf-JsKR*>DjTM3)8X0De!99kl4r$J7VU+XbZQW%K,Oq!n9No[6QQ#%9D#Vog]=nNp'%b0Wd&.TPr4Ao#UHSJnClFa_p:r4k2%=(mhb+m!6jM?"mb`su7%&)mb,"=CPk5tiL71kU0[BuBU8PnoZ_^2?h4kWGC&bK1^FIBA3$>.m:^1'\t7$H_5HG?C#OoClN<Pkkq7%<!"ZAW(S--^4%KiBg#@gBWO?fa8$=c[CG`J["X#eLI<O*,QO&SX%&Sj`/,Z,WY"6PXV\*E$'^\j6n3"-\M+tpZGPN\ZGE2n$kH6&%`'j%Uo/[P[K#pKnd`RCqYV[Zqk(.FK,<JSgF_G!L'>n^p2dX$,-l!O?5tXY#+>353UKR*o>0C+T'99.`iATP$TWsUp!ZDZ50LR2f%!(!>o_D2RP=X"tp?fZum'pWR=nmPea*Xo?BC1RPVMM3ZYpFeY]%fm``'VXlI4_*kElUY>d43Jk@f#WIN(Bm*_`a6N0qoE:?&k3O:%!e#5^(-7-DGeB)8@r8>85CaIbMh4TDhS<]/kMRhf(DS<6U]E;9[Z:^VhPM5a]r^:2"%/J)2Hm@&kG:jl3LT&nYnfkG]FaXk1IU5a%-_\3PEi";`lS-j5NfHJRK54Pm)Bj9LT9=6OU1.$WIOdINRY2P?6Blm:]d+ig;KSagP#7;3:&.=HG@W(eB-eTm`?gLlN'p6/j(DtY%:>a1/`$q,[WLn0<@_[j<OCHFR@&AeE"C;@/CrAh=>ET]^blnAN[Vc4nJK#d')\D#j95HE@Ko;&c.1?W%Ioudcd:&K,9I3-gUhZ@f%,8B\L#LC!>#fkS%/pO'lFFfVLb8P<`0$=t[?>6Xi/)]SW\UW$1QT(`u,AOq0..W"U0EC9j?I;XL8cki8S=:'%hY\o.Yi$h0i6P"[%aqCb;(hnR/*<\T>ND!K0hOi'3RA\:iWC\_BR4q);q1@Vq&B`ZUWZGZlI8,Yo88'1nb!2"9Xn*E<fb3'1Sl$E?U=3]<dEiIr(AVu[%?uduC'St_u$TWhbYr6R-:e&6"?<:gX9hdE^8;ae402Q?<33S]iY&P@JLJH:H5iK['KF0G6R?(8i74/a:RTOgTS!!o<:!A5a[!knB%9*XFih_#bL^`cUsZUX'98L@uDB["Xl3@2!HPAO#kWqMrK]$E,K!V&;cg^L3*N=lp#nQmrtij&6EEq-tZ#;u)H4ldV,9&!'J+oX=%%M%ZUX;e`f3$W^/?&69&P\T?bZ:_rTZpfZQ_SqYlYh^9CQ;LpSFf["UIE^sC(STPSB-o/h6V:0jE@-n,W%W)U>FXF::EG>*=QQ\K-%j;m(#jfne0,\g>R+A-PhL"V,t"Reg,$PR+i[*"I5&B;4BNm"t^8jTdG!mUa\mbN&.960X>-`D7A2[r:[CO=$XZfe?bnGiZ-fS0p@%mu0`IXUund2(5kCkjA>4r'$:K1@&gbW#Gn>IMK-e3&#Ra#)T2V'&kX?M60YJ*@&4aPM3PVi_e2jiR.3iN>Ibq*g>n(9sFb#_-)h,%nV#Jg6Rd_?/j]48"'3I?5m+/HTPA/Q5.!E5b#f@Vd9A9;'Iu:8gIcZ&1a*6.`&kdFDhKDpRk4%<h;=;'CT%$.eBB(jM;!ol'hJs*%ItT!>13!ieUA:0b1jD"g!?6ud_2QEpJD:=5:ME]QNhYOSlVYJlh=0YcK%&)XnP#LiLotCodk(NP02YBNSp;JieRccdMU!A&+Pes1%9XnYj+q/4:<(FsZ_TO,l^VbiRY=dq\k(>jM;U!K'aQ]/V,cp^:ATP6kr[']B^<M+<@LuWdJNBGagtEh`PhH!Do=3(]IlbG]C,sp1%na]-RY?D&<KJdS]I.G.gi9n]p(PnFE0amd8p_s[D=,!@>P<lrcn6RdPd")!F+<'2#Fur9gYo5P+*\=u)i1b,aq_[n5hSa9="nPb>%S_-LJOrU1j9`!PqH.1[cE8P9_l'3Cr4`36GE1qYEjtdfEj^Yhp5*AE9fPr(oU>=[YPW[3`d5#h]oN3+<%BjX1AD@RT:b]%4i:q<0%8^:=i!RkL!X2-LVKoUq=)I4-8ZS,,G^+NNA@GX`r[hK7S?%H-@Mp#h:asi]`0BE?Y(=G)o]\O4!"EX#P%_,q*REC5<hmB>a:U^$q%XeNn#=u`%*hg>F"e`pI:H*:2OX<Y"GWAtkhYu!al24DPR%1fBmlb4_5<<tUh"flB%(0X$+R=DLZ`Rm^,a.]mZSt980qq<^QRj70$%'<_*Mb\LMrL'Fl"&/HIfXNH3u[eb1Vl=ONZL3<nn?\:=mppI_^nIm$/q"Y)U9HXZc'=&Af,K-t0nj8=#dFltgXK5^SoK1$d<B2Z:%Ko][O9.qS`0lJ$t<LspFpqAp).E-Fm+pj<H]rSb9Mcc='WHY(-QN'U'7Ca;rjomliD;8!8hK3Pj$oj\74ju>6IfubG)`]VeRcl\4%JD`?3a6htRDEK0YW%p6@J:jN:pY28O.s,h6=u8mm`C_>`,Tjl32G5%B'obJZGk$r.?.FqSY%(To[lVq;'q7P+knN=_<2qTKD4&)P%(pd3u:01[h&]cB71%h8K=scYR`_G+/%U/1'[]<j.)RFb5&saR]f'$_lMW&;61P<,sp1h'HH2PWlSO2_\^_i+a=9hnMYJ"9op9IOD%YPfha2_\L=;#%r4QN^mbTf5CEBf9X=[jPe!bk$VR+8d[WGHp38#.7>`P)bYU[1pmeYBsYCm)iC&g"[*Knn<,ge(f_eGH8^d0(s*`%ghFeO6]e!$BDC=3r#QPS.G38pHdFXb!OeO,^9QUBGE%0Xj3:M,3Qp-I^t$u9/7<gMSr0Kt#(e"r5Y?;d[Dg?2B*$b96(JN'LMFn^%eHQ)i3l\&]W!lQGQpCUnYlP&O=l:l7>N$UJ\3aLr3,*B3R3>gtC8mC;?;cZX#3U,38^d,u9uH$?-t/&&8Ju+A9-B-@'PQLCFTnrj%*I#)@$-f[0'=qA9gRqQq'8%C>DWuF#(R.[q7A#YKZQUJ)9THB"\&(VROA.5;aNEE]:lU`l4);Go>Yp8PXM!*PDeCS+G'9^nGtH-_%$?=pjW,h=tU?e\I;dJo7;:bs5_mFI6\ouHnokCd!!uE2GU"Hr9qpEmK=UUa!Z2uqCXcW(r;bHCnnTtRf(<)bfM_G]G^,@XO^cJX8%qtgqOG$h=d2[dsNSQ>NX_7so5Kf"AaB<(O&=s':8[&P+GcNZiZ>ce<a]Em`"b]6Y,\r7F-Jl:.>E/?Z`:76X'i`3<kfX1tI)dUX1%DE4B>C-E-uW&AV,IauBHE5Ft:Q,hX`&thr,!ZN<DE7^AQ`So#Qf-p.e:48gfRg[l&0<"FsUGS;cDAk,XXeI=1X;q@T1ShkcA>0`$%Ms2]b?#VSnY#F_SSKH+!i(='<!5eG8mTu@nq#jS9<GfEWg_]0%Dmh)iLNDLq^&N($9SEP.(Lg;6`P"0!V&JkWa1ts4!\IO)=Wc-#%bC2<a]URN4ZaFiC:icd/L^s7h2@lV2[YF]VIAIH\e%h'm'KEb:gES?P$`?F)0e_<A!-71iroUqn\Z=#ZIZ)1J][PE?.I9Y<Z%!+s%bGP9,ImUaTUXNFV2_8@W?cfI\_,R_7n)4<t2$jaPS+K!\EJl/LfI*IU(Td*iF'B%;RP9!%TEVXM_u;T%=dJMM1:+Y8mQ^\KYNss3%Imq6C3F3[8XA4i<`tPffP62^SHDAG.*-t!()^.o&/h#(aA7g>]n<"j\g;KLRT_\j<-[1tKB8J`?ZeOcZe;-E=`tNCB'>E.:pZDaC%q]k$"Mfur$=M,nfNM*H(mY:)hP#Pb,mDRC/QQ"!+6<Ebd8p8EoS;7BHU8)5Y7bt>LV='T5De/%9HEDkQe*-.32fU"&^:)M$4U8UC%^Q@Wh^-g/I$qa`-&(B,G#BrI6WT!NiFf4S3"92IS/O*I<#C=_kIXi[&`A1!PO<E8.NClpS!)3:rPa]nl&d$aJ]0.lJW+hQCJSK;W%.Rjc>!+s+dm?TH^OE(SXNqZG3Pa`h\&e>6hd&LD30>P$C%emZmWMVBu&J0_5k9IGl;:\Gj0r26!&:2&9j#Yo9lN4.65LrC:q+!N[%V7@WES,$h#q,B/+-0[,f/mN%*A7"1NP\:;6go\6$68(J3?,c8_Y3$EiS)<=:n-4^`bi'br"=_I9+r(MPEX<pu-:eI<m$^MZ7m)nT%MKe*Lf3kE>Kc46.i8tmmdU9<311)E]/V4CaQ!B#MK<h`:Z6&Ql*nPt4%)(YL\rd4,Y$Gqa?sqM#+&H<NA^!HO79s@R4t-7QCu1c#%k0i#(s7sk,rqjJ0rNC_M^]*Zgc[Y]`J,7'ds8;9A]V*"Nhm`OP0>IJOs7GJ]s6`[4qs?'9qQGDKp@aOhs7,RXr!-s4Qf%emX5X*S%qWIN_X'TB7WF<gh:XBAd8QGNh.^F(Ji[_a4,B).QfM,F^AatUCIEQOU'D8IX;/&D>/1YBJ`4%jDYhNA8oXqfmo*pG8AI*3j1ZZIj%TKI!Y#Z#uo&ojEQA:Qqlk9a-H#f[<CC*/jEiH7l8*#SLQpCZWQf->[2F+*4/4<NsI`<''!U0J@NZ=gQ9!!&4c#IJl_NZj[B5\%"!%25FY/_QB9=4doZZ8,1--$I-j:M!GDs'()P!KXKi1VqcIhFoL[]<o*4\<Y1l@+*35O4YUOgnu]Ob<LZ)<`dDn4Ugb)+I#Y@11'>OL%qNaaU]T/E>JXA\A)F&Z9)g=*+N!(^!:cJMbNBnc;1=[HEVVSPlT@gC#*<""V#/jA4PKGZf+\<!BN#pn=5lY(XV9AMAh&d3o!Z[kn%q#(1o.\>i8B0Rt0q70$OP'NQTJRBh_XA'"p.aOZJVf$=+*F'.-Z-=e:qh#khgl+`b^W.^AAS?>u;TD>.l!l"&PtmIj]gU41<;C79%f$hZO32j\u06Ki@X_;?Rcf8MT:AmZflHQ5MP&dCi^R?:;Bu[A"o!.Lch@UMr/8lF5gW^#Sk$Cd*/q<<R%*nrMgSBHF:7FFCqb0Nq%cEj0&,2iK]5YN0rZ8Na@`(iWARpoVoL'_PC*/`>.;^;]<RCS76)Ee\&(##4kf"O`h_QpJs']V;bZ#c];Tnm>p1.ijF:rF``da$WG%!ndSUKWZH4g^Z^j3q3Wr,W'MhHu=[k&Kb4K2tnD"['k$;]:V`'bE,LWK349O;jaZFH^F'JK6/64SZT%L%m<H+Wqgp)f9l0bp=3R4%"Do\>9::OM3A[ct'EmYs.,g"Cl^buk'?&.%Y^\j(8Q):n3KW<YJs8[n\a^5?qIJeX`jJUIQ4I/,S6$i']SP=S58Itn<[B>p7"apf%TQsXShO%$D3]:s+HfDZM^OtZ]N'7ZZbI*g[T!JhcnRW9pCa[-)Ei_HZ+F2S<]No2W:@b*PV/mE@>]'dp07V4J7e3`8&+ds2_N=8j%SHd-h='!DgZYq>^;".0UisBnChT)4Kmp=c_7]7JKk\(c%WKgb%$8MuqrI]UY-dgC\$=;YEZr*)lIs5t-d^.[QS7>QR^N\g0>EtO.%!D.<`h?23/2a)Aq*SrPn7^Xo+`lN\p8PlXZ_,R2B0A@Xi:PQ_1F)Y<um/$m$fAQ+8SG%Q__ce=?#cD'M@]>VUBiN%!?V%H)DG[/G%:"F/<$tCpVE]&8l`r<eE5/"+OJdi4sMA7PA#[J#F##9bLe+'"4/LF+5$ge\FW?IS=c)V#$Y0B9fF#ue[9m_eB6=Eo+Yd%@`*'r&*%@go@qNlF%"_>7`l=#[0GVYa(HrY%+%70hJtP8c<iJ#qU[a5kcZ*a<B'Z/+e?c?C"<=`AfF.e/r'2UaXh</RPbB1,PZ.+8Nb(hre>%"#A1L+O]k1p2jabpF!nIWIoG7rVcfiDDqI/Z=q6?%RB2kcL&'R@Ig>M1!t+;.uQgM'<btJnrp7Lipr#(M&I?@nh&_N)ojNQjCUrE%?N!+#_?h'Tl@-48OVEP^C<SQCUQaL87KlqK[q^,K1nR3GDraLmhh!5)q(9Xt8FTXHmh^JHo=F%hd%(T!9-f.5O!7Enb9/@GJ)7`;%%kY3[p[.LMk,&s.R^%sD7Ce$GKO`#5a4A2.kZJg1Zf/K/1%OU[TYdSl-NTiF2&?MO60]84!<Hod&tZ+:f,64Q?ZYGj[EejtHUgYF%(q]/LBHnAoU<b\--/)'F5+,Yf"YUUqn`[MAm7b"j$gPn_s5",u%<#d&G:m:,YUP"#%[!8%R[W7-lj7\.rW%5$&d3u:$naR&"a$T6%Z^kY6#WKLlT:XVQa;/=>M)ub]9K,4&XbA];kn50UrFgEHFp1Pb6hED[+;@;E<sS-AmSS'GGIgu:IaP<14/^[)fH#_"_5=Eb#$j/0%X*&i9!\quiV)so&f:^fsC];^<$J-0-AX9,9aibGH.n`J`p[kGtZKhPj1gO8,BkWm?<p[2oJA;N@=ph'N(p8[iQA"mY"b[91d<+BY%*AVMCW+q-`<XuhAEk,9fNKW_+00A\9oI5r@=]`"m[-LF:UtIbQ#<8d;/,BgZ7#]HGFMnBKPotJ#*Z-!dqLF4[g'h9S<6-<@=TYJ0%bsGc#n:e)9nOZB!I6`lPBX+ppq@7]1T8gmsBm9[t2&u#;3BV_/$jq3VfiSM#]FZ<FGJM\E[>H9229:G<nX$,2U'u&5pg,a_kaO)a%4d3ua[4Bcq.K\>_4kc=(?MMqp+JVa+FNh&L/:.+E7Q'Hb,fl;`H9u6,G0=pl>kXi=TY>S7kdjHkM0?TDn[6W0k$ODJ?L*'ICSS7!%KoBj*BOJ(d]Fp&igJeONibhq?\K1UEL"<3:>j(j8/kK?gaU83bok?A1+i;ecPb7h6=GoBlpEOK-)YDF(-Ol)\g23E#,_G.\D&qI8%1OZ[b_f-kU:mLPD5V)AGBJQ5B"f/c&K,GQe2.HcE?V!L+'>+0=gH54o*ah^%4nnp(B/i%t'`F?b6>En[XAWCT,38DHppqd^!=&Zl%2`lNIBHXGkK_-gX>X:_*Z2L,-!:;\Q'bB"0h0<mI8X>+UM/[qP>/M#?'6/5D_D&6a[uE`%(ZWp1rUsgU&^bY=!W1!-Xs3b"&]nMR%9IFVMLu-f;"Iai-OE#2GaM"2n:ck7.ERl3:=>XEg=E$bPLK*W!nB:saK0++c(XjJ2r!FV./Fd<]mO2b(@&M;_28qp\-+IGgX#kW2%\LT6=hXI9M1#U]X40h<\=RENOqZC*t?,)pAn+&NqjXohL(gaPt@IktfNe(dHYk_MM7^H_/k\BRO"<=7Yl.C,tl0Ph_#^R[gltBu\%FQ3bdN%jcs##WfT+O)PcOO(;"Ylj!/9mrEJm2@#ZBMlp3fIV]N!n+6r*e#*R5[O7rLrIS&g3DYBgYEhgAe7L,1h!g4*p+2Qeu3*A%[?VHS]04ncCjboSZt:J%/\Ub=:pj3+nM_Z%n2;E1UET=p;j#,@"goXiq8XIQg-*'"b0LX33"62RR;%%#OH*AJ.]iFKqR#7PH3@P<%ca(1U4SOgYNkl_SY8&i0nSQS=Y[>\=*!,53:C"^2I9V?g2MC4)hWuMTRi.dZDh4FBWYK%dmJLqAa#^!Qo8e&f$^b-%4!&0#+eRp2%r0br58BueHoC2fbAY9^D'0hA#JQ(=`aR[n4:97u/8M%\qM#?ki,s7l0DKkRFr)ak?r8q!$lsqiYREm!C_'h'P?HBZe>%@Zu#D,s3%U0-TRS\?mRS73_r7SD'V4T)*[&e0K;:h_S@C>X[[35A:O6Q65mg6]<qKTiN?3b=it<4gn1d:0*VI>?F"brRGlYd3t*>c,R*4G!Wm%Ug58olGDZl7[rH'<D)dT5a.)36Kj:tUn_3!8#7f.+Kp3j+>d'j[_G$lPd;"dU055J'T%q3r"s`jZdC[NHoKr$0V^q3EFrC,GE><V%2^EfX@<)*Wc<s-j93qF*=r^#o+2a[o*j+erAR\-h@1&alY%P(tZlS\=a^e6D-RWh/Nco3@a2\8PBf[*S1$M;j7@SBFkJ`uS,.ZOY%5a:2ddd(C5-TOT]r!]dQm?&^W*%<>&J'_#mH81GA".5S.T>+(6*k_HNdpe3/gWGJ+[1%,&'FPeePKGm.V:kL2[DdN0]IglH:.i]'%e>pI)NB/0d'A,mtm;S":="YIBQM68Bc/AaNjS](J^W"s32B+;XVe!H=oq;h3AoDb`<oeru0+3NFR,TtZ<WUGn5MEZ4_I_+nE4u5@%"o.]MA>>&;bK0lb:,]X$9Zj\-FZ`XX,q:0VJnPBRS4c+ur!+W![CAi27m!ipE?APgFIT\uEcm>s*pr;WA"#c:@VIX^pN<7J-K%@i%+,CB.Gl2oq6RGSFPqiSc4sX8[F^D!]5T6ao#E?o!XY!KJ.4\tt/DX-cQ1?/mI#(DbO'<YS(R9#J8Pb;'b2ket(R9<s5e@MY'7M^c%.e0sgOtsSH>_R"E7GuU,j[gqrCY`';['OQT+Y#;/U/F8_1)H2nAE?=2VWSBZ"l5DQjJtp)JiU05>U@$q/:121_3;C>J;(.rS&+uk%M@=#_5Y6\M@)pgEFdFY?@Mh[SaV<miO*5B2^),H?F2TA-))liOh0a[r?Q808]ubbE]2J>^^6Tq7WIqH"2cKUn]#hS2fcKI+o8r$]%fTrkkV57Ee[AX!K'D%\,hu#5'SYW))F?9,;"Ze2U=%GutTi8qUV5;u-g/DsWQA\<UZF#j3iHY]%3NBKR/1eK-8J[W/,O<Uf.IH&h%/dA.1PU2qti_mS>k-LUAg2q<P:_K*u6gJKb\.$a'V=8cnC'\!XHo@,JV$Mp9[KGT%K=2S$ZZ.3FGEie^f6jq5@0L!9P[A@DHia4/%EB1dt@"eA?:<;2r!]2<Xh,7<+`905SAf\#;`R.H(?RUT=L!qf!q/<QSL"c]4/@;JaW7tQ4;T*)#TIORDQ!,Lk!uUYQ\mU"1)VaY@%p)NdP3k$&obp4=/@>X)_[+0M,Graj9QLlNXh7QG)d(OZuT0Q\`pBQLX%6>,%qesYnC#^dV#/j)HnWhT6p#?Il:]S`))@7Z"la_&L%@ORQ!H_E?h?@hk]C,TOTr7)C[)@C,Er7,E)S!t.?1W8hk#6oTCC9r$7^m2lPlmhr,BA5`_f6oPT6*#g<m*/?\X:.E(:K15WR3Nbd%>2gN-+i^'HPa)sU_K'5p1kou`(2q>lU?;OD[R21lQHC]irIK8"`3)#.geO'r.$U%]hSHA*\7Gd7WVRs*9hs1<;lKKE/J\9,%:+*Y%M3/%=V0`N2Ue.T6c3YC,k7;6FKcOu13;3:OhOn6UM8ke:0bcn9OcFV6;I:8_@0&(6Q=;'ai,he"X^$%Eo&api^?dGoiTTu?\7L:^%i/h"mc-UKj1P<r1Y8P$b7lf%T6DTh%k-H)-DD`JB<J(1@P?etX9a[@mJ3`-hT0i/@.VYnk^EL_#].lb=!P(dc5uqA3F<im\n]r`(%d;j'N%MMRoZGJq-[a1_@lQ1ZXKONsT"GRZ&>/B1-^K<$'H9tfJL_,BhW_014;J)4aA7JWdBh=0_C"I7Ur6KO)%<R'DThl=V#ZUrV%]s>N&;>9i^9[Zb3SS"qK=q1qSEU2"p0.^$R$Sk\(gN8c+:k^).Tm6aZ)2/DPf*%53'BGK/!CF*++.uu<A-f0Y@W][/aR:!"n_4bG%)!*r!;e,nE,>rcU,+s9+X0:@5L[T&%W`3C7pnAk4W)Sn?30Z"V%)Po)n@R.BW5GQpMiAjtB]nFp?ZWNuf%)Na458$&n-)$MXYKf#%++5^WIC')n`^#^`R&-L[8Ju'7=A8/IWPc#GJprlo/GV^lXii?:?]Wt;!'S%`TR.]TYi3qgLg_*!N]u1UUq1!E;9SflZe:&tK'&W4%B$(*qaXkeeM\?-]<LkJu^/4]1:6DC"hj91.'a(<Mm0b5,e_AR*o6P@n/[]o756NFnNSu5;<gb)B8[^Ygbic9f>V.ZFm:g:^FPEYF%]4#TE+Mlo<<r=58gL\V/Lbi2Td[neP$;5uJpp'mqoAhN63r.jNTNR>[Q%8GIbok:CZF8qKJ8FE3a[IDNZ^m!Go4r?[rT$S*Lj")&%2CeKuYAK0+r2WAOFLI+Tq:>]=\N1RCZ7W1f?Fao5=jIgPKd>Q4G6=u"Ct^V.*d<Wa6A9]D1J!WRET>mK+/p:b,3a?Vf@jh.kTLQ2%nXX&p3&qh4eX$t\CfCsh%K6";jB!0n$GHW/[H,U?mDmUj>*)i/3]FKHJ"/5rHk!!o4[l=f.m72Qk35PFGi/0uAiZ2<<fO$%EBk*?%F^TBK"k(9/5pe?BRqEp?@821rb\#Os)!u:f$%k'l8AlsY[%(Ql#@kcW5'chU<t,!S8I3N9[4eq3e`)f#p)h'cDPQ,o4s3Ptih<oH%)N3sK%Y=nmXAUrl\!tHuKsRQ!U:'"9[@6WDYCUUk;bIPId]=g,Fud.JI50FL0<q,oJ,d^<EI."aQ*59N[ls*%(]m$J$UaPAkLFHR%!ab!KKM+\:MajUEVg1QED'rF']2DBORqUF;b'#_qfIr4jO;7f?QV1NrpYLsSRW[QdR\nOrIherZcZWabpt$MVLQMgT-Vcl!/R8kn%0P:h#rP7Q:48>9"Ph^I"BC9`(=\XX#R>J1elB?,JDpA!dA$=5o2N\ri)-ZPf6>g68R,YLT/B0kLW2jE3#=lnQ;CNRa1fIn4[jEb4%9R+\WkFEGI\jBpA<^N.L)tabrqmMA9cF^Vkqm8'\=q!`PU?59aO;S0G]g$3\qmKBS-X4=Le&^pB(,.qdG01%&of=[of+CjjIK!EX%-iW;4qYA;$i&1n@PTc["K<Zbg/2ot*V%YJbE4%a(B01@n]J+l[_)94:UN9Ke\XrQ1>$^l5lj.^l*_EOfd8cg5Qjkn!mXhp<PY!-S%eN28TeTjA6e1DGH,J9;^b=C,-\m.LH/!.JOAkLs9??"VEgpg>V4&9"g]<4XcXmi;$QYfe,2-e3q]>[WLmBFkFQE3+@oe$WaQ_7_P%%_>I,o`P&B9)ZPk<_We<Ab2o91'KH9E]\*:HcckT:J)-/8%"KrhKG`'OJu`6gbL9$D7"r`ji_g4*RdoBX)u2DbB>MqDWZk(MSZbT%7,q(PS>G)pAM]mOpO+$Sq^qR%4u`&_BeNSFk\.RCW(sJ+'df/@_;uK[D%?p"';/l>TBN9c*JHH1TsOZ/_1Nm)g$WDd(NMU05d=:T%?VL+ZX4dMX[<%aJW=p"rou@(Kjt>OIA/71d\3!1n7QT6hUF+];9AcBUm0@U"1<saq-;_bneJD2@RqFD*(6J7>1bnrBk7`rd(@&^8%1sre9B)aMWl')p8@TSL%Hos\t-q3'O**Pa+OU?#m6>u'Ys$a;!)Zn"H>5aUj+hTC+&D!Kl%OO$*YuD-@dK%&Pn5Omop9A42[P,ET%-[V]7b8lC^]>?.S<gR[!RB6qFnCq:)D$l*2$bc^AW&#JkfkuCZ:V377GX$5!k$C4oo1UXP]*16rdno8XefbiZ7^)m/*u-DK"]&42%0$3$'ME9Nm+1W5r"in8E41+Qpk:3dMQoG]5"rs;l)L1I6B`0uPStjLhhReb;4'8>d%MYpU]UNBlL^Y*`3e$\.Bi]W>Zq.QIrMOgf%5@X@.)=i-8"4S\DK%+t^KaZE+%YWFTGpLdTc'c"4OP#/lV:Rt'[@&9Im6)Kn;FhpuOPimY"QrUCV*d(2&f;re!dX*O5is4cUPi=e%"i2fbfi3X&$dM\=5@Z<4Fkq5gS*c82;@6?4dlimXh>>[_LdIZtpO+/e9@"_s"%`pPP50ZK4Pu6:e2iD/no*LSe?9$ILI%Yir8QnP%fl$FWBn9aTN27eUCt;,9m1t%0k7)&E*:jLq>_H4AQpXWI:Z;b-o(J?1q,r88mM<oG*XTd9.<<jf6F<m\"tIel1/N\RYCC<-a2XZ$%.J-"V!,5E+T"L_NE!>^[O[Nt<Wt'r@Va^pqc)(VUBp(_&gB@%cf8(RU-K)cLAl3:=LGZ"&)._;so:9d8Y7=mm:eK6XN@ri\jGO?c%Z6]Em8`C<CLr:gII"SRHi2q%@OilmUh!T@5!Wc0_e^&iCatp/B[(@ESW`Uh$o1(+"kH9kXRR&)m+[Ij1%,,IO(6=t%lt5`j?<A(9%\KC2c!s?d)AIA!N3k$YNk(\*]&`$XL44?Z>#mLjP^if=&ee5@L@t[1131'l+K5hY>`"OAJ@u^d8XIHdjS3NWH*7?oS0%B)GkAdD0%6#6:Fe.t3M6>Lr7o[1rI.bB(k+\5?>4PdJ("N5-`BX/aP<#G"m<o[sjdohhnmH8XP+o,pFGmWZ=6"dfOos`Kco!ps#T-k/(VT<du%q8h3JW*7G-A:^*>F_Hp]L61AK6W;[j4aH_E-3CVbW]A@7k>bB%""-D#UAT+0?5B3345\.c40P^c^"ENr#"Q9K8S/eWAQ1O+]@#&p%)S@G6E!.Y$G$DAt'n[E[lg/-NI_+eZ[it/M;4Cjb2<n\G,DD##]70>fe.HpjXRDB=L;bUkp_[66)@+cRhWb5l?E.jQ[d-#Ig%1kr%T%gZb59XBS<+N@p72-c2"'3lZcBVlLFAqp+i<:?Z9#f%tc!5e-W?u!mW`Ee*]-`Wf[bLd2WG7mA6sVapd2'oReI9qEM0GGCX7-mF%X:qA.]oDD+7(Ern:U'-WPc"U`FuO=JDG^"=/rhdgh!QY:eR;3[SLUB[\hi"TXp</?R$ONjG4pSIR8sC6-)M7(XU3D+_Efp8=&tDd%ASO^_JqZ3,&@91kaEVe$#?hBS:"OD.AW\e_8<MFR]4#sTO7?P5^b3cnd_K,;=W]956mU_`<$E3l+74fZnB>L^YU;^!XptdL>RVT'%R61"JdViJHm[s3;@(^)2?H6&nIHpG'G^s`t$7%J_'f$l'5khqoHF'cXK2WiYj;j^6QAqit!tn%5j3^_>eLP<frTNtE9RW@q6<^%K%FXi2JUdi\2Y+ZuE!]`+5Ft?#Gk<-@KL3UY<"LsTU/L/^ocNs03W'[LhnT+g.Ul#o2Q>,</mp.pW.r[##>em"F/_sA3>ce:]TP3-[%USusl7BoHfnS?B>41n%tCf=-.o$uOs=s1/#%Bl[LkGn]9U$NRO19ZE/6FN)A2f5^B%O)GtD#(-L(H<5&KgiW)E&ebB]19CR^T,mO%o?e':2.I+6o!p*/CEc()cka04o!A\=Og2btY27p.*NJ&:I^QOCbkj=eHEjOH_$+j'5sd.K#!%O>=X(FNF9r"[3W]@HH\0c)+!?Vt%6ZI)+oi/OF#HZT?^3gDFYC'N9alPY8@Q(?O&&0A)WUjL/U<V18,JdEQmBig6AkNI$k;ii][4Jkl$<](9BYfE#G*IZ)[Sq3HBU"q+%g*(Q<o$?]B8FkAc5<aSh`CS+dU04^3s4GGmhnERW5;/@g;!2Bu:A'7##<5Srr3Dc"#$IPtb?dk'Ua$Tr?d$]#aH0<ZmL;(q^Rm:)%Bn#`]?*3_o29dH:r)%meI(%LjV.g8SU+18:<r5?/c>*h4r'%0Mb!8X^V,m0F<rn6*e`:n?:#59T,ak:cjq\N;dfVH."@C=_6Hd)D%GVL[@`"T-X+g^8:6]r+4iHrb2$0Z4M1HT>O3PE%i4(S;["Cg\//bONA@WFD^2XKh8YE*iHQHi2@f7FB:d$!#0me8T;JrM44Y*rAZ%CcCa7Z2e`2qP4ZERPVeBNlQDO_c=8jP&*FP`u=`eB$+&n7>sF'ap^pM2B@0YBHG0W>n+uqph4h6fN!O_$tg.<C09'.bRn;$_)Pa7%=AZH#g"PKE)j[#TjAj+g8*"8\U<(Z!:!9#IroUTcr+A+9Uj.>?+J3<K\KK@Y,3NO,QA+L,hT<*dgSn@cd)&%S>'PC1kTjYoNM#pi%>KOdW:B[te4RBli]#nf5Tf0:thXS-2:#_nc_O-WO=G%%U5T3MA<@$`Ypt2mMhg1,sA`Vs/EXppsEb\>N't-f"."&9si3_f6\ECZ.%f-(Q^4,rTlK$F2?aJGJL7#-*[PalfGqe<D2#M;0cl+/biR0D877SZN[W_d2Ze&rA0)@s4)B6%q@m_gIVH#ciG37lksWt7rQ9(nKL%DngZ#r]JRVJT3a8BkmXf"4[*OKr4G>amp<IT%Z)>Bajj-Fi6<l].q[^0Z?YU$`J6S6N+J\G]OqI[`G/O?V[i]Cc>SA#)sC>:F6Rk%dDk"f<ZOlKYp/tYMFNUZEM#qZ+D,.PKln[_Heth8"@J%:hd^iipaIFD<<A_R/RlQ#@Zn4UMX4uf%\XNseK*))2!dhr2<_uPIIDf_%''*u7&('Js`Ce8+%sL2$+Yk_"89;--deY!rf@psobH=Yjd$rNoA^bX<+=W#I,TFoM;2#XmaieI:CRPjk;Uce2BVbc-$.SGVKl6/Y%-nl9U2=3+@\o&JV[%_?[?JD?^4p6+ERJUlmnQI-0@K(7!!5[XYCb_.T\!g?4\'kTG>_(VtIT\,Xr0UQRE)66b>lfq:+V""*8A;N=%Se.N8#<;PG>G)2=@Y"]nY7V=l6Bf^^^_*JWl7*sU2IG2gGaYAIUN_8-/=p"uH9b??.tPp/>0)g1%J1M,M"kX8)Gd>cr)Ma3KUTd#%^eQ1#jktG^$$V[%DTdlSP3KiOFp0.7<K8&@Q^8_PY.jegRjX8GqhfCn4HV=22fDpfO!eUZ$k?sTG&XWr#4uM5)n#!F=8P+jcZ$#A%F%^0Vd%6[LB;lY$c@+eXntI-]O?RqOYOQGYE\0ir$KndN(;>mKYZbcuLX=RSGI5i3C3`D3-@EkVTdNg9mGb=((!(3p$$&u.!,#_0%l!5HG^s/ZG!u=fYr[LX`e?6VaMm$hX"s&MXL,@iC=4=(I2d<^5%D1p%ksVh[b`e0./=CplK4W[T(e?0f;ATJ7l=98fB___$)#TNt%%1DGTBN.'1qKALGd@`c\&S:!QK4?aZ]]ApOUps<i+Y5'.,`R"Gi`VNF;"eOB6D\j;H4S>kR34FC%a]#@J]:GcN")Sa)%aAS4!W,_%`Qs`V,KXWD-:m9`J>R)DG,O`'&-sK[W]W&OqP2la2Tpp&1b^OQNsTdY3fdiYhDC7+fCs^G;?G[e"7YBO4cGSh<dVW#%kY&AcS+L\%>DB(MD[lqN-A_+U"3XXrGD8)D*H*-T6.2mN;r`$X1ff7MjBMj1Q7l!/q3moL'V:G(pO<Cp*CI55oE_mGolSR-4ke;-'GYcn8f:Qa%+cT)0)9Bhi8_Ug?V2^!i:Uhu,GjY.tnGl.2la>X90]iPui<o]laU`@QcV;Vm=Y@COrg%,3bk1Y8Zq8N85?*>:qND^SkioYsp#m-Z%)X/n@:4Fd9@ANG9?k>h[-it04"l$='nTtoZdge5G-"W;)K`W]86q9<"$HYaVH<C9fA0!<rpj1T>9>]3H8#s&\+^[%d2KT#"2i,?_%6>--ORsY+hjH3O8m50*#GR!*I'r]^E"4jV.Ygi2Vf:QA]pJ0gWSRbR-?)7XdF%B-O21o"pBpDZG_BFj+Z+Q6jB(&6j^#1:sO0;6M%_7^^m&]ppOIPR94g6DjTa30LSqKNS!ZsjrAfFgT8FD)tQh8,m0,`G70Tf=`i<bss%dn23goB3H;6Rlf2BV,$.cFuNh<bqmON+"pJ%Wol"tG1`g&7gTO-R6aAFhpW.QPG]geC8\o'%[<Es#)^\5Jl@-*oCEQ$>?5(sr7)UnY460Ar-6HUKRBpunE2)?]WL>9@I>,.l1P@8%$k!tcecL0(Y(a$OBGYm\aH7j9A5A:^Emp2qp5V7fIs>`%B2?d\WlCsMZU:D7h@]dSHWN>+4BYY94/-9$?QAIu6s&)(gCdha_HREM%\iITS,bG:N2E*fc@IRe=-AknFGHu)p>$0'(Gg\HK[*pKRkLVPEm:l'c!T1V]5$&XbgTp7=#1$$cb/qf[K3hlaDAsB0@IL:UQ^p\]%$o$=:`k]k$ErAq0L>)d];qDbq$*srQTF9B4O_hX8cmIQ+Oh04Dlm;Fp+P/R]R<<MY&jI'!\,\JODMN\5Th%nG5r3`gHC,BJm<nkl%Y0X^tWQT.6`;,W_X/5-#F?M:mol.bO).+mpY3Z#9&t3.6CTg0VHn?J5CB>_*[*O:R=*QRn$E'Rc3uemBGm(]Z5K/j45doU0fRE@Y%eXg<Ck"T.mgK?cG8W`'S$Hc&(kItpe;gO9K&_]@a--L^]$8g<'A^+WS#fNbTg,rOi'?nU9*X1dD6&sHaY#)T="G3B/-BD2l?2`.Z%U`&9.1W1Q\$"N,=,W;$?p*k"<SeC4aRQLsg@N$Fs4D-@r]5!!rQ?bHG%_Z"H?-h:9PsCP!/!0c2[:.>F7n).douEtJDrO"7mAf['%mV\pr9or,7>ofG/?`<cjPOTgCJE(Z0j`X:WEjg=O7G9=&C$tVEc(PTiXPeNE<MCa&XLL1QSu5BEP*EPGT!k,JA?tFahbJu\m*L&(%?sImM<^gKTKLHeJ9rmMRGFR-7cRT:,>L9:R!P8J>NDA#dZ:3e/Cnro]bpoH[mI!l3IkZd+EceAR]+2"U3uLr(^r\'EQTXsd6i'Op%>lc;42S`G-"@]n@^ZG'X5_/tm?dNeU06kTDO8asKQh7<<5%p`I<onk1L]tcnP0j+>KIS.e2a^@&$093#+60'B1c4G:EQL/WRClfE%X$48[l;*r5.f9*ZGL8AYc$?_/5(<0RrG(_\FqGsOY9bUZRR+#HqAPEp4EgkqM?U^WE\!UGf3FB=\^N1,>qHfZ2]h3u@@6j]=%::P%KN*2))YE/g:aMcWPgTOk_][#CZDkr0cuDWhkSFCIANuCa(u%fZ^(@TVlHj!OP!8'hQ><n<QX[QCLB'7=<i%P0qP,LeW4r/[,E5B@%h,o`pTjD9)%W*k0mU/6,%VC1R:^feaV`pKK^-P@])Mqm>=!qOMOMGB#E@[EUA>oLt5ScTH'K82`OXuSAoD"n4RU$HnkG\U=?3d&[%D[(2*1ZV[BVi,#nGnF1u[aQc3=['`h3c&-IH_/&t"#U*gmQ=3h:,];OdH437c+@TS-u@`t/E^ZOAJa@l%\$P8ZM1]]Fe@Ftf@$Sj%L:d,"9.'raBo!dMS+cp-8sQSc:jZWo$<0L+cf;4[\Y&9CH"ADNi'9F!IMsnVhE4ll]E35s$b(CmKdBZGZ?_kb4KIo!jSWHY/k^hB%RK<sGUGlU</K>*"AD(a_dnj1fiK$&?(qkh0%]a6r];!d<IHaIq2Am14gOTi-CN?ni75fEbNcrGX?N=L:#1T&.>Q`li4ZP+;hJ%1/%M^cd8(6:u<S]Dgu>._tZ_6][rA3I[3;TQVaoR5Aefj+LGZ%.4r$06-.Qi`UjnP&)A9d>L<3#uGo/pg`M)S=2PHh4[!bG(/Yh.?C`%Si"qIp-!'u:o6d=SD-,k.=@WAH5O8`OtoeV2DmH5]9!ncZ+DT2kVRJ!G-XfsQHgUWZ.l:*SC[,jg)]R@lb*GJdWL4dDA!\kF.Z@m%m3uUqWgt[9$l@bFW9NgA"HcRCL2H)C7=t.OEqG*Xj;P"'_)]!/7Ep(6(nl(Bf#K]-E?>t1-]j1N_7L7j1K7Og`7;Rr\Pgd1b%eJE%'@KC*%VaN]dknP_"6)A75m9"%*[7I(+q7@6,MGj-HcqLXR:Hlt]/-t`R4!`0g\"8d(t[Q&%cMc'@.%j?ej;IZP.N<R[mH32Z5C8N%'DJrR7bTY8iJlGWeb<3"*^%Ni+B)5d%?V(hZ0)E;><+GW-tIn%9S)I?\lKL#8%Su!LN5?lEhhq#4nkha?RB:&1dgH58DHb*F+:A!%pP/ApFEq;!^mP]]PI,t)5*al#OhgCnco-[SUGfWW?%r$iPChLk5h%eq[nhOE-an7sBb<s>2U2+gKXmTi=q)lc-Y13d#D?Xk6up"+%[j*Wn:HTalec<0J,ecLY??SP.Jm43hPT;'1i]QCIY'P7eamYOVrW$#[4ti-K#V+_ti\iGN&uBZYDE';:XY2uL7:0ZJ/]7`J&K.D0%@OYsn&A)tcdB6=ceMO+1U0"oH,%XYdLZt^>HkFm5"dOpmT?G`_h2_7:0'>VXdL>Y`rW#$dfP8!?Kq+5!%nt;3RRWXt\Wu,\K1jMH%$_7MEp.ja8DA@j2_4r]+ePl^oTR'Iq7]N)B.k5G0$2Ek5IBjR]A]900+-1rMf2e*V_^^_.3TL2L#A@Q4!f<:DBE6Eb;+12CrHPU@%6<pXE!A4qk-'(UEjR_DN"YbYCq$S*=a=i^[7kb4Yki)&g3^ejK.!^%=KM[)HJ36C5\Omd89<,%CXr;DBQkH#OjcEp>:mY`jW-WtE%?^gpCWSXqle>=F$VD%bmNX?N38:oVN3']8Bp(]&<bR>L^8^FroeSQqIF%VFq3CT!];r=qtU0[MrIZ?7E\3nOsk+`g81<,G5a%5oj%FA/Rh:V&"LoVoa6lN."OS@DHY<<]KN](sEDP`EGkhj:qO,]&]&lZ&O$8?]rZUN*'"4E%j3ILR@AJ>u0aF9Qoq'T7@`,+4f"8q5BS%0EC+gYsmGp4.cRRX\\P9q`OPDRLWCOV(KUu8Z=oa:bqJk(?i2?43=tKGR8`pB8A1c@UQ+CRZc1UQ:j#_B;e:srW#*j^4bAq]t&#O%%@!.n&E4XJ_;Xcj!f_mFTC[I-C@_D1ZJjN>LO)J%3=J-D?uNR7_*b2^j>@;;=TdY8METu\g(iG_r&(83*a6*^CkW%phtrf<!N?O\%c'?8kQT<I@MuL/#cNdDW^Qn'a^XVVVX1VmjkZW8JO)TrIlAZO5@3=n'?7^R8d#2dbMlmOb%thGNDXIZG<GQ-0RS/1`eV97A/IPEi%;=Jj<c'[(JJtA@0QKV?\Kb248:r1htk+S#LhUZGC)3J/>IF(lS@Y\&_h4Yb`97XMI=l1</6iGsHBh&%`\mk(uc=0ga&JNGVWTDpO%%recrn(!XEQZSuPX0TQI.a'ZPDS/lj=;YLH!pEn]ghol0+%Ct?%+-YGJAX!MV!_>>[LHe?a.\)*&BAR>)!uu]YE#fo:9qS9_'7E5%T?V?,Rm6'$&O.bUi)Y?9>E<]NRV"fe%*<?N$C7dj"ll&4V3O>S>UU5.93J_#fHtk]g<li&-&`4I2?rEV4)r%F/)&"Q^U_IBY.a+L%hW@HqTccp^r:P;be[2(F#AEA,'l(ln:h.9`oCN+D/DAdYIP8C0fhMH[iG0i>"/a\-dV`X])eG#HH>8!7A"_F/0j'g,6GU4dpIt&`%_?llCSj6"Am8!>t10?JQE*qn#akhGI>f(Z23<Y/^SNX[>i/pN,OFT"pp2gik.?D'i9WihU:`9"1Xc1mU;-kJ6Rp#6)"AfY=V2,5;%63d_fD%#Fp#fEg]X4pm)=OG9IZs'>V>Fec2j7HlP$S0E27M9ekM#oDeYK*2SAMdk-;N.Gu`dC$_Zk3j@RIh=KqE#.^p^n]iW&js/%H@$]mB":=e+5i#tcu2jneBl.MSKf7N%Eo;fETc5<Y;FE@R?`G;q/Gr22lh8Mh6@u9Q:`(fYr;e)!uDqtDtF()d[k8p\'_I./TmLe%CKGQK[dn)IOOO00T7.Df<&8mCTS?I8:A&l,hE2[PJtkZ1Xdj(gF4^@Y]X7DHr94F:jt2liMW4Bt%T9rW>59cd[O'$?_CLjVcUM*5%1s6@8;-H&g"*Apm)Y=-Tg*,Pgq_TlkWOGtI6B.kTO*a5g7HgRtMV^\F@Fh(&"CHN.3qaK$SESX5l5r'iCK\]7WgW@i42h"nMpjcA%h=nk.$@[*h@G5tq#@p2%Dj^#L'^4)1.k26m-7,a'5f+!H8fgB*Kp&1<j]p\lmY`5HX0bf'!k6[cea1X#W$!?VM1[tg6\4N+E(CS2%N,Edk*5^45X@[:g2">,-AL&GB8.^(s2`TR:=o./g=t&D+UKX_ed;Ie-QpHISV?u=@N3imMHf"@6%#-*N,(ptcY4kbTACYM^3Y<r>%N)(&7o4Q/4-Jtd@%$DiK$8ecJ(p$K`D@Bm_((O!eD8.XeZEg^:"AM.%(Y1@k@]Tl'0SJ#%aBdoeKKfJ4l50=Tr9A<;)jX2GMsmc>%f!)iL/).lR/s+lqk(BmioACT>@iLhm-)c10ljSKSKVe>>J5j:(RK;$?V4BH1(g_gfo-d/$[ef>.S/>6$ABo+#EU9=`)-VtaY*R,m%"/'?NXFVDm_WLL4k^4e*dgB)8#RW+m*.9,8C-YW1\+/.m(&_i4D^nn$mI2tr4B\sb.qNii00O/?f=.qqqYiAI0??'dV8B6<ZQ)k)%K4%a^eSuQ:JLhoRd$o0s[6ni0+$$$Do8qAb;g7)PG$^R)k"j4@b)ZfC\AO?Z-k9YZd#GMC(7TG&>"s<b=;tG&L#25`D;:m%3dB%-%Q_PeM/sY7&D-6NOHO]UH,qeVgm&E0^^G6:TI$A)+Ab+o#&f:#HP7-Zg\W(c]BB"@h/N]L#?G&&(TZ9GV>jpd8i;tn:kf'dQURc6p%rYhGqWl\eu9:-s`SfTIL)Jk/a[s)(VF*k`7PMYZ9j3+*T/^UFG?FLbc237@=I&C$,7Gc$ef:iM_)nN%h"kZ-ZCAoeMosi*GQondp%K\IY;.Oij!8jidi2AYsc/h]Pj>fOtd2+j\dpJ`8$*%Y<j3Y02I?[R>9RRZX,eI"b'UpB8u#NT@T!);5SA662c>q1GLP=nN&CPORP%"/WTIADuiAO^iCugoab4B`=G_/o)!d>F_gjSK3I_[=EY-$07Nh`proB(#/4fGme+^@M_Yj"mf6oqu(S3$_p$umnkSh;b/'QbER[3%WL;ZW7']LJHc%V;hX1%>XHI90PJ)o1/,f5^ak[uSpBJRIp;H-KD-6cW,6+YJ65=QCqag3:KTY,qF(F-N8U4N>G"JqqGIZc4HF(uA%/eWce6qE_GE!0H&<6s2"*SU2,Y-I7;V94nL9QI)nm3%;'\kJ+/+c\jD:C7!nQ.Z)H2(iegUh]>0Ns>qO^TF)dX#RZsCF0jtDcJZ?%C2oKf^f:qadU4F?.E"S`(]CmM0q5p5=(*GbI/iSEGu$m:3q7N(OX!.6%^rSh1'lc:r.=gWi`J*K:ACD]W3_t\c"#Voko(TaA[*r6%MjERA;Wb6Tmm9REkAIt][>"XTeBajt"(nu`46I\]&-jCH3-,1aFm3L9!Y]a*ZmlhlN9eDkKktCR[-()Y1[Pn7]7JS,Zg;:plVOt$%iq2:pC(uXc;XF)X7C9@H$5K5kpBW2ZnCm3U:5`QDjUfc.Wj-A>S1!bF(OsuW$!-!cZ(E7E(X4'1;KHb)M`!T7T<nis7luo\q.j/C%7t:*pqpT5j0-hmu(fsFK>ZEVp"jtkSn!@JoL!g[h$\bR`6BAJ)L2Ri;Fa0DYb^*Ip).T0Z>Uo!BTNFTAFgF^EAU1&W,'9O<#,A%M%FJbkTXC`Ur/oV61O8H9>\7%t6BKREJ<@dC^;%aQu,_I5j`kY#e-;a@uS.</6O0bC(>U[-dp-UYYn%O')M0>HV0YZ+0&c#Ki_i&QI%5-OhX>!P:'"EI4_bQ/+'GqRS:VL`um\h@ATRjQ`)'q3D#:?<^D^73qmoO1$gh>D(:*H`s5Q,tV>.(DtsF>dTr`]Ke`i&&(c]0on7%S=3lK^Bu,6FI7!Dg%,gH=k!&57GYZk`.;D5fb"EnZ\uolNs#LBHW[hR?%[-o4QZ[TKM,^.o'!rbdDu&ScFc=%N.=.]IE$Tt!fZP^%W5=W^>a.hU&$q5\GGl15ng`J-D1C(>rDAo.d[sG)acSp4E`JR]_po17E[MFmBoKV^-W`T:Ge?-=KV9O"34J5'J4RtDd]Q"[Ak>U"%(jLWGZP]nbC<U.aJ@s!^RUXbt?@4C?,dXR3k;h.jPq10m\6*H_qBX.#:GW93_4k.=,V2U7qo'#&<1T[X$VugMDt)#tDO*_BP1ttC%4qOeToF()GH+H&?XX%M.66@]NOBXWnSF_7r%s[FSmGsZ[A2\"8K"T0"JCQ.R:U1PH>S$,"jpji3I7(-g@+KOk7HG]/MiU<EqKD\!%+E]AWr\VDL'T\OGBUI#-LTn_1EQgYV]BOKG#j\&BdJ%jN-eeP<oQJ^%=6*uS_>u@m1kQ(f'Z^uXS%`]5"Ar5ck_dub8%XL%_+VTQ%jo$sTd*2P'k,:16l5U%./6\B'#uZl\o@S"fbiGU.@1l_e"c97gZF8ij2^2@V6;jV[:^A_pfZrph$DSqYj3)c8ki1'.\3Wm`bC+ZA%l*mj@pJ6qZ5K.*chu;Ug^\tYAqQiE+Ip:OtmJ"BpnlIJEH[]bDfPT-Y03^b%r9k`Br5HGJbA[F$0;Y[1CX$cN.B>5LJ\RY%?/ErB%=0(C-f_c`h4<*t`3cB.c/,u*`r_Y:"Y&F@>ooK$cI/EqMHWERl'."rNT4$>*DZ)r<B(Z*<eq\6D`@>3"I0gt.$d*8_(5Uq!0hS.@%QR+5m0YK*>i9!9!EI`'Kaj2rViP;C4aWuY9,EK_MP)"0(7XIbp;!#>^Qs"/_^+W1df;8J/\h=*t=c^b`!:tM-H'8'88-G!QZhp*I%laOK2+qmqhq>fVH:E7;?WfJQHY>ZNk#ZB4WA8?-(Tf62W1#"bCD$cE6?dQ&g81H4Mq/1_.G0b$JHe9t#ONM+djR(+_=H<lj$NB)5%rCbLo`]g'``Cqo4<gP7rfKiYklh-`3Eq_6'0BXZNX`ZM4Go-)Xjn7G#i!V"[4F%O5S@;'DZj=r@Q!iLNVr_t(p>^_?D5,C_+n_R=%\;@5E+6\*Ih'A;gNCQ)%h=b:-V)'rFJ^N#aeSiZ??+1:(78`d[8aS4ei+9-"`Pu[M'BCM#h9'aN=Z.iBI's\QLrc,0bLUXWd']lV%@93gT-hme:^7ok'l>*XNdBo]ifN7+].4l.K:<[_(URaO>\I??Map_u$"ujppd6/:YTm8U$C:='N9tNaAXpuXRaYlKSnIdQ>M=)ro%Uhl&.))C]J11M"I:NGkATWX:h8[B/dQ@PV['Nn)p^Q9H*fI+caH>nqJkL"`D=[e(2^#,'G!D^Y:]HHm?V>3]]M"pLLIQ"Xj*mO2V%_$?\i:X,`j8!llQ+om*4T[nb.#tik)(XTu0f_%n!/$'.N0+;C!mZA:EirRGCkKkB=6VWa#lB%1AHMu@C,&!sHs12_cDs`(P4Yo-c%@S0=2iKDH6n-CbNSucHIi$^JSnKJ,$Ml?nlg?$FL=n8i`)>Z&6BT/T8BZI`&?"EnY^J1It<*/Us,86u-?pFFRWo!m2i*V:'p(Rd>%J$J$#i6B9<:W'i%&,mjc`R0'"HEc:e8LB#;$dsfY$"d*+mU(QNUF_,1\:.GBLe@kK-pYoNUR"KT?tsB^`Tq].`tAl^AC4/hiRU-*%jq)tV>ljd(8XXO#LH+p5bpWF3m%@TQ4.elfm5`cW5A9m\@(_rOi8Xer1QB)^56b-m#:Ke@%bb\`UT[%9PVHo$>5F[Tpf5VY^u;(5%:@,US',83M:0O"";Wq"pkAuH_4m2\+Ukua#8XIh.fG?qS-7oI6?0#>j"=7;C,c?%:<)BehKs"(H"A$S:To!DD#4;+Rbs<KCpec!-%-/?]9'nALKhEm/SO>J']i\K_oG#fQ>AVDH&Ao$m645-I#/PDGcT).@f6iQ:4^gXtK*rr8IB$ae(6DMe#L?-Zq/^AYs(&C[ereT][%RR]I0?XBUR?'d.U6d(K2\f*!.^]/sM]h,,&,!B.[SF2C7af1hA*bm4k!]nqE]$n06,(*AjrqMB!6M(S8kacW^C82:Na:1cO[lH3"%*E$5Q1<<;9g;1V7ZSLk&C^kMXp8dNI!HI>0og_)"2u5p#^d+2[Kfo`;Mb/i5&6!gKom%[834,o_0)>_;j<kXi0@3g+aM+@/OcI*q%o%)iMm&bn3pl.ncj3hjFUi!#C)\m(q6i)e3kDjD,!\XI-jPhi.,j@cRJ3JSj4(@q;_6:f7&=_rCW_bnX!O1O!.JUeGF&n1@Lh5pm%qB:!W7_E`F,b9Zo*RV%;c5Yhd!DR&WkR)9S438@&b_=Hr6CD'eGf>AE9PrNn(rX+?AMUPVUBNG7Il5sE>?le;GD3K:oUV.]l=a&Y%r.]hm_&iYKWaOgi-+k7EJdc3tm6R!j>I.XK]1LE/Z8J:;'F1Omq]?&&GTm<k?j"bl[4q$>%/749XTTY.#q.d#9[PDhQQ[KS\;p_3%^(_2aJ`#W6lOW;#]<WM*\Q2qK%%<rN#;)lhNNSA;M_%'sZKS4_1uK`'RTE=fqa^d98IS0GnDaMF.`5_8>2"8W2A`YjFg?&Do?kjq%_FBZFirqUoh)+N1B^eWWT,RrimA79g7_QhERc7skf9,1Z%g/pTdF[<b<I08:nJ7W/6Ls.72J?ER3uu(_YUglTPSkSB'5iU2\3W2#%b=t]n_WYR%-\aB(T.JZiI`h5,"]NClk*<lnf?5T$Pe$LI_O+rLV6>a3d2qIRW`te0YMRnhq:b*Okr[Zm!N+,g@[Zuh>@==!#D44'%%Nm/ol4$Yt7X:^@lmpfG$X\N#QdVPY89+omN&/*9c:o(=k7.W_+Xb>2o?<d20Zu5NB;ZQUfi]fDi5GAPIAI6kYA!A%-(%r6>(JJH%`!;b!ViBtL->rPV$N"jI$RMIPT2_gGbq)\hglW(f1;HO4d-2d?nj==;P'j&C")FEm(bkJ_)8g^'j14D*Lh<(ac0R*.8-;I*dL<u[%Wp+<W?@c>e.!\?>BHC&#1NhO83)O]T4s,g^q8r6:Us=4kDo"^h:k8ki*MeiqAd@s\d"G32gnSr2f:XroL(n1[6INnZj4WiHJaYQZ%-fj^C!8Tdf")`I>)O[;[*Y$KPUTu":?=kN6HI>u?O%Qqa9lcN`5/>*P!d%bT[//o.rKc6%Pm=LT!W_Mc9'pA8L%NhAh=VrijB]Ae%hh:V88?3R2ZcS:bRfLq%ProHN>l/:j8\Y[W]N61l[k.I\\pHZ<TDre@"u2JjkQIunI00;Z=-cpnI^:*DD`'&pI@Q$.345VOC+%P)%k93JE9>+q,cI,K$eOsB",lQdYm5c8HbC[Beh]-kJQWd,MREIcaZKqrQDoJrI1;<j%H?:k);+fI5_\4Tsm/)/iZLh`!*_/;;;2qbF%p;rJVP&+!;XTOK:2r5QNAeI*N.*0fP4L=5@b<ePEq:0#]I2LW1/-5`(n>=['S$67T]cS$n9Cd%f"R3.V"X0dU9/D&D/'a8f`&Zs<%S33\#WjQ9Q`F.<f(^JN1)c#:!Q"7,P;q6K+iG<[Sr+KtK)GV_T3.Wp%/)*d6Ogu_N:6JO_TGPZsH#UClH%\)c=!i9B8p;<dM;@Xn%i._9/T`g`V\,b?<'52qs_1^8b5P<tmb@KUcondk/KTkcW)S);2\,b?<PNi9p5>3k-[@Q_gnakArLEBUTU_RYM$SGA0>B$mR37aE\%4iT22JGV1YVZE\mJ\.L'U;X"piaj.X_.0=orO5%3Kb<@.-4IP/=L>4tQcA1.M39:3Q-PaL)rCmsB(Gr-fT2o"MZub?jm>j%!,a$S%@W.Q-$)'"dkPZN-);LodkmWI&0)>r6;/run+n+/qcESPnIseZr6"L[E082(W1uPJiBI/[pGk*bqbh%\&F89je%$^=Uj(oNb=7+90%6(`EQdEJ:UPq/Mm@Lj-NI(WQ0o.7ojShp=5T];l.f;&V#*8p=1ACGQ^kE/M3W]VMO#!\+eOfc$=iIRC*Xu0sZYe#QCf1l5Fn-;4M%F0JII-Ij)cM)`I5hsUd^%rO\?)f[&m`"&W%YlO_(NKp_'Fn/TE,*qL#o-AM,!BM72(8L<E$B7&2CrMI=p*W`-U7/[;!rFrBBSNf9%XW6'pAd+,E^80nY.W%\fMc[TJ?1cP&-i`>0EP.o#p/9pW^P?SfL,gYAl&%fp_ml`HU0VUAEXR$1H3uL4Ibl?b'X*k?G$K[6f]DF/%$Pt*-kE)?mF%@G6*9:n$/]VQqIe=tu[pLi#>orD&2+BXj<*)^Y%<':]7&30O,HO2HEiD"Y.kiFCdJZ_"$geY(Ml)'".GE_\/_V@6%A1TL\PLj2;YF5$XSc:aG*>0(6%L6YSKgH#_PTT;eFinqHSE3OBm<lR*G5+2M[jR;]UdIcKnd-Qd(mbr1]'k9uV!>hW?@H.B0]f*7%<`)F1F""Oo!m.8AqF"uod=WJF?7hsr5)&dcF/j.E&IZW2?-=UW([:MV]8gs1I6a2E,Se[G/[&YhrV.4l\<IM_\*/FfId^d=r?jBa%Lj!s6FQ4$jY<=90UkcfGprNn%MPP;qk<<^pP]/jS6=UlXLF5cAp2V8&Jd5mKVEtNAgHa?MC-k1%FDba[3o(U<T^[XUT_ZH8^hY(@%b7s:GKeMcmeJBRm/bbsGanJL3aJY^G0\"V?rn]T:QH^;E:`ZGi9ZML^1KmVk6JnuX_fSKF4VM57FE8]540e4kD5OAjmi3p(5]hc-%OR=eCo#S;?)%(Ri!pL3D2:4pj5tmo,0"JkhOW5IrIAR]->32I*$Y4BfK-C]"BVrk;\p_&2;ImX8OU_4@;;,e.Hdi9hilt59a82in%+s"f?R6XSZO\>/*$.=r(NsPnK9)?KDns.&F@6DW9j7RD,2^i6i*+,e]c2Ad**jRK@Z(lJ<,0(b^,FPqb*h=8s0fT%thX2:Bd,9S/%*$#H.*(X\-aO-\TNXc7RG!)`sPk:c]K,f[.P00Zh9<1IAAD/(IY<%^3?\2^mkm(tsQ@>Lolt;PLJ6<!FmU(QQGdg/)\gtBWIW/F.%L%>NU*YW/[0>V1p.QHkp$+)f<DY=FEa#jY)^0V^rGnB[$kuRXHfJg-s\4*!^YhToUMS^s5+\L!)+htVRqKAeX1:hoiZ>KDn_Y9^%%Q#]B:;7o'C)/bAYCENE<lc4qGj<BZ\0MihL,ei:Ec1+'9C(C`]]`QgE,L[aa`+`APOTEaJkVP#+)WM&jUHO1W14C]`q/hYeT@82Q%-FYu$iFd<(]Ho_nFo$%Zb`q>I^BD;4%sLNUP2mo[+M@mZeT%T80?Ba6B45fO[<-.B/?,k##o$O(=`>"4>J.Umnf7Q]d..^XP<et>%]6k+2's0D"&%uB]oi/#2Yp:KlGn(fdC3kE5cJRW3l%_1X^NuDJH,;Q7d;FE:PnuL@,7#Q""G)8^i:Gg$o-,LJ&G8[,5m#:uTUSf]%6W2%)CFQ0WH@`1\RpD54JU.UMBYm.+GoTTj6+rA'2A:1t@o1K5Z2c]JHM9)/bZY22AP[h-72,U-(2RmTO?A>7pZ_)`<RQ:;O15mm%][8Tc)c5P'!BQe%)i8Nd)Wb$P4>g!<N)&]Y*pp0Hc>[?tk0XKiRhqM%pXA+,!S)e5^mX.^WHPZ[K0(2g\H+"J)^(PdQ1r5;!t"qR%[F:*d#L;6g[e"K#e'3t1h#O#1^*(TtR&9AClBCJ`cB/U[SFg5tV%6Nk?-q2X:26-F2sNXglN?LpQ&o95<MC:Brrhan+50Jl)"[:B%#2]4OTl]_D_`1[;Bu@=0Nsp32b;f%+9eIme])G@,`(dMLHg5?WI0DM`R`itDf9#D!/MQ&KV!_T?)#TGuAop^JZVeK_72*(sdrfUc%jLB=Xk3J2aYi#Q-X`5D8`,dD(E9u^?g.BZ'/9grZ6hjZ'"mEoq)bVP;&SC_HNk\1W]?7mTZ^oDc^@n(4]YKUNdL0b,KKQ(13'aIC%XnbKK#u`?44X=sgbM\Y*RKSZ%IC'qQmceKsiE(F[$;PpCS#?EugGPsN3ZkE,OW<bBmBUaW++J\&3R:L)0.s5mKi*^Jq>jE2%g`.g%d$LJ6lH/M3GLZojc'RTXj[g^-2T\s()BT</9k>K@Nk\5UJ<"7/_Fpaeq@)T47Ue3@g8/Lkl2aK!BV])D0HV-'aIEdb!U=b7Qb[os%KlO5TpJ/TDoWAEM6W[>k`dTTX#P/eFqeq%S09oog`?`h*?5lS=e=2`69a@Rt8=Y(Cj;j[Y/#@EX"F&o/(6ITr5b=>C\",R6^eTMW%1^VfZd"u"Zp9S&Bf4:FF"_9XE3[/%iNg0hDj/_9;%mDJ1%hC3tU)E!N;_/;2Z+Y#E!?NA/9TJ+,!D\",T-57Pq,%bC:[t]\f#eT8%A)$*qf(&#5i:c=gc,s.cnNZ44M#f/<-d;-WmKmL-&&KQ9d-\gRc/9-dUOEl8LnMae*T0X,,'TBC%_[i#$HtjUEk/QtDh)!e$E32>%%o?^sk2Uj2K<eA.Vn"I_@$\G%dX;FN-%-"*RiKj85aRh4-!k?l6!o:-&'WDp5lG@Drhat^nplnq%FC1-&1n>b"Gbi`2)>J_YX)%"%G!:]Vg2jD?IH?78Su;2id,jAN&=MB24m-Bqkpp[4W._CGl?rR*RR9[C"ut()'.3cAOa.[dDMM3$4N)/3+?oIgkbkmj99W.<SpVfZ%=Me!ih)B[s0,G`'IXiT",[bu`'uJRiRNg)'T>B.S2)ihp6jD4m:eF*)`#(EV`0@lS)XU5[(W]4,^7_LV_usQE63ajo#A+$CAhXQo%Sf1;-D?M`Z0K/3p&ULcd>ah0+[BjukH6$cK+@T&Gm_g;HU&$@f+0utLH\@bnp-XZ?&Fq'HnbD.i#@!c6pu[_?9W;]I-t"]=Bnl'J%0o+3Q&(",=PS,!\alhB-1nT8CI8R3FBQs8ei`kRkj6XsMe5jo%+/#7W.2Uq<7-FCCad6'Np+diGalq=G.3e$346C0U+(JhqS`e9s%5:*[nZsU=V2Y?dmF,HSr2K]\^=m$PoA)Xc>4o9G)6*85pM\Fq0IS1sD-aFk^(%*O+F<l9]8fT9R9'FZD+ObYf\)h&;)Fq-$!9[$$%.GKk/5rp<?o(Xdjo<%G\bS0hFe!;bL<7a:59a`t)P7,G\Vj/H+Z51(K<bU9gNu(abhQ1Kk1T$6u/@hd[#&1Jc%J/I\3L14cs!op[%B]_H\0Lab1pe<=l_,g`Y7UDbLfUa%.\=$O^J1QL\=.35q*W[/26ukmKFF/.dXH*#`Ha_o>AmY0n>%p$:qpJIlX)P4ZJuu8mcjfh,%LnXZE12>iaf+"#d:`(L<'lgB1?I2I4rmF7[ff?F`]nP!eJT\r4JH/QKe5f+5Q&'k:#HGV/99To6joudZh*Eh&Ut)JjWrrV*bu\G$%ctkQXbEBXqkMBBJZ.46a=3#pS1V\0V;`jMjmdk3(-!:f;829fj=i'.s=0jG[/L3C3E=26@a$`95BO.k>+UnKp(9Xh`f#W5&01&Vd%(-D;k8%WB@K@7er,^J=8F)cKH;6q%*k>-B-jNUi.B.FBS^@[rV;]\J[Ia)cCNs!UE?P5oD,\HauLe=XJA[agJBblGL['Qp[P9J'6%!Hk&ms'spb'LCB6@&e]+;D^%rVVA'\,i51RR(3*`fZUHaR91o15Y)rI0$G(nE_W>RLT!1]3/N\Y_Ca_n"SEZ-"1/KmicMuZYD&-:%l#aTcC6&qt.GXQkkB?"cNj%hC1bFf1H7jaF6OCkIM&T)L)defL#PMadrMjDW]['s8%&)#Ui4*_sp<bC:31+lAWO[K\9E^bL&EHmB%lEK"978B<X;X3IZou<c_lQ8)o9[_#Z"DT2gA6PSTkR2I*;A6@AUteM9aGf3C+TO=g4jW$UfVa2UoEd6`d;Fg8pe-bCrN=<R(aJ#(%Q:q*!<K?M@fY>^9T4g0F:0kSWpH(_ljWf=75ir7_Uel(UIs/a+B@a1NoV4S'iFBd#[@7nR&SMV#PJrt%qiS-qYH<=XEr%H*F>hSl%If\dHVqCH5pGga_irHPJF`b;&,m%k%TWV8FASZO;C<+FI1<,"B;_,ncnOd";)O_u`j;7^2F2-8CY]D<:rFF%':UBukH=<";cZ!;"%Gi:PH5s-D@"[l/W>2bA"k-(S#3K["YfU^bg)8C#"hUMcd[;maC!qYT!Or^"c++%/\(*@IDLp]SUfs>0SC3,rt*^\ZZe:K"B])H0G%RSk]mfS#OJ('GOQo`?_/L*",P#$NTO<?`6O%d_Z(X_H"cEe`PbUh)Uo@=""PTjoJ\:/dF,4@$X(gO9-^o#>f<F!V>Y(GbUP-f(S^%20!F2qG/Sp59:qK6CpZMOpQBlhDUSnU>=b0p34)uM_W;[rC=Ho7F0p8c!_#2^VDkLqC/@KWh<`je>a,u6L4]mXpn/[>4sis^qZLF%e[WbC@g-oG<UU/JZn093>lht-#l$t2-SUd["#T+1+?ok'*%=:``H7mMh-d\3R+2R7E9$@25Ue.om9F=N@>.lL/.[<umN\81=jtE^%ZFikUXj@JF-pcX^[pLnXQfYco3GRmN.q1nqIK80mngUN0RA"j#H7[(6,g7QO#W$a$d.QAQ!KN801"qpq"[C\(bn`Nb%fD.-]MPj\%e$Obl^-n`f/a2.d0Q&EmmWs8?V6C*eXAp]u'9)G/kkuAl9CcdTa&L+D<(5I*[.dh1?B0lY,p&U)Lc?Z2.#@Q2)78s?c!12'A#'E1%?T,`OD%;Zh[U%I!E:Gn?;`.rfo\1p4/K22@bpnTN>C8^uT]lZ.J9bFFs7-o%Egg4"5UACD/8@]i][[S+mb34YL^1BsRac4C&:uZp%'@M6D^\M>cO,2!&S6ZAb#FIJp#/Rhr*r"1H/BkJnk(a'm5;&9*@YbI1[j-`J4-o,@dNA0/R+QQd_6sNQe-4.+$\_gEg\fm?T.s_d%d"7+:rWMmD3H=Gll'6@.>kIIFe7N6J+#]'Ce((_>ctJ%ef+'L:b,<KIG.ri(2-p00=Kj6WpC\utnG"oRrt`].#R(H]Ta:kR@).F\%ca.uM0@'"1i4d^D`9b_\QCnMN80A!]'H6pTF,`n=mS/u)PO`DMHXg,_3nKri,MnH7Nd-E,X.Q,#V,1Y3KL41rP6R&obpZ>JQUjrk%9-fVh&da0$W'B#4E<C:M-<gLZ]L7>q?6XsT"-4,Qj92%fr=j`FbWBl$V]M'9K\&QsnW?]@rX(__`.-/Y)?9)Rr%_++j2YO,o"3fZ%5Q/@sgHYXt++O(K5Q:L\J+_"RIeOr`n@*oFcbKJ<n)"*>lS!bb%tFAP5CWLITDg+d6N6c[^])Ec^]!hds7#3ds7MH1ro*nUqu7t`%WsbEsmW\^)huDTKr,4u<gn"~>%AI9_PrivateDataEnd