%!PS-Adobe-3.1 EPSF-3.0%%Title: Stribdotcom green/b+w.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Elizabeth S Mullen%%CreationDate: 12/5/03%%BoundingBox: 0 0 271 68%%HiResBoundingBox: 0 0 270.1490 67.1387%%CropBox: 0 0 270.1490 67.1387%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %AI7_Thumbnail: 128 32 8%%BeginData: 1646 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD3FFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Stribdotcom green/b+w.eps) 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -67.1387 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 67.1387 li270.149 67.1387 li270.149 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo270 0 li270 67 li0 67 li0 0 liclp232.149 21.6094 mo232.12 20.2852 231.153 19.0381 229.812 18.5606 cv227.927 17.9219 225.474 17.9712 223.896 19.2891 cv222.065 20.8018 221.745 22.9727 221.772 25.2466 cv221.749 41.2046 li213.839 41.2442 li213.845 11.4815 li221.976 11.4703 li221.989 14.7989 li224.657 11.4532 228.579 10.4834 232.862 11.3223 cv234.747 12.0606 236.835 12.7042 238.198 14.5328 cv238.827 15.4957 239.808 16.5162 239.532 17.711 cv235.913 23.4874 236.327 32.5479 240.464 37.9844 cv240.499 41.1978 li232.089 41.252 li232.149 21.6094 lifalse sop0 0 0 0 cmykf202.558 38.2227 mo200.253 40.8262 196.86 42.6876 193.313 42.4141 cv189.517 42.2862 185.56 40.1543 184.337 36.378 cv182.62 28.6602 183.741 11.4688 183.741 11.4688 cv191.792 11.4937 li191.79 30.7295 li192.151 32.5879 193.024 34.5567 195.015 35.1475 cv196.708 35.4327 198.61 35.3721 199.981 34.4004 cv202.673 32.3555 202.294 28.9463 202.558 25.8013 cv202.556 11.4639 li210.558 11.5 li210.528 41.2159 li202.583 41.2032 li202.558 38.2227 li0 0 0 0 cmykf97.1343 17.879 mo93.8892 17.6114 90.8326 18.5997 89.2217 21.5674 cv87.3072 26.4102 88.6197 30.9102 88.1812 41.1197 cv79.9185 41.1016 li79.9263 11.5235 li88.1529 11.542 li88.1519 15.1944 li89.7691 11.9766 93.3589 10.0499 97.0904 11.0274 cv97.1343 17.879 li0 0 0 0 cmykf267.622 18.4893 mo269.306 21.7745 270.177 25.543 270.149 29.3433 cv248.622 29.3663 li248.495 30.4102 248.745 31.2227 248.987 32.1583 cv249.794 34.2754 251.954 36.17 254.149 36.4649 cv256.796 36.7198 259.604 36.2774 261.056 33.7569 cv261.245 33.1602 261.183 33.2227 261.245 32.8477 cv269.745 32.8477 li269.528 35.9937 266.745 39.1749 264.163 40.7725 cv259.856 43.5342 252.847 43.8907 248.296 41.3965 cv242.804 38.5323 240.321 32.8301 240.343 26.9292 cv240.46 21.2305 242.618 16.0235 247.683 12.9273 cv251.983 10.5152 258.481 10.6495 262.679 13.2364 cv264.751 14.5792 266.464 16.4146 267.622 18.4893 cvcp261.421 23.3126 mo261.39 22.4117 261.005 21.6534 260.62 20.8956 cv259.083 17.8135 254.903 16.7764 252.021 18.418 cv250.198 19.4805 248.909 21.3545 248.919 23.3052 cv261.421 23.3126 li0 0 0 0 cmykf68.8296 37.9512 mo65.9922 42.1934 60.5401 42.2315 56.0118 41.1377 cv53.2227 40.5801 50.3238 38.0704 49.4312 35.251 cv48.7852 32.6373 49.15 29.4942 50.8916 27.4795 cv55.3438 22.5704 62.3228 23.6641 67.9688 21.4795 cv68.733 20.7959 69.0044 19.751 68.7252 18.7447 cv67.6177 16.6719 65.3775 16.1749 63.1255 16.2295 cv61.0733 16.337 58.7584 17.0391 58.063 19.2256 cv57.9322 19.6602 57.9322 19.9727 57.9322 20.2852 cv50.9419 20.2867 li51.2027 17.3409 52.2564 14.6553 54.6968 12.7046 cv60.2081 9.76758 68.6597 9.792 73.7798 13.6978 cv75.5357 15.8848 li76.8072 19.1602 76.4947 26.9727 76.5669 41.1114 cv68.7798 41.0977 li68.8296 37.9512 licp57.8374 30.1729 mo57.2203 31.0108 56.8467 32.1534 57.1744 33.2603 cv57.3521 34.3145 58.4869 35.0879 59.3794 35.4561 cv62.2115 36.3648 65.3238 35.7784 67.4644 33.8223 cv69.0074 31.753 69.2681 28.8082 68.8218 26.1983 cv65.2867 27.876 61.0386 27.7388 57.8374 30.1729 cv0 0 0 0 cmykf131.829 9.66993 mo131.823 2.38282 li98.3677 2.40137 li98.3785 9.65137 li110.558 9.63379 li110.586 41.212 li119.28 41.2066 li119.317 9.68458 li131.829 9.66993 li0 0 0 0 cmykf122.524 41.2071 mo130.537 41.2002 li131.026 34.1529 129.371 26.8946 132.293 21.004 cv134.094 18.5401 136.816 17.4463 139.91 17.8101 cv139.952 10.959 li137.307 10.6543 li134.653 10.7999 132.113 12.6983 130.964 15.0752 cv130.968 11.3838 li122.492 11.4102 li122.524 41.2071 li0 0 0 0 cmykf142.936 11.4356 mo142.935 41.2393 li150.995 41.2232 li150.995 11.4376 li142.936 11.4356 li0 0 0 0 cmykf150.995 2.41016 mo150.995 9.63184 li142.936 9.63184 li142.936 2.41016 li150.995 2.41016 li0 0 0 0 cmykf21.9947 9.66016 mo31.2544 9.67188 li31.1822 8.47266 30.9322 7.59766 30.4664 6.65479 cv29.2593 4.52979 27.1001 2.53467 24.918 1.63965 cv18.126 -1.25098 8.76661 -0.893555 3.34864 4.7959 cv1.08838 7.7002 0.204102 11.7833 1.22657 15.5547 cv3.24561 21.9478 10.0816 22.6885 15.4537 24.0997 cv18.2876 24.9083 21.4341 25.1226 23.69 27.2696 cv24.5718 28.1885 24.8975 29.3453 24.6705 30.6905 cv24.6412 32.0899 23.4195 33.1153 22.3516 33.9937 cv18.9205 35.4732 14.1563 36.125 10.7994 34.0059 cv8.9712 32.918 8.21143 30.7735 7.79834 28.9639 cv0 28.9825 li-0.225098 30.1783 0.255372 31.1382 0.384278 32.1915 cv2.07276 37.627 7.69727 41.3433 13.191 41.7066 cv20.1832 42.1504 27.6939 41.3521 31.6744 35.0328 cv31.6724 23.3829 li30.1822 20.4517 27.2042 19.3399 24.5752 18.2862 cv19.8126 16.4376 13.9502 16.9668 9.7671 13.6802 cv9.33448 12.8213 8.7002 12.0577 9.02393 10.9141 cv9.15186 9.56641 10.1241 8.48633 11.2403 7.70899 cv14.2208 6.27051 18.8072 6.03516 21.44 7.81934 cv21.8697 8.47266 21.9947 9.66016 21.9947 9.66016 cv0 0 0 0 cmykf48.4048 16.875 mo48.4322 11.5352 li42.9947 11.5352 li42.983 2.11036 li35.2105 2.10157 li35.1822 11.5352 li31.2193 11.5142 li31.2535 16.8213 li35.1949 16.8516 li35.1802 24.7549 li35.2891 29.1583 34.6822 34.3477 36.0777 37.7266 cv38.4898 42.0274 43.9161 40.7886 48.2134 40.9771 cv48.2042 39.6778 li46.981 38.3521 45.9502 36.7295 45.5875 34.9219 cv44.5376 34.9004 42.9947 34.2227 43.0123 33.3204 cv42.9859 16.8716 li48.4048 16.875 li0 0 0 0 cmykf162.558 41.2227 mo154.331 41.2261 li154.288 2.41016 li162.575 2.4375 li162.577 14.7754 li164.063 13.0059 166.347 11.3526 168.757 10.9522 cv173.321 10.2959 177.345 11.629 180.325 15.0411 cv180.571 22.4976 179.558 30.4288 181.065 37.3614 cv178.237 41.1534 173.894 43.2149 169.062 42.2652 cv166.671 41.8658 164.319 40.5591 162.558 38.7227 cv162.558 41.2227 licp171.271 17.6055 mo168.985 16.9083 166.671 17.5108 164.989 19.0264 cv161.726 22.1094 162.216 27.421 163.286 31.3443 cv164.288 33.6651 166.397 35.6587 169.101 35.5645 cv170.95 35.6524 172.466 34.834 173.792 33.6104 cv176.462 30.2149 176.526 24.6153 174.806 20.7784 cv174.083 19.4136 172.659 18.1343 171.271 17.6055 cv0 0 0 0 cmykf28.0074 62.2637 mo30.1075 54.7129 li33.4825 55.6387 li29.3077 66.5879 li26.3326 66.5879 li24.6578 60.7881 li22.9825 66.5879 li20.0074 66.5879 li15.8326 55.6387 li19.2076 54.7129 li21.3072 62.2637 li23.0572 55.3379 li26.2574 55.3379 li28.0074 62.2637 li0 0 0 0 cmykf46.7574 62.2637 mo48.8575 54.7129 li52.2325 55.6387 li48.0577 66.5879 li45.0826 66.5879 li43.4078 60.7881 li41.7325 66.5879 li38.7574 66.5879 li34.5826 55.6387 li37.9576 54.7129 li40.0572 62.2637 li41.8072 55.3379 li45.0074 55.3379 li46.7574 62.2637 li0 0 0 0 cmykf65.5074 62.2637 mo67.6075 54.7129 li70.9825 55.6387 li66.8077 66.5879 li63.8326 66.5879 li62.1578 60.7881 li60.4825 66.5879 li57.5074 66.5879 li53.3326 55.6387 li56.7076 54.7129 li58.8072 62.2637 li60.5572 55.3379 li63.7574 55.3379 li65.5074 62.2637 li0 0 0 0 cmykf73.5074 67.0635 mo72.2828 67.0635 71.2828 66.0635 71.2828 64.8379 cv71.2828 63.6133 72.2828 62.6133 73.5074 62.6133 cv74.7325 62.6133 75.7325 63.6133 75.7325 64.8379 cv75.7325 66.0635 74.7325 67.0635 73.5074 67.0635 cv0 0 0 0 cmykf83.3824 57.5879 mo82.4576 57.5879 81.8824 57.8887 81.8824 58.3887 cv81.8824 58.8379 82.5074 59.0381 83.0074 59.2129 cv84.0074 59.5879 li85.4576 60.1387 87.2574 60.7129 87.2574 63.2129 cv87.2574 65.4629 85.0323 67.0879 82.7574 67.0879 cv80.8824 67.0879 79.6324 66.5635 78.8072 65.8633 cv78.8072 62.5879 li81.6822 62.5879 li81.6822 63.9385 li81.9576 64.0381 82.232 64.0879 82.5074 64.0879 cv83.3824 64.0879 84.0074 63.7129 84.0074 63.1387 cv84.0074 62.5879 83.3824 62.4131 82.8824 62.2129 cv81.8824 61.8379 li80.7574 61.4131 78.6324 60.7129 78.6324 58.2129 cv78.6324 56.0879 80.8824 54.5879 83.1324 54.5879 cv85.0074 54.5879 86.1324 55.2129 87.1822 56.2129 cv87.1822 58.8633 li84.3072 58.8633 li84.3072 57.7637 li83.982 57.6387 83.6573 57.5879 83.3824 57.5879 cv0 0 0 0 cmykf96.2823 65.5879 mo93.232 67.1387 li91.5826 65.6133 90.8824 64.0635 90.8824 61.7881 cv90.8824 58.3379 li88.6324 58.3379 li88.6324 55.0879 li90.8824 55.0879 li90.8824 51.5879 li94.3824 51.5879 li94.3824 55.0879 li96.7574 55.0879 li96.7574 58.3379 li94.3824 58.3379 li94.3824 61.7881 li94.3824 63.4385 94.982 64.5879 96.2823 65.5879 cv0 0 0 0 cmykf103.758 61.5381 mo103.758 62.0626 103.833 62.8135 103.958 63.5137 cv103.958 63.5137 103.283 64.1885 102.333 64.1885 cv101.808 64.1885 101.058 63.7881 101.033 63.0879 cv101.008 62.3135 101.357 61.5381 102.758 61.5381 cv102.857 61.5381 103.758 61.5381 103.758 61.5381 cvcp107.258 61.6387 mo107.258 59.2129 li107.258 56.5626 105.383 54.5879 102.258 54.5879 cv100.258 54.5879 98.8824 55.7881 98.8824 55.7881 cv100.708 58.1631 li100.708 58.1631 101.283 57.7383 102.258 57.7383 cv103.258 57.7383 103.758 58.4131 103.758 59.2129 cv103.758 59.2129 103.308 59.2129 102.758 59.2129 cv99.5074 59.2129 97.482 60.6133 97.482 63.0879 cv97.482 65.3633 99.6822 67.0879 102.008 67.0879 cv103.958 67.0879 105.033 65.8135 105.033 65.8135 cv105.232 66.1133 106.107 66.9883 106.107 66.9883 cv109.158 65.4385 li107.857 64.4385 107.258 63.2881 107.258 61.6387 cv0 0 0 0 cmykf117.107 63.5879 mo117.107 66.5879 li110.607 66.5879 li110.607 63.5879 li112.107 63.5879 li112.107 60.0381 li112.107 58.3887 111.508 57.2383 110.208 56.2383 cv113.258 54.6876 li113.833 55.1387 114.532 56.1631 114.532 56.1631 cv114.532 56.1631 116.458 54.5879 118.107 54.5879 cv118.982 57.9629 li117.357 57.9629 115.607 59.9131 115.607 59.9131 cv115.607 63.5879 li117.107 63.5879 li0 0 0 0 cmykf127.982 65.5879 mo124.933 67.1387 li123.282 65.6133 122.583 64.0635 122.583 61.7881 cv122.583 58.3379 li120.333 58.3379 li120.333 55.0879 li122.583 55.0879 li122.583 51.5879 li126.083 51.5879 li126.083 55.0879 li128.458 55.0879 li128.458 58.3379 li126.083 58.3379 li126.083 61.7881 li126.083 63.4385 126.683 64.5879 127.982 65.5879 cv0 0 0 0 cmykf136.257 63.5879 mo136.257 66.5879 li129.757 66.5879 li129.757 63.5879 li131.257 63.5879 li131.257 60.0381 li131.257 58.3887 130.657 57.2383 129.357 56.2383 cv132.407 54.6876 li132.982 55.1387 133.683 56.1631 133.683 56.1631 cv133.683 56.1631 135.607 54.5879 137.257 54.5879 cv138.132 57.9629 li136.507 57.9629 134.757 59.9131 134.757 59.9131 cv134.757 63.5879 li136.257 63.5879 li0 0 0 0 cmykf143.007 53.4629 mo141.882 53.4629 140.957 52.5381 140.957 51.4131 cv140.957 50.2881 141.882 49.3633 143.007 49.3633 cv144.132 49.3633 145.058 50.2881 145.058 51.4131 cv145.058 52.5381 144.132 53.4629 143.007 53.4629 cvcp139.732 58.0879 mo139.732 55.0879 li144.782 55.0879 li144.782 63.5879 li146.282 63.5879 li146.282 66.5879 li139.732 66.5879 li139.732 63.5879 li141.232 63.5879 li141.232 58.0879 li139.732 58.0879 li0 0 0 0 cmykf152.731 60.8379 mo152.731 59.3633 153.507 57.8379 154.981 57.8379 cv156.433 57.8379 157.206 59.3887 157.206 60.8379 cv157.206 62.2881 156.433 63.8379 154.981 63.8379 cv153.507 63.8379 152.731 62.3135 152.731 60.8379 cvcp152.731 55.5626 mo152.731 49.3379 li147.731 49.3379 li147.731 52.3379 li149.231 52.3379 li149.231 61.6387 li149.231 63.2881 148.632 64.4385 147.332 65.4385 cv150.382 66.9883 li150.757 66.7129 151.481 65.7637 151.481 65.7637 cv151.481 65.7637 152.782 67.0879 154.981 67.0879 cv158.308 67.0879 160.757 64.0635 160.757 60.8379 cv160.757 57.6133 158.731 54.5879 154.981 54.5879 cv153.581 54.5879 152.731 55.5626 152.731 55.5626 cv0 0 0 0 cmykf167.731 63.7383 mo169.132 63.7383 169.782 61.7637 169.782 61.7637 cv169.782 58.0879 li168.282 58.0879 li168.282 55.0879 li173.282 55.0879 li173.282 61.6387 li173.282 63.2881 173.882 64.4385 175.181 65.4385 cv172.132 66.9883 li171.606 66.6133 170.856 65.5137 170.856 65.5137 cv170.856 65.5137 169.206 67.1387 167.331 67.1387 cv165.231 67.1387 163.282 65.6885 163.282 63.5635 cv163.282 58.0879 li161.782 58.0879 li161.782 55.0879 li166.782 55.0879 li166.782 61.8126 li166.782 63.1387 167.056 63.7383 167.731 63.7383 cv0 0 0 0 cmykf177.956 60.0381 mo177.956 58.3887 177.356 57.2383 176.056 56.2383 cv179.106 54.6876 li179.556 55.0137 180.382 56.1631 180.382 56.1631 cv180.382 56.1631 182.155 54.5381 184.03 54.5381 cv186.155 54.5381 188.206 55.9883 188.206 58.1133 cv188.206 63.5879 li189.706 63.5879 li189.706 66.5879 li184.706 66.5879 li184.706 59.8633 li184.706 58.1631 184.382 57.9376 183.632 57.9376 cv182.231 57.9376 181.456 59.9131 181.456 59.9131 cv181.456 63.5879 li182.956 63.5879 li182.956 66.5879 li176.456 66.5879 li176.456 63.5879 li177.956 63.5879 li177.956 60.0381 li0 0 0 0 cmykf194.456 59.5879 mo194.456 59.2881 194.905 57.7881 196.28 57.7881 cv197.431 57.7881 197.681 59.0879 197.681 59.5879 cv194.456 59.5879 licp196.28 63.8887 mo194.882 63.8887 194.356 62.2637 194.356 61.8126 cv201.231 61.8126 li201.706 60.4131 201.181 54.5879 196.28 54.5879 cv193.03 54.5879 190.757 57.6631 190.757 60.8379 cv190.757 64.3633 193.106 67.0879 196.28 67.0879 cv199.356 67.0879 201.106 64.8379 201.106 64.8379 cv198.882 62.7383 li198.882 62.7383 198.206 63.8887 196.28 63.8887 cv0 0 0 0 cmykf205.431 67.0635 mo204.206 67.0635 203.206 66.0635 203.206 64.8379 cv203.206 63.6133 204.206 62.6133 205.431 62.6133 cv206.655 62.6133 207.655 63.6133 207.655 64.8379 cv207.655 66.0635 206.655 67.0635 205.431 67.0635 cv0 0 0 0 cmykf219.331 59.8633 mo216.331 59.8633 li216.331 58.2383 li216.106 58.0626 215.38 57.7881 214.755 57.8379 cv213.206 57.9629 212.655 59.4131 212.655 60.8379 cv212.655 62.2637 213.331 63.8379 214.755 63.8379 cv216.056 63.8379 216.931 63.4131 217.38 62.6631 cv219.581 64.8379 li218.331 66.4629 216.831 67.1133 214.755 67.0879 cv211.481 67.0381 209.106 64.0381 209.106 60.8379 cv209.106 57.6387 211.356 54.6876 214.755 54.5879 cv216.981 54.5137 218.356 55.4376 219.331 56.5137 cv219.331 59.8633 li0 0 0 0 cmykf224.306 60.8379 mo224.306 59.3887 225.081 57.8379 226.53 57.8379 cv227.981 57.8379 228.755 59.3887 228.755 60.8379 cv228.755 62.2881 227.981 63.8379 226.53 63.8379 cv225.081 63.8379 224.306 62.2881 224.306 60.8379 cvcp226.53 54.5879 mo223.206 54.5879 220.755 57.6133 220.755 60.8379 cv220.755 64.0635 223.206 67.0879 226.53 67.0879 cv229.856 67.0879 232.306 64.0635 232.306 60.8379 cv232.306 57.6133 229.856 54.5879 226.53 54.5879 cv0 0 0 0 cmykf240.405 57.9376 mo239.181 57.9376 238.48 59.5879 238.48 59.5879 cv238.48 63.5879 li239.98 63.5879 li239.98 66.5879 li233.48 66.5879 li233.48 63.5879 li234.98 63.5879 li234.98 60.0381 li234.98 58.3887 234.38 57.2383 233.081 56.2383 cv236.13 54.6876 li236.604 55.0381 237.405 56.1631 237.405 56.1631 cv237.405 56.1631 239.056 54.5381 240.655 54.5381 cv242.63 54.5381 243.706 55.7129 243.905 55.9376 cv243.905 55.9376 245.431 54.5381 246.905 54.5381 cv249.005 54.5381 250.98 55.9883 250.98 58.1133 cv250.98 63.5879 li252.48 63.5879 li252.48 66.5879 li247.48 66.5879 li247.48 59.8633 li247.48 58.0879 247.23 57.9376 246.655 57.9376 cv245.431 57.9376 244.73 59.5879 244.73 59.5879 cv244.73 63.5879 li246.23 63.5879 li246.23 66.5879 li241.23 66.5879 li241.23 59.8633 li241.23 58.0879 240.98 57.9376 240.405 57.9376 cv0 0 0 0 cmykfgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Elizabeth S Mullen) (Minneapolis Institute of Arts)%%Title: (Stribdotcom green/b+w.eps)%%CreationDate: 12/5/03 2:55 PM%AI9_DataStream%Gb"-6l],5lOXBi+nIGAm##anDiV/8W=<KD_g!e]TQCqu4RLfZ)4,YT=MTHLr6B1^'f06gVq`/YZ;I+t3+2s>_$4B(Igs+*gmI$To%Er4t-mm$^/rTCXsrpO3!q3nKn,k%p7.T\94MPj66q&`uAk3^dt<nBNgJu7rs]@<g.^(/\+IcrhY''RHL0-@rWHMd]2?[qb1j4gcP%5(ECrbHJYZ`T`SUJ'GaCs5Mkhq_,^1HLoB]\TWMBhfFG-If8F#\%fH4rtb+=^41P)m:U?erU.qjgX#llM15FB5LeT^It.=gRr;tJ%?dl7CQ02MgrjVQC"MJhWm^dT<bOqp.H0675s*su-2?#i(8,<)LGJAG#q%mCfo@9=K^A.9ts2'gUs&rquT>(9q)hHJ=INcu#a/ch]%IsCSP]5M5U=0iY?k;PW?ipM<hB)o[.LC0$YoDed[07=`C\G<f,pn*!+(V^>7>fEb^YPIjpn*l2W/W755R=5VAjRMh+_[qCTs*4G5%kBCjYH-7]W?+IrnG5S[qdC-Dqgof2nRVTN];16'ZJZ,I-X<8T7KB/.d")gDOnb+WN\GG<Va"Q;!oB"SR'^YhqManqHS$0R%oS`a)%<^*m6j\lfUDn^Yop8d)bs5Fta,#_("a+!jGB5c[)g[XY/]/QC6'kR<P2#*+j?[_qI)ku@GhgLD/Tc#igl/07(H?f&5[pKFBi<@!m%o@s$>n`;8Bm>L06SX##/'RIc+AW3e6aq:M!WVS5R<Tt,:i,S(ldOP3a8G-%kII[+Lmsf>.4JoR^qd7,6o@pHtoCh^D?bGl1`c+q7%CgZt9^]0HD6'$@(M!+fu-Z"Hcq<Emak!#a&Wl\U7qec.Y\,XWN$#AFGoCfjm^&J!qrqPm0J%^@'"ejM&FqptiHMK/[NV@X8^3N)m%6B'lQ]`$_h[t">\gX+??)"Df!pq(bJI6JT,7f42MIZ4rS`[JUYhrAErWYDfi"lDp<X&@<EPl#gnZZie@*Gmk9_:-)m<UXUTs2*Z,%FZuSNq2?]IBDcd6UWra#I_EKL"]+%5j7iFtGt(7Sj-B/U)s(-`Btm0T3rVT!bR&co($9$_Q/=8?r/EV%&cTe_%28:`k(LM>%5YlY%kXk7h4_$tV)tV(aJ7;8uVdNH[O&hVar^NCSHbaHG0QP"7?r=.]^ZA%T\Vsk7/n:*SA)t'fejBA/($::dd?CZ)bZ]IZ'uRe"L&'C/%$Wc=kbR]3`)eLJ`O2#8eJDb@Q_Yio4XJ/OJi)SWp2]<-5j@2ABAhlQd3a)jH$njAW)*LGAj-'./caI0._Z$2;AnR?bg#6Y5[JYpX%iGZ(9qSrF9-h8hf7N9S>oSHGRm2a$5]KrLNB\7";W!ssf8eG72I:6n@GaHeaf&aSs2iQNm`9&CV7k8quoIeJ5n+&t</j!"1=k6hs%,<aiR+/.T&gZ=jP-am7Bc8%LVg)'$4\tAVMV^Dr,:7nS'=J"i/&K)qcoYcKDe])CnQ%%gdmiDGE^VU`!rWtl>RK(F%PiV`>=8n^R%a]TbX?hmX$I%UG]T@W(MC\I1nIr9/bQhdi_\\49so3_<7qW.'>+S/t9oCA`*TE!%U2uX(Ia4fKj=]bE:hrJ.5?V'@En*f[qcgUWf%Xiu!6,3g+3H27FqS6thok:`GMOaM!n)p+$,^AM5b)un0td$aatTB/c0n%\ns0<$gc06GR4rr(0@I!,=8q>"C3HLof+eFP>rIWeB$%lC\(Qec5R-(Z2n(q.]_k%cqYPqq:4XVggnXn6Y[!DsqW4qgH)[pZ4TrVu(]\meshGGu$uFH[1'cqsrl\J(\/ZQfVe-R9mn"iMD%g%mdBOMddipsDXVK2qHZ2=e[ojgn'YLS$[;TqSaXlXcZ_dl\*'6%5IY\sQZG?gF$,5a5J,\IgR#Bn[qAnCS(iDHDX2/Mc*upqhM,6a%lV9D52_T+;DU(2M6ob.Bh:.p7PAelD]EpOr`qB6.ZJY=r^[3teV-:(9o\<B+4`oRe]5K@W>s#OMG11bQVcI#9\YU'GBYM$'?XMBr%HEOaMVY8`"U'o(5WCE&1I!+Pb]I\9g>]._Zl(sY;]0)8s&kaVuK:VR]I[TZq3T&tggiLXr(YUJj`uMB4p#J<M9QrmG\*574e5B!e%A_LlRL#eGUp[Mh-Ms#=(Ddndp'Pf6SP9LZMLd&Ch+'s]6E"9A9-M5YO%4)Q#LIh<p#NtRS97Q-Nrmp!%m[LDoq!=3*4qIs<-V"R/%BJ&#A,D8(GZR_%?k,<2'Nq%Ujgsmde^\s%'!n(U+J^Q:6e'f\Z?QcgbT=fOj^Q.dTg[1P.,8%6/i\>_Ms7k-2:EW@0&#]q(P)b?]%cr1cMRF*:0U4*/n]RHAu#_i#37etj0kH(<1'4LU#Z$XA*Q;>t*j\O9"erRJgrWN4FrO>dJps?V-o@h:K:-WCjh!4&l5Fk#55F"H%%5P[^jR<_@;0<9KeO6;Rf%kY5;?Lm8S5A0uNlK@:tP]4Oid$Z*=;tX)aPP&G,PhG<Uo^m+nEVH-"H`!R)9M=q:lfXQu2u;e8C&Ft,%.K%<a8LI_'6)DiO?H>P1'7]k85:M*YkL1RLolIV>S9LU[MpIB2[Td9kg;TuX5%XK9NH?(#C@8(ghO:'Un_*r9H(Va=+5MG4kN2,Q%\,2]iT9F0Bq751,qSfB"5'?go`kGbDH1snB:V?JTp(+&A+'A;hr#nu-E`<Y(>f1gFM)Ls#rU3DUVrqan]9E4Ti.!qIOKK[p[G\j)%@osCL)QEu:[OARh\$Da:^p``!%SA&MM5h*M8*J=`e*+61R%fSgD$S/-YcT,hagRRR4kYpC3fO=9-[qWbZ(k#'\uZu8#N\pl1K$tA%4$W*p4eMLo[DUQ*?Ts>P6.nGc\(Mi`e*Vgt'>L,@!&/E._ugSeDY56;`1;?Nc=!V]d'Y#QS9T3(Yh1$0B3;NLI`@$PGi:G3FQ8(g%j`PsmlfNJ`YW@ISUGMJeN,50>1I`$fYau\C5h)4lEmJt94E&HPo&O\5175pA%ls+b0s4.0he=%bdWW-qD/k%L.eL)1OiEr+hc/;o%SbCG_mAE&"=8,+TSsCtVN&'e49)Gg@5.m_uk`3raH_O_?$QA92b&h7G'-1DM%^B5!bjO[k]-id8[*k'H]1du$Bp*Q>hU"i=VA&K2%]-gMN6j&QHb=ngGV:2d".=+XbkoH=ppF"YsSqnW>ELZ4FX`XJaka-B2hpJ]V:Rf68d6p%!1S*9ccL4Nkpar'"GBC"Fe#)Y'9p*`u%9]pjfOT<a"&@a$;i/RqmHeM2ca=NLiO@aDiGE&DS)j2Pn:eL3EBqKYp^ISu--HW$G"O]jS\L!)cFOlfQ-Yu%E-Aa:,0G7`+<[>i7%X%BC<H%0b.i!)]=ggK](/I14)5;rMrnmf"uQCVp*>kb^Fm^]I_QCaRkCh259fYhk.cAfHlZ?*AC2B@-d]/t.:Soe2^/]h4:m)89$%S@`^OlZfn\Ail!CB"P/8V_M1qVJOU;W;FdQ%N6]Ea+k6Y(^`t+7.M_^YF-g]ZsT7#Yld&U!pg$UKJW'$lj%q+Gultj$j,mX.-f"_%rM[Q<nn,^]l+CT3Bl<**iCt?i8HA`]!$21q&+Rl]]]Gj08#X&iVs<Gj"aX%<:Sp@+7!lX2:n<X]BAPGBS_b>EHLp_Xo9$o6L]?U8%?d8o!o#F_k78l252!(2/20g_4YN#I\Giq;hSToUZ*ZliOc`5!_SWnMt()+@uVtch9@sZcFA-d/O268eLP2V80p@-/O0=`a%SYKP9%cR&J-*Bgn03itcKmm`N;qQ&NRlLicpW8>ahKkUqp/s`Bl]_URcIsq-ZT:a,Q9j?(Bh"<&_Wnc..RgL(q&!t>GiqVbnbMufHr:Ing%nZ=d"qVh#?<ZF@&E-Zg]Nh:d14MDQN:P\N9SeD$o5C7ar7m<i3rZ&ZLkB%!D1p[&8T@;rghKncV5,XBKj+i)>bYJIEVsjJm0P#V(%o92'.VrM7VQ5P>Mac,hT).sp.IaWrIM-Knr/QUiY:]J"u]$/1;^4Wa][(tCi&8f7`41Tki@tU,-rcI\"C1H*cC#dQI_4hB6:tPmT%XC,r1-YP:ps8DT!hnFU?k3;8G=._#,b*+<!!;n:Ejen+4s)ClYlaQ?>IJK51s*"(9YMQqlr9`$Qka+6sLg6SJJRdn6d*(nYQmAr%%-2,d*Yro9^'W2%-o^A%o%],'3a0a5]WT%j;'rR,YUE>[M9H'6^0/oN8j`=`l\'*rHq/lM(QrhL->s;iqjQ2TF-S?LKEh<&u&[8T]%h602;J*rWKH$jMsF(1/@T>#^,nu:YJk%>E4J%%3*E96rt6YEVA!cs[+rIZolkf8bO)$6m*N%\Lb,eB,%%O=@R=TVsD7pP(U?Te;o%!KI"1T4g+/s(F+D/r-C;qTlqIfDgd.oD^/q?`qi-0<]j!^YI@P%0+Z2k]EHl?g?[&re%hgs)S#Z:B,ags8=JG%:eIAbPKi@T>"f2%J)LA+%<IqedJj-^YgT\<l]lgka6`+RqC:,Mr]7PQI[=s`j6)r8&US<.gXk+$Q"sim`>[C\fc^"Si``Vlp2t'\BMA&V2:/P56-(m]%0a7M6J+elAPfFL)ldC<flLO/S^+LY'+dG&Sq.;hnA]-qpQlIeH=7?loN1SlaD$Nbh>/-#PSi1EjCtBGDp7%?TfsS`I]ZZe1"1Du\%F3*m_'@5IXMcR*k'JAOU[PaG[h9TkRCTr4kRDmlX+T$=?LUEtpp2+XVoM3gC\+=(_lBh*GgCBUZh9TkR4(,\/15iQ:6?_a4%Vs5g%gU4FLTVo"u0@5)/=Kf-7_6!$Q?>EbtmG#c7es6Bj\$J)r/If.,46GI3*B3:1B\?0sD*!tURdOgr2BAj+D5pN:)X:dKRuQqk%EDXh%S'k@/]g`)g/KctjJSn$\?Q0kr2Bj?$^#ZS`JS$-6Y<-TZ[?6$+T&dr",Pb+octd-u'jAY;RAOPQ2Uo/%JF2(ELtB';[VKX\?eZ(C%^0d;DVHX4<bPfY$:TZE/)SK7>V6.T-D$T3i[KbKq[09[$.`bf]7r+W3*Na==rFjfk@g9QRL@_h?+L#-US&O*)b]_mII,/nFPO7*6%CpU@PBUp#!E_MfU>MC'4hpuDE[Pc^OXj(<lCTr_GAb_a4"_94Z1TUMdX"6"Q9?aIY&D5EQb]VOek--Z_;r'==.4e369_Z6C'\6$%%T%`\ime%Nf<S3nUIsZJjdPWe?7(,:D[a/<prr^\qOf2^gH'KNGP2&M)eUmh().-.r7fm&oHEsa&S]K+<&.lnV[/E%>FFWuZO5Ko#%gtbG?-Os1[$8kjr?1D#'r8![:?i-l^7`+UCRg-9+oBKPDatGDjgP?rqA\KX"7fqae^Q:dYZh#[Dfi=HtQ_*EWPk[O^7.\&`GsA0H%(%Zel3f<RPm?!-R`n;]5j&!0/_W6)H)ppcqg^K#d:J^gDYuKjabNigIDU'iZn"ZYn=DD>`Kf%:Q918e*^[;pql_CWh-;^pe^<L8H%QCrT+Y:ErCW*e.EJj1uA7?4FuSL;hO\s@5$l[e-dlPfU>)sq]E\\`KG;8uX^"g>Q(.taRYKfV[mK>[n+SnXSm8_D]BOFta)=nXoJ%'ce/Z,+7g:l24<YBJbH3J24$jM,t6i]oHE3=g%qP&q"Cg1026nAA)*Oi/DhT,US#3id;o3,<-94E"HkCfB_cpm]4s=cg_7i`P;Zc%-HcRG+jnbeG"2*(m>(t9PlGBp[Bu@;g#i".Z-X2sN1HaQSB8_BAeSA(`Y6QR)L!IgP<-j/Neti:pp+BBf=)K2bO&VrHrLt@o6+mg%K(hrCGbt)N)`?tc3I2PdA\9S`VY$?IKLS-Sr1qc,NDkd*]Q]ZBe-V1_h5XSD[8#e=9&I961Hh$d>@e$6%13G<LN\1W]eE?-UT/e%%KM/B5"9Z(dU"gRVpDr9%b[MqIni"X5IR.)5++jn_o\Iq,YiW9rcugu,conV)-[YL*H$?:tN\rgK!Jh*S[O4n9ms@Y4gS'8ModpMu%gb^08TKQL,*MD;s`B_9:e"f%a)`6ielc9H8[m:6_Y@?0C.LR2FP1Ket[U^b54KZPY_Bdm=l=OoG<9PuK*1]kDTRJ4qYUEm%Q[,/-%=ee\1@Af:n;Ha&n:EF2Sf-PlOg+HXiPDlC&kPHmWR`$$KMi[rJKY/BdkTm>V#@K%_JE0)1@MD#J*ZNuASH,"`nmh'u%&n*q[ge`j%Q`aU"#p)m>A_-sNEQ\`CkSI.eI/tmGdi2rKSq*!<),t3_SHGd$9.dCK;VTnT72"7Pa&K-GK9;!me\]LdY-V4i]cNrZlS<C')>2H\%Dfo3C.loFQ9LOk"R7B&ZW`?,rlc#=O:r(a_Qa^E8JbO1(DbWe=1+_TqPXQK1eB&oR/O%n@:+B3Wd*5%AiK`c9,=mrG]@t,"j$mc5%qqYMW#\g%Cp0\/1^.9ae=lD2J&[CjEjUJXbQ8S48>@8R-%D!"WKGR@3"_K@K_S!5gMH\XW;3PgU%>fp,1`;d%p(4[fW*Yh`[#m.`%4%gQXZrG71T&_tO1.\u\Pif3E[';o<7D)EB\;_^768%J@,:XDOGR3!T"C(\i:UW\opD=2BG@`PZ6Xm<r:#W0t'$_[-<+.S%&ohSd%B,+G2"GRJS7)iDl:oHT&3>;+\9mLq\ijGFsD'innmp!.T_+h<.5o$j;[qq>!E1ks]SSAgu1n-)"d\U8K[MhfM<*7:D(%DNt8D<>G%rfZZLYYXQ9:>2oE8DL+d>Buj0XTH7pkg[XJ7ON=k("-+[-C&^$IoCiT!3Uo22;:aSe7o`#7;0]V=/hTo\VeW_UTU[c`INpX8EAmc%\/3B$jE[5Kc.Spt%=:FfXpgp&/TdJ\?p5DTW?eQjX;`o;71R#;me8!.L;0't'2':ZD3C2#J$0UJiU**FDnj#4EHV<Dh7K_[TCr8a%HAA8IZprJc;;CF."9"A1$X4Wp4`=`Sq^<K_P>[#$:C!FQ4kn*9IQ<l`Y$4k<nXj>@\YL2of\NOoM0.:8TTf1H4,(E"^gCTGD=U:?%$9<<6':2;",=/BA9'TN;"9]AEQ-MRKNH#_+%p\@[2QYq5*`K1B7$!oL.C:`KSb5Hnf*AV%8TjD@N_%ll0#I0c6Y6s(Ksi*LNhR&G%.Mspg%\>RD6G^[#(V!?U^@pJHI79)&[mpfc(9^q_m$H^odf_d>#JH:D+(5ALHkn&ud3D:+Q$_j$U9Pp_@iqLET\+Q,A3^:_?o*I`%8)'NPa:*Wm<L$Su>Pj9A(O7.N$tujj?LtHK=?_/OpD.#P3Ih)Nn@MMR'Bi*Q$jkjKeIsI,@7@\2l$G%>Xj+e9'(a=`migEMW;f@[%GiGF[..U9uWDN>C3!"G'3I?#s?9>6CLP5d(":N4GLiX:Zq"-WX0B-9UicP/f/[_kDU8GfeBd;EnO[+s=MLCJD^I'3o2<=H#\nnb=%m,Ot:KL4`''1AXGC$8+)P\4sJf>PQ3Ru(8-&p^E`:&#_U#:Q,[\e8(<XT6AU5tgsDr@p$`lN#UXHrdhSoOT_N`#@;BktAih8XO'T%5Hme8#T^okI3`GC5#27f=*0CHmM=\I%^K1p1npFrlms\9XTnW=ZKQt[c<HF^IU/HLd4K>Olp9X\Z-sbHIbSRX"aCETQgZu'J<LE]%g=+c"<WF%ej,0opHMZJ;]nWs]V_uo3d!:9r+bW8c<mOIT^1'**g?,#sCjBuU8E("r9b[mdK,mX\^]rULS[5UK%uj83VQidi!*&2J%qZ03I&%qa&@e53U0f+E%L'%hE&QJMEXQ]S$<J`rH7[d8?[38ZAZsa9\jN"M4,SJR7)+%8G)2:jP67>081h9DA6%EmDR@U*CdDC%`%Y*A?n\j?ldZc(mOP<RY,M/tCZ=G.Kp[K_=g7g3>'#mg2jBo@KnZ@L309sq6MO%(\$!a-)C1E$X%V+?q4bJCB=T/r;s%i>R14U9.M%ZPl0'&2gREEX?G5@7p*@d;XY#O_#8qGm#hN>T?[XO31cY,S5D)bV!G9OhpFZ&5-FN$e*I*-'T1T\VI;mWAg5g(]L7>2F8b<Br18Z%AIf7X/t'M)&Ymcc2VLBh]r,W$1Qs%A*Ft\3G!6fg[SEq]JLqe5Atod+5S+:aI=i]jXps<%"Rh<tj[!0b+jlg5Kjl:e?SDZ0.P<4!%_WL4Hof<Ok*.3DO/9thrI(\BS+:_RrLTO&k)b1[NMqDPB5gA?X8\0*s_0,5Mo^%H1VJ9%m$]C`CV9Wp#AMVl]r;'`gXLQk&$^HOW%3!jU$3]^Z:U!'bW)KiE\2-6.VUQaY<k?6X'KnCqE.W<.Vdu^3d_QQcW2mFU=P)Opg[G\,0k)?X6G#*^]1o<XQN?hsL,84gEBA(C]%a)Y5,a&)Ct?kBg1[^<5<f^tcm(a#Ki$R(mFT$1D=,L%oqK:t=S__b3JK>++]=)ruk*8&g/4KS0WP/]&@kRBRWbE:]%d`M<\rWnr"%(a9e+6tY-b@MaXOOCcH:3Bm6N&t<!:+f#<[62Z@r'.6hKO:]i+@gRJ@B+_5\U`gu1Yj`<d6"j/qakinidY#F4&R&"76*rr90&$VO%?pUt.UL]j!XBegr=WM0s9a9#iJsa@/'DDMYY_f'Yc((2V5/P?+"9W_H`25dF:#C;Q4+Xtu*s+3U5!`tCcD(`S3JgQNS+%=o3Xb]b%hVsd%Ak5tlknfIQWK3M+?RIJgJp>60G84W_)=2t#LN]ccVs+K>6Pj-iR@"Dm2O'].S<%(M'=UQ)SPuKhAT/iM[DA!$L$o>bkZJXk%/1.$WBY2/`e0TPn6=*#$fZR+q=FL]kg6u^>6n*'u[EdZ.+JG7SmQ;phB7niW^f[,"U%7FQ/J;]<Vc17N+UrnCNu/:W>3;NDKY>D^%LHgefL7g\j7m':[[%p6mZ5m'@c1'U%rb41Zl!\i!e"&HtB<,FW7YFpE&[/P&VGZh#3_4djaF)rGmqdJ`;.OdB&tqKeJn&)r'0cY+%1#icU]s,0=4sB%ra*o[2S"V\o[8ipX'S&#L8D$YD7JI]eT>?Ohm,lS,XG'A7=[Xt##aqYOW:HZE;ds7"SF$m-K4h7umc2ih%iKj(%=pCLq^>el7;:/N\j./KC':NTO,^=qp]TU<'C\&ISigBtfC^<Z;KY"s+M54.+NM<r!ncubHG(A]ZjWld1KN5K(gfpCZh$mNh%[*bW%"20tqlc/f(#Y:$t>;\.,eMfC$K6Wli8=8U\Y[CA]!8t(5'iPpA_Ei)A_lTTLYmiOp,/?6E=r9QT;\i'8@Q-6niXclg)QSk!`kdq3%Ce:2]ER^l$?HhP],%bH:Pt/oq*1/3QZDhE:b(5KIc8l`AEXC1#B.kF/E^X@fQfrcuPlmFcd;`<SbGruV"bnK3RMnM<@oY-k))HUB%=Ht,r%QkabWZ4]bi4u@YYpr7*_EkC^KP,tt3@53tJJl$r*4df(El;ZiX6^25=Th3Hm>c5iWZ8SMUXSmH\HR.XepXk%Rffi3GT\h'%)L6KUGHdtIH]^di"'Z@>U;f`>B2]pgC\/Md\WRkHEo8JtA22jQU7!B0;3u7Y__DMC:,No?_8MGf3XD\s#DqVbQ5)Em26,RVSI!%g%ZCHU>Z6G(QMtKLlMB"9L*RCr6LZL)BCQeoL<F5B2O.1h09t#;$`(+X&[QNkq0IKAp[j68>IokT[fECM[$/KrWL7'gE*UWdAN!FYK%,_h]R26=j7f>_@_7$3+!RLcnNMB%'U])H(V;(U+t+Z`E$0sI?ZX6mIFU<R6[>GbRaeB?"IY]P/_M:;+1OK<BsS1%'2c4Q,FTJ>C.%`JQriL7+5m6^5L+8chS8c_\hm>QP9cZot0P.e79Rmg4YZ;<T37)>M*8hD>U9^X1T^4-V0)V541\\YssX8<`*uH\6Gi+:bS?&.BOK%JShZP$6(<"#TF$GL0.D@"VuE7Nm!Yi:nXR:X*,.:r`TEBMKF]J&1A/_:TNRX".AL!`YS?\+dN\F?/nkk@nQ:ll\;j+ZA?f!r^t[@%K\b[EKnu^#Bb.j@3eBB-LiF?]%`:jAZ';dhYKHjV*21lRZu;>]!jaI^1Pit/JIlmSNN0W50'nf-iA[(eM55D`df7J.&[;KkMH[51%#qO>LJ`'p+9J*Q4L@kafGS1V9/Z]5`Ko)Q4$WC#VSnL5PPr]I)k0:=I6<rk./7s]^0Yq^15O<$bQr4.s"f0_2=G7&XA`+^3JO%1_%):aYrTph1LGs+"[HVc.DnTWVDi*5_cW/e7ip:&DsZR-SuQp;V39MdgE;o@^"X(aj0e.4lt4V]4%0'IWgXLHTa1WZLaDZ`XO0i/NA%Hh]4X;Ojg.6mX6afPo[oe(M3-@)36k!?[d8Ab!oBOdlccXu[q_1Q'n^K\%o(d;+G[L)72=GEX[6RH2E.['*k0M6/u]VR'@gYe?N`%9W$6X`/KaEV;p2Bg,H'-7tW..1RLpm!3ul]7<Q2Y'Ugp@?%GOC_U.P'a"c.>V^ooJ=/Cr2A/5nZX/fRF!`SD7aA!sHe*ALMi5qHp%#>\;8237FARRA]/of?hT8sg]H*H_sk<X6qq+_%4sT`q.0PWAq#Q4epQ=#2B5EMM&a#^SWBXfb\ZV3k;=&4JAkR\5^"8TZ`=leiR/%Ff9G-%5$+"XfEr@Rp&m%@s!0uF[.+4nj]`+=D]2i]ad"?8fbSjG8E21?0-Ts0XSCugJ/2FX$]ise:F#g=0_4()Hn/DA1]tRXUZsj%a:YIR=1Us%VUZD8^ljFQB/Hu1F`>Y"QqXO_fqmnf<ep-c:i3R#,2Z(pAP*sTI*+9$e*7:-SY8`b3l!u\Wmhb#iJ$s2;HKM>LT*E-%^gNRN;l_EFnnK(H*Pri.]gf@i`-1Zu<NDm48M!E=MZ?0gD6uA!#P1p[E8&n0LJiof1/H>/V62eG^ZonHef^+q3ZWO*EE26W]dE@]%Pn"(@0rdj$(k\R:WMsuqASC!<WmVW$jm92EI)u*3hs8\foUE%uq"*7DIsr=9740Em52tq5)+/i1>smLEhoCqkp@`%S[6sX2DI0S5%dK8'L([n6^9nHgCJGp!eno`nFCncAL$M$O;-N"$CI]>UV>\&d!%1KI!JrAHqV&'68N?DlX(Ar%J)$IHpOTF$&FQP-&n@-YMqlUG3%XGt$CB++^I).qVtfDo\3i]>g#)o*@T6WN#(RCC9k[pOR\ocL<.TDeZA^Kg">P]h"I2t[.Mr6+?ZPJ=^)o4^R8a$drnpS*h09:QVB%)')u61@#C6fX4DDT^?Y_[>0OTINM>RBm<C-pT"s*%B*F$c/O+6m:r.*UjL6%8K^&3&e"l-IcZ[^m<B`l0FPP6oBEbd=D`&tedb1R%Z#oUGpQJ+^*.nmu*>A&7lrC\_m=1KD%qoYch+he%idP"`CH_$LKh)IakdA$]X61D+8`o?K5DY=E^5m1!QaWb.C$rG4gN4E;d"@R,%h2)eO$-$5)#D`/cmNa<!qe\<bHb75bg2@o)V;p1sb8-!eYR$M793kcof#)X2!td[+6o5O:TMI8Gi7bjr.;f`K!CQ)/2j/]U'bb[q%3<UUYTF5W@e<SdsIAP-7C:1LL0o!hjgVTp"7G>%^V3<uS$g,j=?acHg7#ot2E"A+t.6GnoP0a=J1g,*0P7q<-#!l;0^kt'p5RK!Z%HAn3EP&:bK&trChQ6]#Dg'Snt!7/*!m?]]7=,L@OWjP83Z51&,E*Iu0euik"O@dANi=ulC78HOGc7cQEVG&>F'_HODS<@&"q!Fd0%(j>[;TDifH3Je_%:E7gsa!?4gNl]I/g<c\`,9!fRUY<Y17R1-O=<KM43VUq!rt+Vmks((&IJOK5I\6V7\DO4a+RZ^C[12lZ<Q!4_%Ws6us+s^9"^XSSB4h#)h)GC&$+2q,B4oP*(E>S"lr_NADQ;L2OfgmN@Qf-j]P08%\>$BpbnBRLY9,(%JJ3IeCOb69(cltUm6UqY2%Zi'*AE)*TfHb.jME,\L!$+aBGfT:,@?p]#i_Aa*&R6_%]iYU$,?Rp[@Nt<_o*?LFYj-E=%!N!/GQWB`R]T'9f03f'75g?lc*J.)g%A?,mjetA8jU*ihOKp^IM_QO<>6QM6l-;5Ap1G0"o<(.6I#:6eb'eD'-jED=U^3F7H'*aj6':Rj;35jHbijdm;m-7qI/'Jga`Nh)]%EB"UKQ:K!M1C%q!dH4njZQ]Pg%qt_H7ZeAK(?NX!H.5g+3d_a(!+7,5\ZQt%3[pOCAHZ2F$mL!X,N5.c5s'YjoX/^Y0ial`E.M)Q%3lhc=)'0YYE-:q2N+-ZXe-[\Pgh:hpp=Ki)QnuU&lB<EK:,g5gJ12(j'KN8J+A$EA?)BhYHN_WQ:k4HFT,;^PdQpNgaU,Dh`!7U%%N2%(ol-[P;?<Ugj2cX6n")8B"b/>L"(I\JdZ`D6YMDHDB@7GNYBjr1pUBbA>XYFTKYY#\Y3-OnHS_(G+3=:LD0#o%S,"tO'<2FAp%X?[U^YY:hlPDTB-QN*g,J0gSSa*$X::_%0GUY`cfoU5Ga8Rd#$!i(QgO/G.n%aN`VR(FodI)!PZnLQtMgSS_ug@VqmQIeq%1=Y"A%19(6M+&Dp5G_s9NYgGN;Z-++lA%lD[fp>G>##)r%?n`i2)qTU\W*?jeG)?53p9hP>JVKMSEo+2UEd2GJS\WJM-?pEolue`G"Tf)g%YXt]CJdQ\P?t;RA:'8\ZF[>^&XO]#kJ8bbA+ocf@JdZ$C_pu1s,b!epm/R9$W*rWYVId#hX^+][k4KD#%!?a)9^2Z[MA[Zh^u3P?%LQ0AuE]0&F$nT1jWg>N:Gp102LiA8%,MPIh&]102Z5:(YE"'O4O31JAEkJi7I[K`0f*u[-@"HV.c;)to?!tHE"&W2:QaT.`0[k:@%OaL3)$Gpai,"f2)q?R>41b=#jZXfKH5`CQ.<R0FF@>mmJ=IK;V[NJ=1Fcd0>pduFJ]Kr>n;hf"22?8D3M3:2qe>LtcY9L?#"G+W"%l4=uo64(),>6Fp\hs))RZ[frl30gtgcO,l-JOS)1JWEe.Q]nPc!2GqJ+&?)pN5g2+c!D!E.^I>T!X21$ig\UZob+O9m;rCg".8"X%YbTZY<YlTLWe#F80giU>X?i=V<^`62YXf_OY*9;U-eded9]BK04DhofO!OSsdVFqEh2XaOL)Q6fQF:aAnMXNsS\WJU-?pEqlue`J%"V)l"Lp!"%&V!>=QA`H="YAY/OlMgZ%eATp=@n[^?+#1p/7Nk2:,?ae5%lA_a(=0ORi_<@]`_PU3h<M"q^6V+lg/_]eHH-c2;i/M%#oh;jH3-Riie5$RF&lcE-L2aZ,_ZC-"ilXZ"^DZ0f<3\"1ZDP*+dh^WTKHR-@X$S883l">dg=e<@"O`]NaC=O?!tHEdnR(kNn"_$%B;hfC.46_t(D&8jB"Q:Z]&CY/QEQ]>[PVqJEYLJ^dWo2UDHFAIW,pZA/;uo%O=N#87l*+Rm8kHU!B-40<;RA;5[4k]MIr`@'R[*U%q**%GM><qk`(C:\LumP+"$k,2ohPaF%Jm+<7qYcmMH6=gdh^`l6BSG-SaM3DULZW&qFIUo5H.5m0`sa=TW5("b%[3.eI@KOBbro?%Qm=jW&!^WK8;jE9gKG+mgd#_0eaS_Z+(99G=[G$N*5.=B0$]n];9sMF-UL)YKH_#Z4>/Wgr$)$+e"]?ID5+Fq(g-r*Ne+-'Q:"`@%0N,3aK&>Cj-Bg:75_LoKp'g#T7KIQqPCQX<"Y`Ds%=:$S;q^Z_H#D$dT/7.5_(\lF=NC+?!d[7_Rk97l4NHNGr(st5^L30e\LA;#%..(ZrKMp1*"VtSKL<e@TFFXXUf/bO5nH=aYWq$GYjX$C4l:%s(_:8VS?D\[[W;8h;:D)(h>h:0[5eIc*Wr_TiEg:kHdZtb+C]*D(%.>S-HH+a?d$+SaUOg-8r](E")WQNHLUntOrfND!mjlUC1Y0Y`3biI5>ZNU@-X2*2+m)'$i,a;4CQ,AYW$Bj)kn?UCJ`"fP]1TdIG%Y9Ip(?mq9I/61r7,Wj;Wk]'(V2D$-]TH`$^hIG)1*IY?U/BCRTBFj=mX9Z=o;+X*XK]e,RFT5G*%B'=MiXrJ5(6jMG9fFcpH"2G'%[m+_lV!J_JiYN_]!(2'l!mNIP.3Ne;`677#I7'i!0/IRuV`YCU"j'\Z/?5d-fVrP?BGil""it/KZpj22nAP`X/uM5X$kORW2-dM*%P*I1D$f*J^^X?9T#s(R'LPTs9-J#A%HFC%6LJWN:*#EhO$J;HFlRC)339Z3nLE]&RH"[i.`%,+rlP;t^A>V1@++\Q\DkrAMqZ>h(%J?oRs=g3Flb>\r26%stC;(XO*7Y`C8=ntK,`^AD$OA%"aX32jL1XMF]/>j'W@Ioa!;l^b@_OVaZ=[Eu4M#=IooNam@7G0\`ZLBc:%*tVWsjuQPURC$,TN`>"+-nk$!Cc'(">2(;@(q*3Rh%j1gfF-[%o=?]bg5uV5Zr\,6F/Epr_DQ5)dC.-2A>6n@$T_I9#up_02:rJ8%4;11R[@Y0X(X9p_ls13d#KoJ0kj5D>8r\gd%'JmkjEc2[]fErQ!>86?C<%/Ve[(W;dWr3aK+E3Bd?"6'fRufd&8,AWZIBCPnl1D7%=.1?0>MAr4Z\/^c7;Y[q[k7`XX!Z[GLrb]U0H:SIF8!8So[9]X)@ki9eFZIo.iUa?@=d)9I=5$O"Mp]n$thlP3\-^h!oiu9f!^]p%@]RZMF.]PQ/'j#XN=3#$2Gg56gPV38)iKTF8I/X)B?(V$p3b>38O;$46jN"^A^P+s<M++G2@$USN<G`+m4Op+]XrGq_8ldWF_9<b%C7i;=(QUPm"<fS92O@&Ki@g,].H_*k3!5(<(6F_e9d*YL:sVKO?tPK:X&p1+Q.:u!+TRk'Z%s[CrJjFD0'3uN@oiPaO6Y\p&_-qm%#\pM`$h#pSRQ.k3h;M"d<C[G-;oB:S9sS=%HrHjlZZN;.(Cj/JVqqnE#d?ak-&V:+#"U,s1eCC6$^Q7D:HHS';\mCs!R1?N1ob$D%,(C7DJ.u@[jf"SLhV,2>A`dPd&Kca,DhhL6dV]uS$KP0.;ZHlhaAnl[^S1L.e77%X[tCQXO^BRgYJkD_&!3;\i"7uJbnifOSF'29%@0!%978fVBlUHbg%hkf%-u6^<90rAC_^TIu2WB!sQLism[NZ#u=Mmsrr&AQO5Kl0JUaA>S!QhN>k>E$notgq;l^m6Z7%l&UX"6>S%mO[&tXdSKMSHYU6=/q1!G4A^D/j)g/FC/(fe!QPk`/m22>7^O=SB&Hh12%ofQMlATi5K\D7LeeJ;fF4CB\R+.*_r"O`M1ESKe8_q%?`E>kE#FRo2.k]'35NI6#3\NN45c8RMATJ8=REbW67GRW^3H=Qa1)I:#KPh3)6-V%nk"ZbEgZ",PV'b:L-c:,RjcgC4BhR5euoj7%6X\2b:nY"Eq(snRL,+)B``>r>6p5od['7eg>7`1'/(Nl``9KViM1p:ZgjoN6RAI*+(C2brkC6=]c\pRe@,^m\WjToZSR)ik;f'cG%:':`tC*U&0kEutc`cX$(`$&d1R4]s[6i*gh!N;C<P*h5&LZ'f*&Nl]k#"S/%m$2=Yl82!""j&F8_lcMBJV@j=iuVBeiW+Vt7$#4$%?U^OfB8Xp$Wn+r3NE<0P`^=*BPqFS/GQg@Ui^#hMDJOkRZ%nZKJgom@N*-Yd-5r///(L^&9s!0\;ABg_i,>dD0S(WhUE)DRTjmS0%lI1,tXOS\h/gore=@PsuZqB=rdPb=r*E[(iXu)n=)Mb#Qd?[^$R(!tP0DYD/ND'7@M1#[pC?UTE>`*M?q(dIKZ%-B^D2?@ioJ5o)%icJ*X9ot9-RKJ:#]i]a<FGCQ^YVnB@[g7\<FA6\ZK4sLPM.>#:!V\ddV6)Q.s3g5pE%ST;bC^u@p8W\:A,`!Ii/7(IDu9hX(b!jB%i6]CWKBa]3//tk!J6e7<.2(eJk^;p<H>d1:B#i;MQtsJH6T,n+DR__<n.;d36Fd<.YsR8IgB(8r\]hgmU#8Y0N3JL/W'rW,We.Dl%ptCg@PGE1>^!$Zm7Hg)"=BGABMCbGq.lh'1ka\!ZHF\V[T,oG1NUH">NWDsH2J>Ec(+^"d8@l2s&\r(aON\l])ll^87_E1S7!@^S%*kMZG1o0RFj+Y_ZYsM6Qcj"Xb_)`'LMWZ6C-'g?NWpP+a:XD]Z)fUOA<e3k'`&#<]iV8D^h4WUKUA1OHX=Q$sVTVe0'WVi\p7TP4%q_)(bWk()/(:\g)>5Qk/WslPT%U2b9fA220-">M"o3I4%&\V'[9P=s:")utY&7k>YK<&i%PZnm1qfg^1MPee+P)9?k%O*AHGj!a`%W[NJOY.=%!l3Zs]q+TDFH1<BW@J.6[h8G#e0lbV-W-ag<3LUJjPcRf'`ck%:+@%K+<LGUt5pNduBV-tLXI;dCLO'!UOI/AJLjMU7%>ufAoMeP]RR]I25)<4SLmNq:+$t_Ekm'=ct4rCBuB#,2tN?UQFY,eMu'K?QGME*CpQ'LU_K:$R3+'&"W1\i(D6<IK/:aEAB$.^+Q%6:R?g8&U2+$4^L7-=,+o"<D)OF>h/O!se:o]9\gthK9^4eD'uqBc3oHJVM>gr?skGI#E`DZ9.)D9a5?(aI3Pi>Ebi="ecjc;4Lg5%1RI>C4q(.HJ=45Iqe"XI@OJEJao&$@=m-``/[&S7h:ps.nqd<D0B.ZPNkYn_n8j"V'h_jiI.6ea9hhPPiu2n<_TIdAPUA.[VrZ)[%*#m1J34sjg:kq/.gWHB__6;'@3uI@-8@b+""J,nri/"uYjU.=Uj?,PG&f8BqUW$W?rs;3@#l3BugoSg\5=2l#eg(FIF46HA$ok&U%jO:7`<nYd7k#D'CiZaKcN![:90B[E<\hHu=4t^Ij!UM,%+tBm$Fi$a%TZ9Ar\jTTaAelnB'-"q7a*ZT5dbe8XN^"rVD$c),P2;Km%K^Y?$G1!M7d?eQcYYRlU14nqg`<RUb7B@I<EL>j&dq;#dE8/2Sb4BWMG$'s'-DY0ql&!sDW<QQl[i1(<AL\bO7]r';Wg+B,Yi/aP%3HYIh?K?[-G:8:e7'ZYQTE:U/I9.@u)s1E+Tm#t!)Z*Xe@Sep)[10TC&*!J6_)?U>r&P[JD)Z\r3!6m;F#CcgVV6*T3k0r<o(]JS%TO!^Se]8rc:V?rTF!eY\9XRYAd@3/n@M(6!Cc"T!H7m*:&9G*:B1=-\(q$VR:;g$r/eB9K3t9I9K"@=:>;3mf2=^9U#1fR_R18q#%j\2T#P8lSk)JR%Kcu_.q&$\b^WIK9-Q]&U+P@mG/HN*rtp:FH&2-8rGm%BCao)%kalh=j4:Ht))I/7=l>%7=OQ55="kZZ8`B8:5!%=fcfSIb97I7VP#%4*_#m40atNa[Qbl04,9M5[F:T,0<#)@Ib];7K5e62@IlRiZ<DDYdul(/(=!@0G6!<k5TB5YW;tHG0I[h2F!QH%7*O%aKeJ]LP7XdYr1soR1MP2F4K6;f=hu:USX;E$*)GOa#1Ypo[is(;R&Dq_D%aEj-e8OYp#b_>SsneBjj>Mkr4rSrl^`V`)9:00%1n^g]Fn-'cQaKogmn9,,YU:U;$_Hl!\dnt(KmEL^rHp+&E<pi>*BHi[.EKr)OGhaKY:Bej]sH'pY"&+O_][3H2/t;d4fd=YK>AtI%Lioa^T;^;UABjcBW0P[mW(a4!:4r0c^T&cO<n'GDP('+dBNo]]`Lb;bT(SSAiNYolK"NUn9JTpDl^$@/)_@d?J:8A&EX#jSMb<fq%1gaEe`@fccmMb@&KB"[o[gSh`X;Y/DmqUmgY`^glbV/!NEGUI_j*dgd\_,UI\Cpd6#M@/5i4Rdki^]7/jVI[]n\(-N,$0E^BSuYH%K,V=h!9,9q"2ak5X\$*($pBnoDr<H37^>a>HW:V[E7p$7+Ud+Ll4J3.;gUptT:QNokt+t+(4,DdaWYMFs)lKo\Hl!8?n#ABGS63;%$E#h)^C\aH-a:6g@t)RZ/>GLb-3P*"!pT7%32k5a@"/+aV>U*9CAH^6C6V@>Zm:3Z>pooi!ZtGc9Ll=]5&<<*#!BMbM7X&M5l*)7%:9u6D(6._?-1!6eLpn;9AI14."G(`*n8om_'Y07S14)!(d3?4T/r]8KZLE.aROVX\$t"f.<c[L'niRjuSY[gIBL-`G"@/2ZlIeol%I6L8fU.'n0<T2r#YP'<fk6:mb)A&Mmif^e^gKi&\UIJl!)iXQ$I=:_H0RY,??/hu:PH7a,8W4FpK@m):[Z-f&>;R_(8Hic6I9d8a%QJ\Q"9F0frApr^86OBXY,A0blBi4$0Rq2YhSe<+Ss)]1TFW1)k,t_0D?^_lk.f-O"CPFHVI;)@Y+q-'ENGTLce66a'7d%Z9QNs_8%a`=I?0VrGoN'llWP[nIg5Cm"SEfe"?-Gb#M/eEVeeS8V[7Ea;%_30s=1_<?mN+@\a_2?k@OLU?p_824E=N,LWS?Xgl5[E/#6`erI%U9Tj!h#%G+C4%<DRg?@Ba#Mb1)AA$G,A7!^i$+54iZ23)CI_,.,OgT6DNE<3Mmkj?NeV.UE4r3RV8PJ+fHfDo8U0dsj8eSgS0I<q%&tk.[D3E;*G?N(bM9eJ*&.l(WmJ*".3*eDj;He\UUgdS=*ND^rQdab;QSZHHeh2"%*:m=kTPNd!`%DSoLshr*j^SOrn&J)jqXiQ`%*NeYT-q.qb)`*s6XZcg'?&F3HSU/QA@RP_/@JehR5j@:l0XuAXe&Oum2e/djY.861Z5-R[LQO(L`I#h[Hnuj+Gs4g=!/1`;KQuO4%2o#S'H--c@0Of!a+&V:bb_=gh/-;C2^(?r07PG`r:^`dR_U"@Q!cc>p0mZM=8Q0rOJP75%Uj'<=4aU][d$0mQQ[&E'\c6Uj6+#-E%Y.e9FJEA^t-Wl10A9W`\PBVkW_OUrV1h"Lg1;PAq7IHBO70>iQ<eAOeS.1&M1a^;H877],BF<#G\3@o$dMQl]>NNbAjB6nd<B*S'%Jg2k#9ZU>h2S6uW+Bd)P3O5gK@BT@'=Y+hD\QLbW#-"C@!Qg*!4"J^&VL";-J+s5(^G1qic4>\M4CfGX(6%LKS\iOW3)r%Cgo>W"%SO?@XLh\G7o:bNl#2SO:R^i&tfbBmOSs3)Bj`4rDKSk82X5FI)8O*Hh(A:2l>P)&gG\nPURXB+CHM>)pq^kGJ29,sOR0^h*O[XdB%E?lqR?NnNu<mQA@&"BMmiH9OIU>i+UW\mjn[9/lgW+9nX5?(Sp0/#qsVIW]B/98(SO6aD"DKupI8_<6>#:sQj"A:@s06:uI0NZGf%[]m7^F'WNNm(eC8pshkOE?+cZD"[!*r/]c5s7BODEgWSRn>Z\)Q/'6Y0%eV$EuRLoV6qrh?d7/de8(17,$ZrIOa>7f!3&9%1Q77O%[/<Z>R:%jqod8UE:3*dJ,34,4AFU0;epp1kMDS?6W0S9I(l^B7MXQ62CHr[0M%$K-cJmRY-)UenFHY^Ba@RtVEeuF/Thb(bQ4ZEN%`\T70nT9)#cA1%t#*T9_5?sa(Y5]*RGelj$^g!R[E7A[%/752TeUXP8I*Y@pcU\t01<FFgSA4*mfo$f+D<6mKfKdl]0$H-&#,j2c%C4$M,7h9>Gcu]MQEpZnD+A8XdJBHrrn7i&-/?tlW\mp)Ykc)Xhn[o-e;ngp/KF;"aqScQT39tO)a]>*.jb+M<M((tp_r\Oa6@&Uk%/0g1\i^!/3%1ZRG^]5(-FNL7/3(STr'SipFf;C4QcO(C3n-F2n3eA)jQouOp__Bf?<#;b>q#m/3LW_]6E/'eWU3"oM?D)I@]A'O+%iGq)j[*^uV3!5`6+<hFIB\S9/dFW,!.V<KOP-922.6GnXps9Tjr9.S/Z$pUq?*HRBe9d+I%oM/Z"o,;'6^N&-LM[:BJ7fZSf%A+N%C`QeVHs=)m8M[$A7iN(J2Tal"mU0--,q"94IhD2R=+.KTcZ@ORUE76c[.T,+<>Mg93\sm6=9,D2[^B>SZK0fCPs:,IZH#>!oD5#K%6]q_m(RJ`lVH6[u#HD!bdVKX*fk<@&kt'qe?]1s4J0d-pN1^C2[rMCTs-9b5GI]Ga:QXKkNj6bK(+Hs%X0\VV/nsmKBd3p#2_d:m%++P$(=uKcr;.WbXZeYLf;0tm/^f)!ngH,RC[WWGc00gm(#;Ja!=eq53.8$Z)L\r&bi=E6*!n7>]TZ\]]PPD^A7]iSb)+U&D3%U;*%b9c_E`K>rn8<l8M0N.KE2o&lR[c106QI'8L/'(AX^]9'+anAEYi-[F2]ea'Ji;@'$=#B@eY$okLP'hgt:n$F/YOf_6YaAk58'c]W%b6u7%Ol?@1X"/gn/D5^WX/m>:C3(M.c%90.I#'B"Vt8O])A7lc7Dk",c,R-Fb)aS)r8":i(:6D_R_[/hV2Q._Ai'-f,C!'oTmEcX%-#*BNdr<Q"V`^JfdaG]/`E]V5&WE%*l6Ia9A[!qqP'n*SeIS_8#&$l(Gi$I$`d1di=>&"Jdir/?"po[Vb6tbJ7GNI1)^0L-S&"bK%0J``3,PdF3RT08\=e]!uF1Sna%CaB#]`>LR9`dp0+Q')iiJh+Q1BHWI3DVqN;`OncP1L$lFB,A=E(m!"<(eZZd1.Z]dB5o)79RoJ%RJfS6>&bjrm^Jo,_(lQ1qG@]A=qqdoJMgQ/7BI!6V/r2)K\7E@*4<co[H9ahO0l2ZX`tC'jA^]`'Ep*REAh.gJlZ"DRQ/NVfqS2_%24>#sfBNJsbr&:c4_FEO+JJmYLZ7&R6Ei.QogA<[$,I6uZ#dl6O&I6<Hp$:_Ud3&(Z3XLuTNX6mYn5TO-,!F_M2N&V5`H43J/WN:%ZIKH$o6Cb[$jh<L8231Z-V0+CYNQ%,A?<#5Fgt>Xi-,Bcj7Lc>bsZ7o7:rH9<gaQ8&8'R:G'8%rAZ?Wi!S4;_?Z-bCnSl#i1*p$n%/kq="%&4AG$<dI`bo-Z5U]HQg;f`/GILccZ,Bbf&E3--02e3J_o+0$'V5oZiOK:A_5O/6t%A)`s?\55:)EQ^`kb;XMZ\W,WfHojK%CD939'WM9d")*AGjlRTbN^@<e:+^5G:^k68'YToXZa6/B@h:nj#uL[qLd.qi,MdasFg9Y5Gt?E2?V?t6qHOA/^qO%7@#[qacr0Hg%QLOEhA`o5W$75GCfo6'L]H.>WM9\5VW2%/4en=AK>oM%oL1WDF?OH[pW`]<Rc,9uUan)8s+=r3k,@Lbi;d`:"^9u^H&4RF2)=cE/%+fm;c+t*>.b)-VG'nSq[/SBXC\s^63U-]DT1.<R_2:nT-]VeW'!osup/ZeL,NdD0]&X_+E9*Va),p$W%?-A0clCSto<"rM+U4u[V%OX`ML9DWnGdRF:E&nDiaSC'D*G,jGUYI*KW(9*A>.,[0F2\KoW.\&Rdf"g_gCcO1\0U#I05R.)pQB,=IQkoIE\#mTR0i"4<=M[j9%P.A#3i)H\`TJSW'b@^I)]HfR]4$JO>@)7b)ol3%N-70t4*Vc1W[A4OEKiK\Wc][/k[CI0sM/bY9dp_kudfR%>lFBsc3Qjj(LWf@8%]Sa;5EVN[Vll^YlS,q/E2C.Ve0A)L+,Y/@:/P7t>S7[@=6-JD28#A[.YZ#k$Oqs5#0QABn!G]J&J?@%!$=2sd<N/meK%3<QK*=PT%<X`/4"*0jlkWfP6+98ftE.nK3Vr45q_M_6U;GePi\f"Fh8)h$-_/s1tCQ2WH=q1g^"/hqDEh'dh<[=]:JQN"3G/^m(FGuZAK,h3G%"\0-fP"Z<*e`A%a9/*$8b/&!JCCUNaS$d=b$5jP7Y*$/YcGt-XNbGq52==Im"*]Xb-pV16GY>l/HlmJME`!EcBU]0gLa@A$4;ZDC%VIWXX&N#?T'qp&a)kD72S<P-9$fEl[YU]AO@63@%Plu_WqPt:'NNIDZr[*)Q9h<X<6R/A"=0nbsANCN@nn&Gk_gTWaS9c:Gn!4QZ%/tk8a=Ab1`j0oMa)Vp^TT13W#o\aV)K&&&dC<=A0"$NPd6mJ%2d6`:TlD0_$jLa]:fN?E3/T7Ync"\ZB&`KhbLmeio&TXq,XX&'@%>eL_Di/#W/`bZAfX&5'kC^0$uU5<\QFPq!9d.qb`PoYgl$T[7k._-t<X(>Q2q;^]FqG*_fMhguD4Nb-4CW[5m!jm#'97[T=<`@BW%c0@gRm*.n+m`N^aGs#Cbj0Hg/fSmtR1oob@]W0G4G$kknL3;L+"t40d.ZR:[qGo+LFi38@GE7D<TtH(*]BUCJT[%(\8h+EZWffq)%-QVYhXbc8ES;F+dU5X"EMk]_ucD%OI#[hTeZ+KmAa5Qo_Um=Q<-'BsrWkg1g[C"fE9gWc8SA0lY)`9I>pP?rIO8O:+k8(J-HI]&g%=41"!$f>LK8'[C"X5G8'&^<Sl161T[b<Z=m!6qU]-%6]tor9RGV384.jAM\jHro0&@0Bi0<Sk)*)c#lUWnKD4Id9^1iF8<XZ`dPe%,92?Mg@[@=2oJ:^6@mY!eXBln=373u-b)pCLqIJ)Ja$>_[f$Kq@TQ1L3_XqYoqRtdF6TG"Y9H'./%s2[+#sA]*q,[p6p^n,#]oi.%\F<d#B@&%g;)k2:SHs\Ehp-nLmY:^Z2b!?(IBms-Q/=8RB+dEJ@uHXGiB$?ZfHJA%;e5`n]*1)pFeco`^.1GB/?9_4JgSOF]m@3e%cb^L`YU(Lkfo6]J+=;C]6a#7>Pi8_+1^fL:Db`qB'k`jp^b$ds"Y5'GW)YW.>L]1.MrP^I,4JV`oZuA8/*tj`W8bHhHcs6]RoNeZ%+H6%R'hD0WWX^L"5YKnp,!72ko:R->0pY#Nj;qD(l?TsMhu\U5h`BMWB[H4s./f^u@UTJ1DZThg3P`0:7Ml0#@UF`GU$'8cZk`l_%_k4p,2*a#-CFX^E>)FhdIHXQ,Ch3`YRM-T)Z*GN2?H&@r"F%2KNBlmI&4)kK.$qCO>-;GdG"ni`U2kjbHE<K%c1PIV.6tM6@[YdN%$6PU&$Q0gmp2TD#*Vi)lX=(:u2/<Cb9'=_DQ6!.oZZ`?OFk]r:gSR!45^a=`MmN,e<imluLRJ4r2^WD%!87Po(Q5W_/I!63=l,*J%C1K]E[$>*<j%9LBFI:@B$)`4dS$D,m+>-R7$B08oGo(]g"TDE37i6Ai[$)llr1j53k3uDFUf>HU&R`ruDCZXa(9U66474rhk5F:c%E?`VJRSC7hY/pOJmB7-i))gqE$C>_N@;f`5bned(Pj>)>bYm`VO![+T/hpQF:bP[R]>'^DPO#f+9784#c,S_;iqrA%+AKXb^R4oA%3nS;@R`3E!qlK(VObZR;AK-6ob%V!>>IK3<QB]T4'D7*s142]A-qDOQidfEHSO/H37BBhsROkfHmVjkhYAQ.\4Deuu:[0[$"=b?b%S[Kr73oeYqO>PC:djWh17_D,17mH05'Q#o^]PBf#jNdV,HP!`"=!_!+dF,#&Q'QFNRa5aa33]jFioEtga\()k0$P$&Fr5HDHV.uo%P#S]FG?hNsX=WZc-TqqrY+\m?HO:c%c8Km(od`9d$J[3u<m,-%PBEN>jYi$8E:KL5K8m2ZC&39X#T*uCBlK9]<W_Qs*,iPP`5(CE%<n-6?fi%2/PF<Cm!p9`cekj_gAr34_GL?!"!U&%/5&]+67;=]:BW03)aS&KA75cBVXe^f9RMF0#TuE/>/QH70/.]]\d$n4$gc!T;%P/X#EmS+1^'2T;X$oGZP6Jl=jM@*c]9H2KeQtp9*G8T+B3:X[l@$:OeC[J[B09s!H$PYM.]1qi-\?3.4m6q/:$6G5R"c&89(:dS&%c.CA6W::>NV:`\U<-!K)mSuE,*?0)iMOJ9R/rk0/Nb\\f\1C78_IU.'le/g4[]=LRLS^2q72@r>XSr9oe;SR1g"Y1T:^I@LW7aKs%\rJ5V2;)FC[-%b71IY%REUP00?7)MFm(AZ9;Se4dDS0<ZB^gIJ>.k`K?Z;RSGj5'dDqGrP*8YD+TQ*`sXp!5`+]5FNG,S"ZA\?qj%'s(HmhIh1=>QLu;2$tqSIdG3*E-]"nO&AOX9L:jL*ferOc_6_Y2aiT'QC'f9Yrc3r^meSW6Ju7J2^,%H[W[MsC6\=/((<nW"".1_%k5)o9Zc&lJT*\:Q*i+t#cQZbE0TITB4Wd0'+`Ka02BF^1U,FT8.gB+DkQM/SBLtOT7HP[YP!\b9EW^Q0,I0aVc*`dHSOu/PWG#A"%W&HTLLtMR6Gsi"9!8:+uf8@.a*,OrKM@1?<m;^bKW,Uido^d3)ZURE_K]DnY&Y;<7?EC71DH:9L;=1G<Gc7u=@s[ZNJ>/:JXU/fS%@l-TcJuiWT9n;>Dgd],k7`^eY]=IP9>Xj,ue;J#m1e2_VVQ1n6*qJs(6/l>mF`J#?$eF?;&e(%J7VNcogCps86SCFQ,jSWF\W5?\%*bPXU^i3hEHoO]Y%QMCaASp^$2'GVgokSV,0qSea`&2Ks!K$j"&o1mAs)?(27dSLS/uV=!J)dgInK#+j0mK![X?kJk8IVQu24_Yh%PP_#,8m\1NI,O7=YB%I0o+G=%Juq-$SE8r$)CT.+BBAff\NVLc[&BorRgY'_dBR_"ScEo*]"Hh1OP;l7ls?8qX6ZY9Q\-]D2Ct`P%Es4fHBc0pm\Ft#@Y%mY'q9hYam$C_Z&OmsVB@g:7</Luu!HNVDZsAF]5YSR$'.j6&EeN!%3L2Fgb%iS#"@1@K!(;,$ZWSQ,#[A74%q2oaQ]QW5@AE+s:.'nZS=TUc-Y)BZ-:)o\CQj!_1UQ3*XpjA@mJ#)d)1bm3i$BJ#n32"&gE>-\(j\]dgoG[EPcYIM[Y?+7u\&=c1%*h!u`c+n>3-9ms!q&X<01P:p9iQOZ*rWh7hR`pRVO"uA]/:?*hnPc3USeU_fN-_cQfkH`%QR9L#=&*2)lcRSW[d],!4+kWt<%FZ7%UD8Xp9agqni"VqNN!f+AGn9Un+/(:J>-6a3G9$#D40@un7X"-ql8iBB-.@a(@FSHFm(OmSQRG\CW_I1);4m#$j'luW4!qd^25UF]%6a'Ed_7iIB:n,+>>0Kh^nlh(s)Jn8i0e`P8CJ>KjDVDo%<,1!kiFFNBb4Sa+&Ao-;0$E?BjlFE"b9_JML>G%B\a[1Ui300s?3&0+%llC#iEi=hL4Cl,9lTA&WV'O6s3S9B#N<(T:RVPf(-O.2@%g=2QKNfV"=$>2->SPUE=V5lIGWg1YdKkOT):,(SS,qR1H:))i&3BJG%FPX[P1fVeZ)gP$l85NHEG_B7/iR"PNl&bB\$]^rd__:;5>Yr<VU;b=NDW2&Y;68c(TMrH`<Dh$+':`&]iA,-$EniP`qnK?=/>br`%V%9[eA@o&]^goBrCr&*qXdGDDF$VuEs+02C`)U[b[G.bo75&q>29c98@/%dB@P(;?bX&YiXMn1KQKuG"XtZukdY2WmR0uj!FMrT#%EGSTR)qUCrR0h;q\&i;@M?hf^\A7j(ne,/]3h0#S>I*PDQMl6[(19>>!(Pb1+G[kdZt$4pKQX5:*BNd/?62<\h))ga9$'P33gsf.%dPd.!Ug<VQ,?dub#@iRbIVcAQ*WbsM\n#4i@FW+_[3<51$.Mp2Y)nVrO#gU-&Wirq->K&@#_#\FbI+!S''c]`_QAm1+_[W^AL#?s%TsfnQUcFZ)JTV[tG':D*X#O8RGO8]kY7cQY?RLTU9hVq"fEf!Q&+=YQ]%8mk(U8Ib"N(F&\MBZ#*c3uQA_S*K*eMKV7B<p*cn6qj%ii7Ag)7XEAOJ'&b!BAMoPMTaLTTBAQ7IS(1![_tkC%qeJU2oUjm.J!`=,-)oo,GMFB!Hk[=7%JGP8J_RT`PKSn:P1HjX?M-Mo6t<%.Q<PH5N!/2ei(+u^JHSccf<=<,%pNQ-#ZH9eZs6O#4iX&<<HqrDSUk"Vt:b4`&mm"bmjb=mQHg3U):4`'RY-PXc&+g^3IZ?FD*`s%Zn`ZUUQ2EL5E7I8IrWGO/%c6O\e_?u42tj?fre[YkedVY'Ao&MYjLBd3dZ*i(,b+E(a8GQs.o?p27BkCo&S78]IE+2,\cF%W-.WL%h"(X"O<$]E3eI%%oO_PA?_$8cplZAXY0N8kjjN'BK$k'@iSGJ$]X3ADWF9)6>)g<43QZLGamP,$!'cu3>p.ieK::rG:`-UL\/gq;%LX3WqD,\Y:fKFS)GMO;nOqRThWAT0De$%.?@\QA7pS>l%$cGI#oKJ"5%hFHoDX)\RemF6il;o,@#;H6T4)butY[$l7#?]ar_Abre%&"GrBP3HUhpl-Hg4D_X<nre@(jsF40Y14c<&n>E5_]2BB6?aKB_q`'BA\33?XquAVGU+o9dXm`ErN]mDcG'mke3:0Xi$4dpR8Hb*%`QIC*[hUD,LLnG^+'8gW<o@lH)J2:rqH`D.(:7>jn_onZ[su3EpqAflQ8@'tQJ1R2Zt]$]G1hqMl\;t6G?YZGlgJdP4]+\V3`U3[%ES$k^e<61-(n<FBS6_ZUMJ>GhoSP3VGJ&-sS?lMhK+>q:-7?D*P&6GLZHg;7!n0!X*lW_Yk3&5"M<`L2^2`eENKs>+i<1Eq5:*IH%&@eT'>,H)3R"IA5Cq:N1Mnh3N?m[=EZ7DZF0?V);+C,r;6_8rcpf@%P>K24el3#SKm/b]b3&jc.&gUL.EeH40QHr^eaPsW"+'5d.%SAT-A?]_'S;;j8LFd_f<DGS:\Dc=A8n^15s[q`nI(Nq2#VS*OVZR@MTWk7s:N#a)9E#C:+F]h4mA,mBL\/$29_28hjC\a'n&lHUR%J[\2=IBAZh`s>7_GppGJV[6?l_ZCr&ZtBih6"t6#(BUb&Zbcue:+KOgd#O=nCl"s?@);ONW>5LOOT!=jMBTGP.REP2T;B&`LhWn7%mW*>\X,P],(0?]Gf7o5F.T(:@OdM(:"OBXD8G@:%.MkoREZLe8N1eeXe="&R&X^]Ui8nM2K]@)aam1@>hmeL@j2lhQ$+4A2qjWme%O'5Gro"D):*PPj8g+$=\'ddLV!0`L)%b):nHE/j^g[:l!)+f(t!D5QF#)ca&-89'u]X_G^o+s\DM<j(k_)Y!fZeEXNe7'Oh+Ubo0%Q/r(XiKUB&:\%=@!u`Phn8u4Vf(ab2%]STB_AEjj<n"KK/!%!A=Hgmu<?hGQVRtZ/?pRJ#>TCtQr\q:A1UB23aX-opXN"KlJpp6C%YI%Ml6>q%^U=q;dgo==n((7"qi1P4O"C/n\J@;.c;fsiQ\P?VkDPXrOfLD\tf5g$jT:epW!71%BRQbLQI#;F;(ltjF?sY#lKZ/-c%>gP;`jFmkJ'#)_`>X/58a_Leh[uJCM,UfC6EIS8</mc>R8RA$mj8)M(OVYerMdVrA"1A7?:)cq%8QPl[Gm8'iAfRUpJHjr>>eMf]%_+7:eICioX[VLs!eg5s\i.X(![9jdq`pONCcAK!6ls29[rl@\OP3<K45Jnh/)=#7&Dn<GtkZ_%6YfDN@Tn*>@$U>$_JNUUqVjta+%E8::mn/oZNM"V(9DpR4:O3gBTQX:,!IH6:PP/Dh@6.$Y9"fl1bJm=33dG[8F3G51s3''f+dTK;.)+Oq)3Z^tr5<gMp/8,<HL2=t.%i!dmB?L/Zu8Kna_9U_3UWX:/6VPTK2=W:)CEZidL:l4ttiThP.gg2JI3bJ*BWk..(>&XT<mNNL$LWS4_;,7nN-V)E&NO3QU.Kq!d%6*DS'#=X8U3?Y%6PMiBE"c@I/T\R+&/NEugN@)Yr"`+qi'rh"??0/L;YmLmR`Q!GV6+#CO+jA($3AReNS>hAIB*T_i%f&(<1[I;g%rQi8qXBNKe(oF*m"I\<G@aAh[Yro5YQe^YS'mMiIR!3@lk"@2B,Rro#9M[oS@T9#+(aL1q_1rf.`X%+'ZSX5YYbb2I>_XdZ@P*Nq%>1FGQ"*X9UA:FBRqLlG7'WNj,MZTcrg(oM.X7?)fkLN=0dkoN3bj"]t;APpI0[UU]md(*af&3B21+"-c!6B@`Nu'j5H<FV:ZBKH.%l%Q>a(V:kO%X&nK:Ba6lE40.s0Q\n<@Z*+NT*:SecpF':/>8m?)f_Wif?s.Q3@'0rA'-KgM.8JWTiE6RDe=SZ@ZhRj;JDt-]9a.F%YF##3**/Bi?J4GsljW2[S%9aTC2HoSWlVuYX8098.KJ!dS=^ndU@SI82g.Q-ln4>ff4lM3:*/@G+M)N^R*OT)p0t6+988<7#iMd'%4;ri[-`V_C8e*PeSIo7.n$AMcg9qrp,sCJmqiAdU@]S$1j9!?,X;PH>`Ms__ECg*;ag.1>*o*+t>u[P"?RQ9-e\M`JAaTXOiKt%<%OE:J\nu*!OKePTMQkP"H`X2h0LkU+?'!,XI0c@3"#Kbu!E)2q4RUoN7(c4l#&>46;Gq#K^3:N*EJV1G?V5b$(Ol'%aWE9C2CU>MB%XH6>.>WUe!*^C&13`q!Sj-?$*-IlJ77cfXt<%:'SBi3Zm^k/GUoFZc&2:n@SR!qMi"5Lh<dRPoB"1?@KQV[_cNg?iufg42,RiXNF%XoekZgQi`:J'2CSQP7UJ:clE]-!Eu6!p+_$_S!LI3aIIl/J6H%@=/8[>K!dXRh[1KE/FWGG_caPd`):2IZ.Zes2W#WR3u[UHhB@D%DQHkX=8$2e/+bS&OJenKEp:GDd*hU/%l?Ci7EnB"79^'B!mk2!fMh*NMdafMjkV&21r,s@MA7)3D&]ZY`W3:G&e'c[EQK_?T[kA/%,p];46*>Ce+%@bs%[;[GL3Eh:O0X<OW'^Q!)N3#0+ba'sfuuIH[Id3kW;#0?<.3@U8D2@a=^tPb]kOe<5TY%WeUffb9P!)F5c_@K%;#*SJJXAN<dR>_QYY=I:-8.'aI2ZQ_8V=HnG:,4D,"T*Y&[W<iW&[X+X#@48G@Nice-DI/e@W;[CIfEb'1!R6/^)W9636C=;orRe%Brp?*BkEEp-Q\SO7?d^Nj5gd5I._6mY#MN-Bi&i4ZteH?hUu6#I0qQ0c(kRnKqQ4ja=TlR,<c:HCkg%`\;dA"DXfIdYhA`2LWj/3%FEJ2UCb6uFO"t`pU')2:_r0BkT$:"3-0,VRTa['[8h);4_d0:=10>n9XcUAT2:o8\qZ.Q#`+9-6qXpUmD,P:@\!/`M]c<'e?C_NV%N^U7W(M"A2B^q$&,iMM&TZNaQ>f'B/oUal`C-4J9]/gN`TM7:P*0PgkVnPdm!6.3j\>joVf3iG58HS5l=S`(<)mYJC7&//=-?f*&%D\!Ce#>8<($4!6d^+@ohJb+tC\eup#l=jW<]OpLcAYRSTL14=)%QUZS=(e'(%(Bh5Y`Q2"X;>HWblTMA5ioI@Z@&d,;$^C:&uSd_%-*5d\f5IVenSg/6*m'^Lfa>p9:F\=l"*V3^Q4Y60Gn\f(0Ik>X`RAPjE3C7GTcmT<M7Npg2$F1Bon<X_Z%9aVXXTR#_*Bk6NE[M*%1q-h#>H)UM]`=.4JK9o^R:ltGTs0_pH.*I3ZGj*=\5[%_B&MXVZGGQLFbXTr7Bm?fE:OrRA?3]RR&X.&pjYD2'jIdq[,E@EbEbeZ%E4.)($50G'Ge`st$oMe3d+D+R)]%:^Wk"iW!pD1[,7]I,l'/<R>1g4%or3X>UJf]*!>q]fXh]Zl1*1XWaOid.1prHma3tPWIIG5H%;2.H8=h]qraVD!,1-<YB@+]W_$Y+94_5]rE;-=.6p>]91/\pE:]$(=6&OXI?Cr)9?B:B[5T\,+GdY.*<dm(L0OVjr.D]4.,k$V3#%&"qu,msn7cK*XH+CI(QL8?YHFb.WQk7aT9ZS8*mo&Pa#7GZN(RLdBt<'GDiQ/5.LreH%Qs;TIkZE&).1>Jn;%VMs]>r.bW9MX!J]%47k`YYDOo5(`+O"MY<hK?6j*;Fbjk$eWM4A=EsuYgPEl1PMJ+;@+a]XS?8oZoidB[/^P#rUCKF:=ERX.eIE+L^m>XtZ2eaX2(P<,%(mTF>q?WKjLrSW.\-@/!=_n=XrrG+Fq%q8$`,1;"_874S&ltmDTQO'lBAEC3el3$C(_0X+nT]%ieblWm6]K?-XI>FkJBp]bhi&3-%!j!Rs,9*I*h<KC"MM6_N7<I=C_SBggZg8ZAT_6Gcn'SrSX#Z8g/_U6G,MNK=1LQUtdA44P2N9fD7.\ua!S\QcYfkC1QeIkZVY]\H%kEk4S!S1[&>JY\GSb8E[#\ECB&K["b7Med:.^1Td]@S*[Qm\N*Ig!-rTNFbm&3A]e-,=D)$\5ouZ4-b?W)h0C#f.F\gAC3kBG9Zo%D(-4D)cBHYE;1asBM5MIC7CNoYXo-EAPMHQZLai">kY-;7=!OOlja:%Wn@eG8Q4@R@"QS+OJ19DU'FKfE!7;D(M5\NjMieqgbasB%<^$rFP("CB;Vn4W@@*!!R1#V:4@LPjWs,kT'8uL//capn[;rTP[b=HU%$grDXUXY0cUWDtBV5@?aYjG-m5.Y'#:?+nKipto*#$&4%;i5.C5u'tO`F86B+.H\(CBH;q&"o`3"#qkB,D2mObNtP'TpeZ;L<3o:#*6et1K@g7A<,mM2V)[Y:%)d;^N!ptfriR(Z`sKN9nG']%YDNG$^^A<9g:C5fcs!^T5<>1i1n9K3g<6kE&qF.EhLNL&fN!iBCZp4N8N1B(QN?)@SiV!l%F&=[[1&afgOFs<'h4fJ9LJLT9lW:5%"4]NYK*?K^?C,jK==CX#o)2DAO8'#<Qca`4C/9,XU*N(BB3t3uND%?%9[/S&eWpf_%YKorK'>j8\Ej2pmi6r8CUsXDO.4VpmVNZ#%j``]o`+2_7@2AAr9#f%NRl^;O`0F$=C>"uJ%b'mghVP/*CMY_!J[$fSjgcAHH<M(]C-/iB`mq0a1o%Wg*MNN'E)C-P,N"@u3;="a%/8PXY."A3bm7e6j6+DWJ]*'^R$bXu(kClt)C2@E%bZZNm1p;*71/&C=k/Z%\i+SKESBm7`#rCTAfWCg/em.A3/+<*$E^^kGOcZcH%Au9PWGHdg7JcLf-E)o,bTuH[.XM>F=iJ]p&>q<^JS$p?D2+=1,\X@FUk3Fu$Ilq$Q=[fkfcPI'V$ussVF!#@;JU-\VXp2&6g!"-s%,^I.YH%_tjL,H%>A?nW'[YX*\#_a5\PGjMS5KnBpm04n&c/&HODJ9kMg='eiC-bVYE<LUJ&"t:jP$<MH\:a<2X\`V<f$c5&GGFVB%T2@0?)dl5nd)&ogd;Wp1KfLaTaZKDb*\Y]9k_)YhY3;I3f3E5h5urUPDj:-]W^[?[/YsF%Xu_5C(am+&M\MF'RqWHM'B$!1)$;`?%^e=7rk[9!JS1i>3DO`L>euf07h4W&8:X%"6)Z10;0\KtTROJGigdf9/C4YoU_+;3K*)u%eH-POX0J57&A)/rH*ZYZ$<2Y4l])n%K%lgf&Pg!qX4BZ8K`VDF7N=(gchMlpe?P1JpW;V2bi_q,@MQEa95706%-CpZV4=b.G+iR,II3o]_.euOK5RAk]A?m/#KZs>WNUQW_<%<A)k`=g9to&YM`j&s'#/)_M@Ji&K_c6FE,q_OEqoifL!VIW[/B#]Lk=RR7G,,+c7,Ilpu#-+M'=2%KUD=iIJOeZ,Q@W.e0`N(!8'%`ks'kbOgAVQ'r%#P"%C<DOg_GTW;!%[IBM,og':jd8cr`ZG+(,^u64Jh_N!iManLQfZ@c6:Y"]jF@SX>#&FFtX1bLc3S!LS95N2e%%5Ej_M^lMF%>G\OIlpu"`SRFR:Q()@b=T.8.lP-K-dmVp=Y2O,13,j6,B,?$Od_^):+->/!L0Y<"DEA`dH\/W_-.+3H;,1!Vm-Li%JD(I"-[R]OJeOs)CuR%VX-MXockJb+]51`^DLd^M_oR>[!gOG:jjY&M<O&u*,f'O=S,1):4<C]M4&%=.LMW-J906;E&fmre>p;d.%#,i5sldSml#;N9ZC8:G/_Z^e;.dhJ"!g88]/*sWhFn=l7l=&9#6Z$N.mW%"u5<cn'hAtTH,Le7;!7pG](k<\n/IHhZWO&Df1\m$7%m:$g(QhN@oN-O!+X.8Hu[AVM75]/iq>e_[=W[&3JmdT?(?L^n#/46dTmEH2/[WP+cgp523Mq568$X=j<T*LJ2%/QoM]"pb<ZL]$"%Fci/;aONr.[gRcC\6g<um)+9Y8mYb!1Rm'-QF=nO?WM**?1h%ei^@'ZX!KO;7O3/@Z!t?V)%fjMoPt`@kLYj+ZV:K<=Xr+kP8m3k%E'3-<an`J\2IIhmV]C"*-[q]YgcC)#OgWOe(N!Iin"O(jNj\SHGC0/*#Kn&:*8f#/PY``>b/lR.IK\[QkAZeI%4"hoi6S4S4d4i(%XOoHMO(:2mQDdh2GLR[s*Ac]P3Se.Tl%CtC/V7-TjSm<b;D8RoB@=:<UZE(UFGU.gi464]B-R('j6g7o"mHuY8VO:DKoQmM/POn&%KC)PQcA.<,PR0LZ?MPmUAta!BAtF2,-N_>[TZ1$HfSUmmI(O7=8=&#Eme&B$5b:\:8Ak)^7HK$1";fN[[D!P@0@`u[CA/Zd6iq&W%PoiULhtQE\pS`XY#V,T6BB4$tZUtk1^3%Wb[EoFY$p\V$![3l&GT4Nl6gHW'GZWEgTk"YqJF"%d5"^HMB@YZG&9CkWa@mf0TfnAI%RqIu7\fX*oO^cnU5-pOmBXqX]E;)C6#D-RK`h'(%kaINJV3fhgCq<lYUVo3Rd6&K+M3[(:p=Wu4$Z9LIBZ,mo4;;QJF=jS_+[[QS%f\,)XJ>q8Z&Y'Ca1u%T7*,@Q%^C9/.RQ))8>^'IoJTUbJ8oE\OMfJ\K"1<#$4?bPi:GY5P.*r>>$["W<fd0jg;*t@nW<B80W+@[p%A4:tS(2'mVP/lC%r;O)<glGTH)J-(?3#J!F4ps3hY1sfh3<X579`L<A;Wu3`k,NJ^Z>l9k33C<9\5p(CiA.QgA/4U'`2;'C9+7J2%Vb1#=Ca#\3<nt3sTT<8L`ESLh'chQ^$.pjN=_j.me<SN^7MefL/!U]gLR6,ZN@;psUh8YMDNinU@'b);SfBQeIs&fXZpc"t:8N\\%\)PmW6;akp[I*l7f:Hh?5`D*QAU,U^9#"CU`@gBm<@LcPCIB+^%kkHFZ+>8kaPAb?D:5jEXGWb3bYBNGkj'>"7&"0K);[F_A@HiX%g:[[s+C7J)XGNg$ikM!`I%LeU;C!`il#jWH1pp3Q?+UZP1XQ6,e(`qDkKcJ%D.%23l",qF"hZ$ANdT<4)ne+DK1"F+VXY<M^2X6a%Z:kjGMn;j*M_b1j$ZP,0_AD^!EE#ePIYVpW/_>#Y%0bsgKU"aIa(,RHrhnYrL1e[&j'$Z^o1S)Jeq>%$bh3(r'.p7"Omfc@K&9fF%]WXSl&aDcAWGH8fr91LYBgr+Q=TXuWJqFA!Xa9a^*jf9sTQ!rHPhHUfib`);O%WLfaPH\>[?e:=MkM3udp"VV2G&S*;mBR)]S1*p%<d]k$!o1;kP&g^!Luje`k@8lmCkcGClma+fVKpmIZXZ.E"%uhPonCm/eQ\m)bfa8-<PhXekiWu9FY0F--$@pZKa!(/=YXltB^)i+%XBs$PYUr>K>8F9iNt9MgZqP&@KRn9XOa#=#7E'J-%7%q;KXu-Q4Gg\eXGUaU1jQ.aLT>$pcn.k#Me=)rg-s8Y0Q<\)PPG84;X>#]%]i/1#9YL8X'lu=a0LC.+.ebm8'2s"7k1[60f4l1s-ub!*Puk%48%Um1"&6beRi@cmW7'8)dqhK<B-McmG%D?ZmA-'Vem<!HLrJrW%4>)a(,I.DTg'IBo55GGo#T(2,*QR3S3P9h])eSh`hACeE+&sbN3UGKIZZV6Xlu8"OMMl"T37b^VQ^6Ya=R].h=\/nL-/oV&X3Za\%jsBf'%N=lVP3&,SjkE(r_C@)("\`Y"0m+0K=Fch]ZN:BLg3,0d?$pK">Hl(\$;eXdYZAa<Qkc%qbMJZ6-rb$<;%'$MW8S[;\cKcd%`9!JCJDmUOF>j<tC`1,])k(%bH&;Co_.Q6K@NT55Rr$hk<g.k^e"8mqq;!T7QV;CKLp=9==*r:nWWDL)jDn$5/<]#2Jgn<k9EA(j%(9#N@o+L!NPfq<!5-VC@"W?<qAoQCr(_!4!?(roJm%OpQ6+]N:'(HC`lZlG;=N:24m1_j]H\/P$L:&p9SGF"7Qo^iti2fq]`%D47%@;cO@hZgogl,fT-6INMM'LHG36S6Z.?.ejRPnbp:4i-T1@+]D:3B%Zlgr(>f>*PSh`,n:JOLT!g\%G_POUGmO\.?\`pk/qX]%(mY%n2hotp"qDc^]H%o`:Bq",i*Q$X9h>sIuVh[:b0K1\LtZ4?!.%-F:hVt,?u>S`4^fu?R]VM(WL:L'6rC#NQoUPm%Xg=Bg7J)>W/%T%s,Q2L@FCE%4BgA%Ba`a]@/V$@mG[$.?`=OYKDQCCo(1\4EP@t3CNFJ^"fA.r^r?ggH>t^tBPf\1i$R0tbdp7MKR:O)7.m!K/YX]Z%S5tlo/%o6IL#<Cpn)41,dB?E(6"FE<-odSi75&OD$1K_<nf@).3H7u8nBj_\q$N)PE*f2/_CGc1qkQh=!Po,#.u\H3&N^E_;'[)=%eQ'6R<j0!s'<-%9"a3(7PlJ5+Dr$E=8CH90i&_odiIMEE`06O/CL_fqo(9`PZn4i*R5PrcUI:CnNf-n*Yt-b8kr6>dAELFa<9rPp%/-]t%Xfq;+7Rfj87c#=7U^WuLr[SH5ruj]):P@?%hG%Ot$Y(f2&A$-gU02Xc@Y^Oq@R"*6[IZRE4*ioi\^s(T<jQDWiVO*^.os[k%(L^RY@s#*;q63N24d&h"YcH@bT0r2)_K44Of*-pdUUZFKP=QANd+c-;%np-K>8;0?3#f,o?TgP;nlVn\dMKlP7[R1<A(&>/(?(#o%GW,Dj`\cJsaH'/CX*E3XMiUiVQQJ(69S8*"rF)(O=L1F)AI4MCRmn/I@hC8iLjAXGX\Jt#_/eU$4b1Z3Z^sZu@mW1SQ5p"f)!6aT%eSqfrmtp061)rAn6V;Qc:n1KfXRU[k]o6\8-]@YhHsBqD2Z1$+:sH[7@Bc*1;mp>\j*2qVda7,tN%&LbQ.qcB^(5+YK9lt,K`ubA%/`%6*4d?TD#+pk5Ogh.GY^jmmTpEX6'0;H,eD/*$<r@3iOt:m"dIP2,B[&g@r+)ePpCT"@Ii*3L>eQ,0nAuM">AI/(i/nT41r1Xa%$T;OMk2n"V"bPYa4WTSd>JMUrGXMdk4\ddVA<^qhan"*DbgFqq`sGE1;9OqGV8gsU&a!uP/8==i#VA-1.TciFpNNL/BN"?i^6SnE%A#V>-B%sY;.&scZ:3F48!18s\'Y'1%8S<@`gn$-#M-kcu^m\jM[judLGcbaW5),4JW5qKa=I.Sth#XT/c684,ML3gSK$N?XiMKW)%*V:4a<_Vq4G.KOXWh`]hOTa?_9-iKH@Dc<,B_da:,67!P:H.6Me`'oDI7fSUA'-T%jFJ7<:V(!@F%Li=2!5t$MTM1dHbI:kG;p!0%+cKSs?!&clD\AKFs([R.1hBX"m4-j1*]"?KU;V=.(b"">RP=na!?o#%R=Q@76On;q"7\_%Y0G5D15g'7:Q&,KCBl.9]=_%bXMb,4%p))2%fs^Iu@_tc5"5/]:M-Qc0N&Z[T-V`Jn3QZ6p:,rV4:UcOHQ+1>S=?JiY-'IU`]1e>ia_BePR$2B5P?W!HcBUJ&0c)EA3V0FN%jikJ+QS\Y6?-_f[WgrmO20m-UUrak\,u)\O.o\O8Y>F?)^6'lmp(a$dfiMkXN$lq8e[:IHqk%+a,P6J++aq2;OP8Y\*UAhQ'n0%(%W.gkNPj#"Ve4'!N:MDF-:6JJu`In=]9uWp;HU=Qr0K9j^.m"@WI5G!IK4^=>MM]2k1"!Ul@kk5FpEMD,/O&,a9W[GK9^KdGN%lD'%-iF:R^Oj/O8!"F_;0fBY3M\oSc4V9G[-N!X3>pGQN2@N%9*qrcQ)/e3f]BHa[([taS/$'s"g1@SJ:H$k/4+8ZB!)J]fj/J_j)2':%Z*EK%Y'>dX.-dT^7^t1iH?o8]Db38Vc/Yc6JrqC*!ceinIS1GV*q`tnr_p/Ge8j]s.1(E>8!dMbYt]4B6f\,19:Vh<_UApA60H\&%E;#(ZJS5H@dpert6.?\>'@k5=(Oi49>HOE&6%)G@PorfOhJ#enel+#e!qB]3<l8]o9_Y2T*8aqcZ@.&NVQhT:N%A^)U.1_N$/F5<%._K90@I-H6Z03u\H6(n@I@"9HPi!>,SOH5\QUM"nEKoG%/9.n"_=D<mBC^j;/mnR'r9aLQh>-<oI(*DKDlZ)8oE][&S"Xn1=2us)%qt'3ElI"(Yhk$EG?bG#3<[dfeo`luA%K._rU>anfc['s9>uDCN5A)Hr,j)4h^)t;lM`>YK.OP))Qoe3DGBsDHK<udb'#P"XN]W1a%)?q30j'm@(Z/l.a55i/THMM9$?"SY/(==)UfBI8j-a>S1@N4)3ip#%Fe'9]bj-Ge9.TH3+r;5U)&2/?DlT'6*_q#DYR9SEU["rN<%.c+J=ncPIZb!V;[a*\Prp%Ed^VguNL9UVk@YstIP('11sVfSJdVGH3.pE.*k?/CPM_LWJlV0,tR#+:5RPjLbH-JrQ?7T0cNKc)BU%WoYsnpbZ)5>HhFn,L^]`)SM6,<kW5.?:&BoDQ2c;jQS!mf@bRC/U<7oG2D*8Ulm<-,E>A_dp&2]B5q4QosV'kBh0GRjBJ0^kN&AY%>fE:.;'WRtX5BXkA*)sB:(B+W=e*';g"UN8F4l.B<gIT.@VI0_i-h>B5"bQ2=:N&QJ)"n5PNX)ZqB%p;Qt<f*iTS>*6Fre-Y3Fh.%^&$(Jl/CjR[qE<Sl\b#2ITUGgDq=gNVu>:ps7Q?*<V#1VeRin%B"tp)H[_t@J)9QNa&Q>L*i_GA<eou8St]RnO,k?%Gus$YT5I]!%qoVQ/Dahj\\Z4a%r;5)?L@OiM<E1\qfA!WYWTPq'g3RL&?_6g2E@J'5MLN$];uO@9Sc3f?<7FP=M-?oSeuRDd6:+[Tnmlldqs+%&%I?ct9Im-*SNluBAj+:f,=79Itp\W_BWr)VJq=_9,rH;<1Kf**MPpZ,#e!?g$mATpnX8Qu&^"'Vtk3(:VHG;YE??0&$rU./fr?$F!%hs]FX?\GJ+^*<)s"nVfsDD+qHWaA2oaTu4fU@+YDDqA'7J!.k8HGA=tEmhcc$GY5!Y,gTdX!^Kt7uI/"(&e\_-H48fLqb'$mSK$C%`BU'Y5@3Kbqag[iQEsn=dp5DN1cG+6%=YHlrOBc;=8BneFVX5BQaY`5BGnfZm>N`g>=?C(o/Sn'XVNihXgZYcN;0=M9[2^&6(4p%%oU5[rpn.<EmAEp8\V29.ZB8`3O%3ouh/W#\kbh$/8F+%PIuaj1;h'JA//"92KfNE^10sI\Nr4D)_4;]2Jn?dC0i(H*O>:/&Iui8(%l$kdXF8kbCj1\'m:/Z/->tpM1T(EQ,4I<5ZNoFUc5>%S;'pH\mFSM18rV6`-.<C'bXg4?:;0.hQY*kAGIVIQEb#@()Nf?`fprd;]%FIp;b..=$bRi0FU.fT!@+t[2(PUV*@h8';b+.o.eOZtQJgE.rZ:'nf;qdrHtWS[)U30sIJprdVMU_hS&Cc'1trGO%QD"LttQBE?2%hE+7@#Aesg5*Mda\7EfI"!-&2>G.g#Nsp+J`.TP>5:;5LqoPGm&uWU&]VIoeQXOi*QWR7KH%dWsSEb:U&7k^_)D@%[/jSV>&1SIZ%]p\XE<TPk%QtP.>9J:Lqoom.GakrkuTtDYi>uc1L'N/u_rSlZe;;P"=J(g+SGl#BuC_PRe8F#s5"tr(SHJsOjUM47*24Lpg5AHZC%5*(p;nd?njbJW^ZI<BZ0kO%]nQN'k]n`\A-^K\HZ?#L5QnMSQ8X,D,nLSNmrk80JS[2$e&A%50upU@E^qn@E&&@]EE*?DITX1gTo%Ni?1XIjU8'Pf\9VO3^ms20"e9GlI!LWC;+)f,+)F'i!lD_PH$b]2qKYo_E4KQUfC$\ZUCS5JPR;5Q>e1r9WQ1e*=dW4E2:K7Z06j%_<Reoj@M.FV3s39e*sk8=c5pN/VW[5'l+SB%H:TWjT_\:\+mn@2kZucVL1l0'6Ar2?u2pQZ4mX7ei,23T[AR)@9Tfe3l/f3Kg(Il%q+G>oPAW]_[n%%!mt0^co4h7gl)Q%94aO]5Fikf+It)g*4WPJZQR9qfHMWANkNUHj8^UMTZa]hf`C&NdU%HkCP5SJClJ2DB.OEu?%YWdJn.XkN=2S41`5?0r8=5,\"lG`&T*1M3Iep,e:eA.iWqt&:o^)h\Ss8-S/eULPbW?aZR[bJMC'g-uLmrDia8h709oi:Zep?US9%K'=Y]"pYs22#k88pSk5d)5=adXS7N=m$.M)8j.\"mAN:Ko^f!&)O]"KHVEf5fq$R*cAWb[p^iq_CAI,UmDZ-^#1`W)KrLdQp]58h%bW5^7hd'T<^O<eBE&Of;"nX1A"[DDcUUg!12AZ8&.f]8uFYBhmWl:T.m7XL`qc^LF$`CT5pXIcbgHYEipnuAO^Wpuk?do&4cO?,&%o;denK*'0prK'Fo5],*,Z`@&br&)rFEdhNVrKWM:m.M77cnbGNgRIj?^/i)aZJ(mMs1[2ohGl/+H[WUkUB,afbm)sX@<Z_5gP7H>%dP?R8=il")8!X"ah<FUOH@,F)F]dUqec*j,XN-M\fAjXDE:W&WCb5mrs8,L5(+6>9]@^r!^gm:X]>Cq+,M;,8DcW?C/ML/Ehc$#>%T+>$+nZU!?ZsG=]E3VU.cA:tN-bt-I!B7(Xq21Im0@tu[07eq/3"<VM(V\"&:>_X]cLu$:nXk\U;3:/&rqt=>!JL%*!;U$XQTnfY%Y\nt`r6>EAhH_$uN,Kaao?fd>YC8XJ^,kU5^:C"X6*pT>LV`g@*tJ;/O#QOZ4d*^`0=>lb_]R`**'[7,W:)"75;GSIimfQJ-0TRI%jftiP`EX6<]@5ZgB+O`T]A)2]Kn!LfN;CjL"b2:Zpl^p(4de.pqpk"Vs0*C1C3+k#s2FWN*I53-hOgsC_Ro^iq_XH2#>'"XmcXGT%3e">?D8$ue?a=[\&,,.*FGM4YLG,_j[nGP&GCF^[qd>b<Vh+f\X<&h\o3T+9T>,[KYeQ1PJ"c>FY[/4;o5;7q*QUB+=hd/uZp3_r%l9gG/*C$C^r>3qjGmD'Fad2(ds5nCiVjhWh&b3gE"RB6D&>$bRDndBoec,&Q\([HSVn:2k?b'oi^=Ru`hsAradXu+<V86qpo_mT7%I4!mgOp(jsQ@1W[BBR7RdY6QhqpkE*E^d&o]qsl:c`4&;s3c4.;ed#Z`">$.G]CDGDUjNR2PZ!n5@#?`Y7K0Ae^\*A5Q<Ah=M7gD%m5ESl)qU%_q-e^Ep44lonmDPcIF9`jeu,jto-Y4:=.Af^$$<G`qFs&5I"BJk=n]tPrP&.%qQNV7)/%?&jdiHQf,JP)DM^#n0),-Q%I<qR&GdZ8,[\n1!N]u-%+#`<:F`ggdmI5QNYP<:XZnIW[Vjm9N)JnbFr/Duh%C,;O0/!"bX7cI(?0uO\qb-8c-J]lsSF6)`la-C@%<6%5k%\oY%.5'@\Y-'hC1.Af*hR:q6Vk</$e+%&2=#^=b+0I8TIK#G\m<YDM9'q/))_.Y@6r(Z==0h/Wj:tGRW@Y2:S8=6%T9-jS%s53:[UFo-k?`EBN_PLV=2#['S&bp-jpb=p$I_UNq=<gHHT'?O`NUQW[%"nI?/E$18db_pR70*2j#`8Ce+:-pG&a:jRaEcD^?s'N#%NY"J`!;aFM2,80!#D@d6'_$,l+M+`A>,_t.N'7[Q5=n[L**!f0p.=.b9Lh`_OrMEf&@i@D&:2:J@h=]E*X>)+lY;**$(P6,O[]F#%hQ(,f>EIIT-[k&`:hZ3u!=;<!/*ItE]nN?H\-]q^ds).%&?dM0hl]G'l@<QlEG-kADs.cB&#J!oDjW26!KXTDTu!3u+sB!0QfM1O%$)JCXJgo2S59c$ZGg6Y8Lk?L139a%W;52\UKWIj20I05h_;lLh1@_?-2]KuU*YSaN.(+1'RiH-i*0O\gbU=h^#k2R"V"KS@bRt[!%QT<4)+;P(c0AQ^3[<5.edSWWJ))TH<0(?On4:+?0Qkjp[([tr=);6dI0f3,BnRZL%%B@$o_ocBA:lb]fn+7)Fe;#C\ZE&QrOZObl%:;I$OZ4gA1=B&'Z&O$C<7cMQD7plmL6SQWc+WqC=P0bDk4%i5IH&[K0%=J>A>sr?8FF3MKj:pp7JFnHpD[Gs.PA'4MEj'WfFp"^8%kQ5d47YMCL*n@h_BPj2>L&VfH/%F-T4(8nqp2g6G:W`F0.[]':jZ5n!'JN0=^HZ?`8kFObLF<edeksJXLR6btRj85+:iJ2"(j"RX%FC/gp*ub@Enh!hs0ho`)6T"TSI,d7r380*\,`Q_udAmrbc?eJYBtSQnOlr]K8>D#(IL:ciF@'D(3Y)"NPcTm;Fd*jOK(Z#<P&(5-%X'Hs3_pB;M)N5YDr2^nap&joU.LL-DI&fg>=nscfbQ<Pn<2_DXdZ6Cq39]`%&bT8DZK%:cC%*f37c^-"!@()(CVq"Z[Ss7W*hebr%1*h1tC$#QH=s'h0J:V3(!Gic\;$\+c#"T2=(M*TANuDOF!_1I@jSFZ[,%<CgkTCJ7M9#e>*,*HCp`WKi8FeD0&nqmhQ6pR(+&^7;%Zpbr:'?/ZrXJ%jSS;8NBNu+_hO=\).L.jS"Q;b$-:*HKX<6@94rWpO:A+5.;'l&EcKOPUIX;p)f_?=nB;DscD9S$+EK&E?g)mN+)%>t=>]^f`MshXFrI_9+/HjTH=rV1TLrHI38/j,o<P#CgC?gs?7Vg5&W4:-EQP;)-(j#L,L<"I4,7p1!@j`0M*&EeNr3_7>LY<eup_%FqZZ/:K(='!F`SYOiA;"i$5O[e9*F:[^\/SSdrj,/^k2(Y(9`OErn4VJFqBDX?P+?%N#YGH`55M+!`Y>H;=aG,8K:up57A@9-9:b%>oaAPB;EZ_^AHX.K7f_OS4QkrO'4;5E-Lgo>RGBkR0S^GTEsm)_*/LjR\-dYM%4I;)3U#1>SgE,`a(PA7:>kPj"NH`,`t9BCg0:3%Z)G!,6c2oL,]Ml3:(4t>n=1/XlfQEP/?@VPQBXo[k')snmi+jg`(^e/A1;qk[&#lHYS,tp`67RJ*B9*,b)qrdA'h\BTN6-U6+VB\%]V\Ib2&/%N)pD#!-T?eX0da=I!RB*EH8(Z<V_Q8cX*7%7+<+bLaa!nMJ&tG#oA@*ID(uD.$ZM"_UclH1]eu*-W1OS`RDiK`5tSJ.%W@WVA?/btIRf/9_D]4FF5ctp']EQdi=>s(`j!fHdYpVPdfZ=;8nShOa97WT]%O=+,NHP<d,<Z>TNQ<4U"NP]T89++:2e7,--ttO(%-Zmc[Ca<-$61Y83Y']4QXM*m@29upQGrK1<&/:\5%/RHDIHW6V$Q43=[b'6:`q"'>gt/eE^u?k=n:\l[EC$Ht<24m2*9&"q#,ac$%@#/GYShks*p<]6]fg)6.a<L`fb9lHS2icDE?*n;K3VbdAVEs%0-pk^@J-FouY5"1T*7T-VFs7&ZFTaFX88p)8=49g+=?uN,?\mj;%mZKp=.mP(@K6>*UW!kI)MUj"<6'P.g>LG#Lb93+iQCZtE8Y;iO,Q9e=CB7@"j%X?t,sdM>nj5T=Ze068Ic<S?/319Z_[@Ic)g2h`%YnO5.eq3n7X*)^%3Y"7:3G+_>E79[)!Xs_,$$@I#UH*bh]a^@ggVt]KT#l^[3-]NEA8,!f0QS=iis;"aOAfb!;h1hU!@L4i8NHs@%$UWM_Y6W=/`/Yo`.Kh;S!`-+t><R><1^-K:%C,r'JWmp1bo%KOBHn,K]]KCWq9?7<(+etaK8po]OQ(m8Wnur+Xn*LR?Y&77E)6e%%1K6)-3(G5]*VY&7;nV12A-s5]eAAu%3UX8)m.G<+bm):O!Z;\">0Dpaa(Hhdrg^(hAuSO9"t@\]E^83pVui#jOj'Nsr;pRQT.JO6%[X_GqS]QcPL-3lsaat^m4[0NP>nS]/@#2Tn0sG3437048OSE`&Okk])OmI$XG%qnQ?CF5s1*W<dM.kk0/&%n?AFTi'lNVF/6QVc=%Z4etIOA%W%p$#Uc,E.Z'F'W>N@W=oX[?_bSllbjudbkQSoa=90`!%J(DYF,:\`[MNNb#FQ[u)SqXgi':"\F_A\AdN*E0hRXP),UO%dChNIQK)XA1(j5c^i5)^,N?OT$$%WRd#/sL0"$7C6T:+M4Kt[InDKCs@$^#^[W<Pn]+[:-@BnPUZB;Cm*/I'no:Z(0WftZ-(CW(P%B.*Nq,h&_[=:AoJ7n-d+'7N,,^Dq[DH1(LdS_@DEKR(alfi_t!<e:<[=O`AK]r!N-LuH>K13rO2C)IaL%2CR;$nS^6P%RmUD2^MT%>rP<&jP1-me@`f<ImL_E?O%[)D'IE+#1)[W_ADaoZ#"H:XlP(O37P1&kWUk$2s/i1N'Jq@fBVq:UHYr=G<4P'5SJ(g#foY]:!Nh5%BM:Q#d$U>,Y"n'fR2p&a)N8^7p5sPZA0<-j#&j4N/morl:,\OaKZ`u!U(nIgZ4GnRA='G3G\<#d_t/YC7SZ;oh7I?^%Z%Su!87M,%9?n:go#Qt$"`Nng&Q,3)W==2L*#o*gOgE4E*R\<':kiA,$UGaWL#p$[+`ElqE9M!d&O*N1=g1+],7GAj;C[4ujG%0I@SlG$QLZ"m%cb$oqW[0&d-*ej;;@K5&;D?o^!*2mrKW1.]+7CH($'YnD>'R/V_lFD">u@GCc,dgn?H%Z8k\Mo-(Z-8QL:ZU9OPQ9LL?;*"<u3j!%1^bcbF0Q/m6r80LJJ8`/=m$dVOCo$ZK[Ar6*KQ74,ZFh*qO9HuLhe>Q7\l>X.HdL]hA5_Pcb1\r=SK(FP8AlpYH9g(S;Xg`^88\S%-q#p&D(cACO%4,I$Grb;)!e=r#^Q:rVS,EoE,L8E<"0h2N^6a-B/T[9k]EV'Ta\;6<emdeJ:jsVRT@WO%6OrPD'BR=H@c\DW4+o3%6t7NM!\"Lg^#'s*'g>'hbI%"+O:,*o(<0*.R:FM-4+Q_6T-D68&r6$IZLeu<3%usVVg2*PU>rpNABnuqgVJM4%[H(>5OW&<]gEl4%.f,fRe/!sP&F=N4J>+:%%=6?lOXs?mg!PuS86Nt+DIGM@)%iU?1XjT5LReH`^.rDD1Qrbr-/)usWcZpBDnT,$L>'#GK\B>%!\Y*q%-6Or5,a5S@6;TMpgZl$3s,9HG"ek6m56,OULNkk\OZa,;WT/P3Dr`i4A$DKp]&_d3-#chP^/MAa.Z*]HrF<dKmUXeT_(J@0R>Y4/%`L46]aEN0f(BZMXG$gI[%2p88*f-0T4_PP_ra^%_C@$/jg&#TuCJb=B#":NBT(<"k0&l;\,>`T:G]1Y;$<D-"6_1NeFo]^)G/=(2%!"miqF;5o[)43B)j%.7")[.A=fL`n+O]-e<m0;an1$Jkp.F1t&IZXNde/N6pUlYMUWtUmX>/LK50dC>aK8o3/.AsE!dZ6DBQ%(UK%PfG,hPZ+*WFi#RE3mJmMElu"[K2.F7L."eQr5&*dMoLnZZ(Gum(0SeEJl?>QVr<4V8.+UZS=27/i)Hc])K?+24;4-?XU%0`/.rH=%A1I4$!$e]]B4Sq0Cp$KC$7kXi.T=u*Mc6%\G""W\.;VB\;jlWgAhk*IAP*9SR8J")[i[?>UD7aJPHCkoJl<$,_]7rQEH-;(K!6u^%DooCaq[3!"8IXS,_.:cI274Up%*;4U/5^":Ab'Ki4O$"(!=JW%(rsES4N%>T%;)#&+J;o]+d-a`-;Xs2oV_o+:^P3(X@L`QeKq01%:ug#u!)6A4E#L/k.)iGi;!F#b-RI9>q?dcq<a;dCInNmP*E-6!#c+iYMd.l,+%;3XYt^NYRLZuhA5`i:o`FqAfNGihm)4lH&cQKo%4(B%">&4mf-7nO>d<R-=\]iJs=]I_hPTR6GYlW1Y20,],W(p/-[B9MCWZAW@I2X=.3$eLVW"kE;obe%aTY7SW^nH7Pc8R!3P\%gM%V3Ph%.b@<,//I6T;ZiktkZE'IaqNopc"Ds-PNFd?^KQB5$*Bk^rIRq&B"D"k@YYet/=L^R'X@%Bkj@Lb<2.oWL.egdBTp)<kZKkQ%W"B,[H;oJKfuUTAL)C9:78q2g&;sr?C--*1mf;tBSL_qX$lkBd,k`gAg<IkJ<#t"G_R1hT%*+muj`'jG":rksM\4U_cDKd3L=eRX%;`pt)\=q`O&=5WC:T^ls2i'Hc^O3'.%@(^mq+0W$j=GE$7>Aa@+_e?A5JTD5#q>Ks"=3^CX\Lp3:HK/aZJ:B>[s%PnB>`HEfO'S&%2<gS3KWYd.YeEk!O9VFPV6VlJ*n"/YZ#<[4BjaF._WAkI[q\>/^]K%8/%;(.HYt)p2`rQ'YjAhtdoAYY[_dPAiujYa@')b/+r7MW%Q:#NoOi<t#>X68YAe59h\QlL%,>CjZ1d@PHZ4*UNI@C%H[UOg!4n>+"-(4qPU``RM+4THBO2PVdE#M\WQi\.2PF>7sX=kr1^@8KP%/Z7Vtd,;#l55>c5=+Jt@`4=$=@%4uM>3?_21:N90ojU%HDX*>61'2,7Y`qHG(a:=$IBe[gb>BVqMF$/<LSo`QYe+80E?M!oq15HV%[Zk^sQSU&s]&=m.4LG;F?Lcs;?7Y5p3jA^pA$hAEJN%Y!B:h.k&XHs&#:!V,].p:kBkZ^aLW)),i%gHu1ms(*-r326QnA-\,]gHq%QErsTr!kF*3!$bYI:2mkrO1Ze!"4t\kBDGj)Ce%DL&beW:G/Qi3M,mGa)?![?0F`a%_5XQ`[BUL[M`nZFcO;6)^VGo&^2-:]"s/[%h9_+&"(up2l(r9N]%=)3h$@Uf9&0cu`&9%GNY;"Q5O1e3[5Ic<_al`%S_!N]La0r(F\[(S">_"Zr%<'ngRqkdBOsJ\_1;P)8hdbU%**e(6R6!u3*Fe#*!=#e?ASkau:q!A84rq#n\K#c"FAZk^'i8eU!#'Lc[a^(8?VgJ+'pgSu)F]i["&%ID3X7[<=oq?gH^>/_,+-?[%BRLID`j&80g*5`98[BHQ,ORY(QHN#705`C3@,cTAa;gNSU"4Yg";1*T*Y+LtE6QfnXc7J)J7AL7K8g@Z;-Ptt[7d,-e60>V&*bYt%o_$_BM:56;96T>J7\EP#&3&M7".K]g)N6boj=>%9?u(@ReO^SbcNB0rk[b:d)1C5[Ks'dcC`$-jGI8hA:=i]]S$%E_\UuB5k!KmM%22J>1#j)HUEiBA7#YV*5e-sn`LS?\:QJ'"%C>g7E;#/[B;/SQk[j+ZVBC7[rSQK@Sme;R)$j&1AD%\o;0PaGm8PL#:;Y=OL+.1&p%%,,sdOJEqYG@TfXBtT9OZ*V0sGb=I+60EU$)U)aI>NgC(F4k2m%]Y8OQc#.(ps:KV1u>JqGtd<d?W\h%PtFT6F;XIqJR+sT?u,m7%luMiO4BT*3\J]s8mYb?4/]N&_%u'>#"5U,(Kh$):!mMt*Z'k1249D#jbIulO,J`h,%n#RnnA/8*41X]Oj*7]R.56)O%5.=s%^p*u%:>9(798LRlq`U-`\5:8aMY^F%1;k0!/_C][;[+jVh?W1W#`&HSJ\cMk8l/TjI'9hNNXUq1ET#J,,NtBF@&>WCCZUH,aL<V69K'?J%mK3j&?2Ap\/3XS;Fj;81Qr:1Je(K+]*pj4IQ1$\"PA5dbaQXGN";+:G+Q)s3<"@N`]e7RK+HIX$TlX,[_._4q-Td-/*`EkULd>!K%_QW,1@u0diO$)-*@P]=tg-RjQ4l^R'q]K&76qV1lEAsR/JUA<*SFr>iWa2'7g2_'DpBB0>`'U==/2JF;.cA*C]9^XJp8OTTr5.QS%;6AIcoJZ$%EGs.aS+2/cbp"%\HpYa>"Ho=AaVF\48blsp3\DjI4]NqGZ_Nk]eU0^$[k50DN6:r![<!b*>(B(JXtB<ThUfU]j.`JG%6tSuG&P.7+##@^]'AG%1NKTKbbCCONEmeT8dgpi75B9m'^9Ej-R-M<5)m<.D5ZuA>cr>W2g]\>lG!pDHfj>b)0iLXung8,mP#`Mj%C+&72/)l$#C_EWoYofMIWRX:92b;Jhk4L,IB7puihC#cD+O;B_9UtJ3:so/BE1B'1e0`n5-G\,EWS2tX]KPs_\-M7k^(HP4!j`f3%HF>(FL#L!jMANGX[7gVdl3"B&Y>'PW*(s1>L0&^=H/E)<^]Dq\.SE;`5?(;m11aJA]ZDdUR7U&'OZQsoU3T7G+d6\9$jR=>j<0gA%*?$0Mh"$Eb1!Z.Hq5LA>77B_P@.BQZfT8]GUY8>=i*HVQ[Tm&%^d:Q3S$)[L.8@#48R*7oOfJ6,$K?2D>J%>2,B&W80[9HmdG5$S%:Eo@HQ@$F,o6RC]%&U/,&p,IIK,Fsf9>r<Hd\pN1(Urs[,eKngoIZU#E^o6Z\m'>N_(]qPe_NWS]<MTe_[k$RBd4AYFmeE3&6OTT%>RO4WW5f^fbmO8Fmo-dPK"&3Q\QGmP8UbT4$GX%Q1QQ6!3?O4^bi@jarEu(^8l4,"JB4p197c\[Soo*,'S;0g%PtrF?pV4oN@][L%Cu-;G#>@Up"Ka>[A?O??;_ln?P8mbo6O4gCl;u;5Dq7/A=6H(GrohVWl38D<\&_.O^8,*IgZ.S'gTRZY\%?iLkS#KGeQ;eAe";["%+!bT5[/~>%AI9_PrivateDataEnd